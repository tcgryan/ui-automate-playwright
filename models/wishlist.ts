//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

namespace Marketplace {

/** An item to add to the wishlist. */
export class AddItem implements IAddItem {
    /** The ProductConditionId for this listing. */
    sku?: number;
    /** The encrypted, public id of the listo.  Null if none. */
    customListingKey?: string | undefined;
    /** Quantity of this item to add. */
    quantity?: number;

    constructor(data?: IAddItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sku = _data["sku"];
            this.customListingKey = _data["customListingKey"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): AddItem {
        data = typeof data === 'object' ? data : {};
        let result = new AddItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sku"] = this.sku;
        data["customListingKey"] = this.customListingKey;
        data["quantity"] = this.quantity;
        return data;
    }
}

/** An item to add to the wishlist. */
export interface IAddItem {
    /** The ProductConditionId for this listing. */
    sku?: number;
    /** The encrypted, public id of the listo.  Null if none. */
    customListingKey?: string | undefined;
    /** Quantity of this item to add. */
    quantity?: number;
}

/** A request to add an item to a wishlist. */
export class AddItemRequest implements IAddItemRequest {
    /** The ProductConditionId for this listing. */
    sku?: number;
    /** The encrypted, public key of the listo.  Null if none. */
    customListingKey?: string | undefined;
    /** Quantity of this item to add. */
    quantity?: number;

    constructor(data?: IAddItemRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sku = _data["sku"];
            this.customListingKey = _data["customListingKey"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): AddItemRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddItemRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sku"] = this.sku;
        data["customListingKey"] = this.customListingKey;
        data["quantity"] = this.quantity;
        return data;
    }
}

/** A request to add an item to a wishlist. */
export interface IAddItemRequest {
    /** The ProductConditionId for this listing. */
    sku?: number;
    /** The encrypted, public key of the listo.  Null if none. */
    customListingKey?: string | undefined;
    /** Quantity of this item to add. */
    quantity?: number;
}

/** The result of adding an item to a wishlist. */
export class AddItemResponse implements IAddItemResponse {
    /** The ListItemId of the item added. */
    listItemId?: number;
    /** The total quantity of this item in the wishlist. */
    quantity?: number;
    /** The total quantity of this item in the wishlist before the add, in the case of an upsert. */
    previousQuantity?: number | undefined;

    constructor(data?: IAddItemResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listItemId = _data["listItemId"];
            this.quantity = _data["quantity"];
            this.previousQuantity = _data["previousQuantity"];
        }
    }

    static fromJS(data: any): AddItemResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AddItemResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listItemId"] = this.listItemId;
        data["quantity"] = this.quantity;
        data["previousQuantity"] = this.previousQuantity;
        return data;
    }
}

/** The result of adding an item to a wishlist. */
export interface IAddItemResponse {
    /** The ListItemId of the item added. */
    listItemId?: number;
    /** The total quantity of this item in the wishlist. */
    quantity?: number;
    /** The total quantity of this item in the wishlist before the add, in the case of an upsert. */
    previousQuantity?: number | undefined;
}

/** Result of adding an item to a wishlist. */
export class AddItemResult implements IAddItemResult {
    /** Standardized WishlistApi error code */
    readonly status?: string | undefined;
    /** The ProductConditionId for this listing. */
    sku?: number;
    /** The encrypted, public key of the listo.  Null if none. */
    customListingKey?: string | undefined;
    /** The ListItemId of the item added. */
    listItemId?: number;
    /** The total quantity of this item in the wishlist. */
    quantity?: number;
    /** The total quantity of this item in the wishlist before the add, in the case of an upsert. */
    previousQuantity?: number | undefined;

    constructor(data?: IAddItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).status = _data["status"];
            this.sku = _data["sku"];
            this.customListingKey = _data["customListingKey"];
            this.listItemId = _data["listItemId"];
            this.quantity = _data["quantity"];
            this.previousQuantity = _data["previousQuantity"];
        }
    }

    static fromJS(data: any): AddItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new AddItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["sku"] = this.sku;
        data["customListingKey"] = this.customListingKey;
        data["listItemId"] = this.listItemId;
        data["quantity"] = this.quantity;
        data["previousQuantity"] = this.previousQuantity;
        return data;
    }
}

/** Result of adding an item to a wishlist. */
export interface IAddItemResult {
    /** Standardized WishlistApi error code */
    status?: string | undefined;
    /** The ProductConditionId for this listing. */
    sku?: number;
    /** The encrypted, public key of the listo.  Null if none. */
    customListingKey?: string | undefined;
    /** The ListItemId of the item added. */
    listItemId?: number;
    /** The total quantity of this item in the wishlist. */
    quantity?: number;
    /** The total quantity of this item in the wishlist before the add, in the case of an upsert. */
    previousQuantity?: number | undefined;
}

export class ApiError implements IApiError {
    code?: string | undefined;
    message?: string | undefined;

    constructor(data?: IApiError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ApiError {
        data = typeof data === 'object' ? data : {};
        let result = new ApiError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        return data;
    }
}

export interface IApiError {
    code?: string | undefined;
    message?: string | undefined;
}

/** A request to add multiple items to a wishlist. */
export class BulkAddItemsRequest implements IBulkAddItemsRequest {
    /** The list of items to add to the wishlist. */
    readonly items?: AddItem[] | undefined;

    constructor(data?: IBulkAddItemsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                (<any>this).items = [] as any;
                for (let item of _data["items"])
                    (<any>this).items!.push(AddItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BulkAddItemsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BulkAddItemsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** A request to add multiple items to a wishlist. */
export interface IBulkAddItemsRequest {
    /** The list of items to add to the wishlist. */
    items?: AddItem[] | undefined;
}

/** Response with results of adding multiple items to a wishlist. */
export class BulkAddItemsResponse implements IBulkAddItemsResponse {
    /** Results of adding multiple items to a wishlist. */
    readonly items?: AddItemResult[] | undefined;

    constructor(data?: IBulkAddItemsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                (<any>this).items = [] as any;
                for (let item of _data["items"])
                    (<any>this).items!.push(AddItemResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BulkAddItemsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BulkAddItemsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** Response with results of adding multiple items to a wishlist. */
export interface IBulkAddItemsResponse {
    /** Results of adding multiple items to a wishlist. */
    items?: AddItemResult[] | undefined;
}

/** A request to delete multiple items from a wishlist. */
export class BulkDeleteItemsRequest implements IBulkDeleteItemsRequest {
    /** The list of ListItemIds to delete from the wishlist. */
    readonly items?: number[] | undefined;

    constructor(data?: IBulkDeleteItemsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                (<any>this).items = [] as any;
                for (let item of _data["items"])
                    (<any>this).items!.push(item);
            }
        }
    }

    static fromJS(data: any): BulkDeleteItemsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BulkDeleteItemsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item);
        }
        return data;
    }
}

/** A request to delete multiple items from a wishlist. */
export interface IBulkDeleteItemsRequest {
    /** The list of ListItemIds to delete from the wishlist. */
    items?: number[] | undefined;
}

/** Response with results of deleting multiple items from a wishlist. */
export class BulkDeleteItemsResponse implements IBulkDeleteItemsResponse {
    /** Results of deleting multiple items from a wishlist. */
    readonly items?: DeleteItemResult[] | undefined;

    constructor(data?: IBulkDeleteItemsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                (<any>this).items = [] as any;
                for (let item of _data["items"])
                    (<any>this).items!.push(DeleteItemResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BulkDeleteItemsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BulkDeleteItemsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** Response with results of deleting multiple items from a wishlist. */
export interface IBulkDeleteItemsResponse {
    /** Results of deleting multiple items from a wishlist. */
    items?: DeleteItemResult[] | undefined;
}

/** A request to update multiple items in a wishlist. */
export class BulkUpdateItemsRequest implements IBulkUpdateItemsRequest {
    /** The list of items to update in the wishlist. */
    readonly items?: UpdateItem[] | undefined;

    constructor(data?: IBulkUpdateItemsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                (<any>this).items = [] as any;
                for (let item of _data["items"])
                    (<any>this).items!.push(UpdateItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BulkUpdateItemsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new BulkUpdateItemsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** A request to update multiple items in a wishlist. */
export interface IBulkUpdateItemsRequest {
    /** The list of items to update in the wishlist. */
    items?: UpdateItem[] | undefined;
}

/** Response with results of updating multiple items in a wishlist. */
export class BulkUpdateItemsResponse implements IBulkUpdateItemsResponse {
    /** Results of updating multiple items in a wishlist. */
    readonly items?: UpdateItemResult[] | undefined;

    constructor(data?: IBulkUpdateItemsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                (<any>this).items = [] as any;
                for (let item of _data["items"])
                    (<any>this).items!.push(UpdateItemResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BulkUpdateItemsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new BulkUpdateItemsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** Response with results of updating multiple items in a wishlist. */
export interface IBulkUpdateItemsResponse {
    /** Results of updating multiple items in a wishlist. */
    items?: UpdateItemResult[] | undefined;
}

/** Request to create a wishlist not owned by any user */
export class CreateListRequest implements ICreateListRequest {
    /** Whether this wishlist creation request is a request to create the special "Save for Later" wishlist. */
    isSaveForLater?: boolean;

    constructor(data?: ICreateListRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSaveForLater = _data["isSaveForLater"];
        }
    }

    static fromJS(data: any): CreateListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSaveForLater"] = this.isSaveForLater;
        return data;
    }
}

/** Request to create a wishlist not owned by any user */
export interface ICreateListRequest {
    /** Whether this wishlist creation request is a request to create the special "Save for Later" wishlist. */
    isSaveForLater?: boolean;
}

/** Request to create a wishlist owned by a user */
export class CreateUserListRequest implements ICreateUserListRequest {
    /** Publicly visible identifier of the user who should own this wishlist.  This is not the same as `ProviderUserKey`. */
    externalUserId?: string;
    /** Whether this wishlist creation request is a request to create the special "Save for Later" wishlist. */
    isSaveForLater?: boolean;

    constructor(data?: ICreateUserListRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.externalUserId = _data["externalUserId"];
            this.isSaveForLater = _data["isSaveForLater"];
        }
    }

    static fromJS(data: any): CreateUserListRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserListRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["externalUserId"] = this.externalUserId;
        data["isSaveForLater"] = this.isSaveForLater;
        return data;
    }
}

/** Request to create a wishlist owned by a user */
export interface ICreateUserListRequest {
    /** Publicly visible identifier of the user who should own this wishlist.  This is not the same as `ProviderUserKey`. */
    externalUserId?: string;
    /** Whether this wishlist creation request is a request to create the special "Save for Later" wishlist. */
    isSaveForLater?: boolean;
}

/** Result of deleting an item from a wishlist. */
export class DeleteItemResult implements IDeleteItemResult {
    /** Standardized WishlistApi error code */
    readonly status?: string | undefined;
    /** The ListItemId of the item deleted. */
    listItemId?: number;

    constructor(data?: IDeleteItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).status = _data["status"];
            this.listItemId = _data["listItemId"];
        }
    }

    static fromJS(data: any): DeleteItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["listItemId"] = this.listItemId;
        return data;
    }
}

/** Result of deleting an item from a wishlist. */
export interface IDeleteItemResult {
    /** Standardized WishlistApi error code */
    status?: string | undefined;
    /** The ListItemId of the item deleted. */
    listItemId?: number;
}

/** Response with items in a wishlist. */
export class ItemListResponse implements IItemListResponse {
    /** Items requested from the wishlist. */
    readonly items?: WishlistItem[] | undefined;
    /** The total number of line items in this wishlist. */
    totalItems?: number;
    /** The total quantity of all items in this wishlist. */
    totalQuantity?: number;

    constructor(data?: IItemListResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                (<any>this).items = [] as any;
                for (let item of _data["items"])
                    (<any>this).items!.push(WishlistItem.fromJS(item));
            }
            this.totalItems = _data["totalItems"];
            this.totalQuantity = _data["totalQuantity"];
        }
    }

    static fromJS(data: any): ItemListResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ItemListResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["totalItems"] = this.totalItems;
        data["totalQuantity"] = this.totalQuantity;
        return data;
    }
}

/** Response with items in a wishlist. */
export interface IItemListResponse {
    /** Items requested from the wishlist. */
    items?: WishlistItem[] | undefined;
    /** The total number of line items in this wishlist. */
    totalItems?: number;
    /** The total quantity of all items in this wishlist. */
    totalQuantity?: number;
}

/** Request to move all items from Save for Later to a cart. */
export class MoveAllSaveForLaterToCartRequest implements IMoveAllSaveForLaterToCartRequest {
    /** Key of the cart to move items into. */
    cartKey?: string | undefined;
    /** Wish list key to remove items from. */
    saveForLaterKey?: string | undefined;
    /** The buyer's country code. */
    countryCode?: string | undefined;

    constructor(data?: IMoveAllSaveForLaterToCartRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cartKey = _data["cartKey"];
            this.saveForLaterKey = _data["saveForLaterKey"];
            this.countryCode = _data["countryCode"];
        }
    }

    static fromJS(data: any): MoveAllSaveForLaterToCartRequest {
        data = typeof data === 'object' ? data : {};
        let result = new MoveAllSaveForLaterToCartRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cartKey"] = this.cartKey;
        data["saveForLaterKey"] = this.saveForLaterKey;
        data["countryCode"] = this.countryCode;
        return data;
    }
}

/** Request to move all items from Save for Later to a cart. */
export interface IMoveAllSaveForLaterToCartRequest {
    /** Key of the cart to move items into. */
    cartKey?: string | undefined;
    /** Wish list key to remove items from. */
    saveForLaterKey?: string | undefined;
    /** The buyer's country code. */
    countryCode?: string | undefined;
}

/** Results of moving all Save for Later items into a cart. */
export class MoveAllSaveForLaterToCartResult implements IMoveAllSaveForLaterToCartResult {
    /** Individual item statuses. */
    readonly statuses?: MoveSaveForLaterToCartResultStatus[] | undefined;

    constructor(data?: IMoveAllSaveForLaterToCartResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["statuses"])) {
                (<any>this).statuses = [] as any;
                for (let item of _data["statuses"])
                    (<any>this).statuses!.push(MoveSaveForLaterToCartResultStatus.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MoveAllSaveForLaterToCartResult {
        data = typeof data === 'object' ? data : {};
        let result = new MoveAllSaveForLaterToCartResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.statuses)) {
            data["statuses"] = [];
            for (let item of this.statuses)
                data["statuses"].push(item.toJSON());
        }
        return data;
    }
}

/** Results of moving all Save for Later items into a cart. */
export interface IMoveAllSaveForLaterToCartResult {
    /** Individual item statuses. */
    statuses?: MoveSaveForLaterToCartResultStatus[] | undefined;
}

export class MoveAllSaveForLaterToCartResultApiResult implements IMoveAllSaveForLaterToCartResultApiResult {
    errors?: ApiError[] | undefined;
    results?: MoveAllSaveForLaterToCartResult[] | undefined;
    result?: MoveAllSaveForLaterToCartResult;

    constructor(data?: IMoveAllSaveForLaterToCartResultApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(MoveAllSaveForLaterToCartResult.fromJS(item));
            }
            this.result = _data["result"] ? MoveAllSaveForLaterToCartResult.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MoveAllSaveForLaterToCartResultApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new MoveAllSaveForLaterToCartResultApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMoveAllSaveForLaterToCartResultApiResult {
    errors?: ApiError[] | undefined;
    results?: MoveAllSaveForLaterToCartResult[] | undefined;
    result?: MoveAllSaveForLaterToCartResult;
}

/** Request to move items from Save for Later to a cart. */
export class MoveSaveForLaterToCartRequest implements IMoveSaveForLaterToCartRequest {
    /** Key of the cart to move items into. */
    cartKey?: string | undefined;
    /** Wish list key to remove items from. */
    saveForLaterKey?: string | undefined;
    /** The buyer's country code. */
    countryCode?: string | undefined;
    /** Cart items to be moved. */
    items?: MoveSaveForLaterToCartRequestItem[] | undefined;

    constructor(data?: IMoveSaveForLaterToCartRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cartKey = _data["cartKey"];
            this.saveForLaterKey = _data["saveForLaterKey"];
            this.countryCode = _data["countryCode"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(MoveSaveForLaterToCartRequestItem.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MoveSaveForLaterToCartRequest {
        data = typeof data === 'object' ? data : {};
        let result = new MoveSaveForLaterToCartRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cartKey"] = this.cartKey;
        data["saveForLaterKey"] = this.saveForLaterKey;
        data["countryCode"] = this.countryCode;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** Request to move items from Save for Later to a cart. */
export interface IMoveSaveForLaterToCartRequest {
    /** Key of the cart to move items into. */
    cartKey?: string | undefined;
    /** Wish list key to remove items from. */
    saveForLaterKey?: string | undefined;
    /** The buyer's country code. */
    countryCode?: string | undefined;
    /** Cart items to be moved. */
    items?: MoveSaveForLaterToCartRequestItem[] | undefined;
}

/** Save for Later item to be moved to the cart. */
export class MoveSaveForLaterToCartRequestItem implements IMoveSaveForLaterToCartRequestItem {
    /** Save for later item's id. */
    saveForLaterItemId?: number;
    /** Item's SKU. */
    sku?: number;
    /** Listo's custom key. */
    customListingKey?: string | undefined;
    /** Cart item's quantity. */
    quantity?: number;

    constructor(data?: IMoveSaveForLaterToCartRequestItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.saveForLaterItemId = _data["saveForLaterItemId"];
            this.sku = _data["sku"];
            this.customListingKey = _data["customListingKey"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): MoveSaveForLaterToCartRequestItem {
        data = typeof data === 'object' ? data : {};
        let result = new MoveSaveForLaterToCartRequestItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveForLaterItemId"] = this.saveForLaterItemId;
        data["sku"] = this.sku;
        data["customListingKey"] = this.customListingKey;
        data["quantity"] = this.quantity;
        return data;
    }
}

/** Save for Later item to be moved to the cart. */
export interface IMoveSaveForLaterToCartRequestItem {
    /** Save for later item's id. */
    saveForLaterItemId?: number;
    /** Item's SKU. */
    sku?: number;
    /** Listo's custom key. */
    customListingKey?: string | undefined;
    /** Cart item's quantity. */
    quantity?: number;
}

/** Results of moving Save for Later items into a cart. */
export class MoveSaveForLaterToCartResult implements IMoveSaveForLaterToCartResult {
    /** Individual item statuses. */
    readonly statuses?: MoveSaveForLaterToCartResultStatus[] | undefined;

    constructor(data?: IMoveSaveForLaterToCartResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["statuses"])) {
                (<any>this).statuses = [] as any;
                for (let item of _data["statuses"])
                    (<any>this).statuses!.push(MoveSaveForLaterToCartResultStatus.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MoveSaveForLaterToCartResult {
        data = typeof data === 'object' ? data : {};
        let result = new MoveSaveForLaterToCartResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.statuses)) {
            data["statuses"] = [];
            for (let item of this.statuses)
                data["statuses"].push(item.toJSON());
        }
        return data;
    }
}

/** Results of moving Save for Later items into a cart. */
export interface IMoveSaveForLaterToCartResult {
    /** Individual item statuses. */
    statuses?: MoveSaveForLaterToCartResultStatus[] | undefined;
}

export class MoveSaveForLaterToCartResultApiResult implements IMoveSaveForLaterToCartResultApiResult {
    errors?: ApiError[] | undefined;
    results?: MoveSaveForLaterToCartResult[] | undefined;
    result?: MoveSaveForLaterToCartResult;

    constructor(data?: IMoveSaveForLaterToCartResultApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(MoveSaveForLaterToCartResult.fromJS(item));
            }
            this.result = _data["result"] ? MoveSaveForLaterToCartResult.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MoveSaveForLaterToCartResultApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new MoveSaveForLaterToCartResultApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMoveSaveForLaterToCartResultApiResult {
    errors?: ApiError[] | undefined;
    results?: MoveSaveForLaterToCartResult[] | undefined;
    result?: MoveSaveForLaterToCartResult;
}

/** Results for a single item moving out of Save for Later. */
export class MoveSaveForLaterToCartResultStatus implements IMoveSaveForLaterToCartResultStatus {
    /** The SaveForLater item id that was moved */
    saveForLaterItemId?: number;
    /** The Sku of the item. */
    sku?: number;
    /** The CartApi or WishlistApi status of the operation */
    statusCode?: string | undefined;
    /** The quantity that was added to the cart */
    quantity?: number;
    /** The resulting cart item id of the moved item */
    cartItemId?: number;

    constructor(data?: IMoveSaveForLaterToCartResultStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.saveForLaterItemId = _data["saveForLaterItemId"];
            this.sku = _data["sku"];
            this.statusCode = _data["statusCode"];
            this.quantity = _data["quantity"];
            this.cartItemId = _data["cartItemId"];
        }
    }

    static fromJS(data: any): MoveSaveForLaterToCartResultStatus {
        data = typeof data === 'object' ? data : {};
        let result = new MoveSaveForLaterToCartResultStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["saveForLaterItemId"] = this.saveForLaterItemId;
        data["sku"] = this.sku;
        data["statusCode"] = this.statusCode;
        data["quantity"] = this.quantity;
        data["cartItemId"] = this.cartItemId;
        return data;
    }
}

/** Results for a single item moving out of Save for Later. */
export interface IMoveSaveForLaterToCartResultStatus {
    /** The SaveForLater item id that was moved */
    saveForLaterItemId?: number;
    /** The Sku of the item. */
    sku?: number;
    /** The CartApi or WishlistApi status of the operation */
    statusCode?: string | undefined;
    /** The quantity that was added to the cart */
    quantity?: number;
    /** The resulting cart item id of the moved item */
    cartItemId?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

/** The result of reconciling wish lists. */
export class ReconcileResponse implements IReconcileResponse {
    /** The key of the list that should be used for this user going forward. */
    listKey?: string | undefined;

    constructor(data?: IReconcileResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listKey = _data["listKey"];
        }
    }

    static fromJS(data: any): ReconcileResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ReconcileResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listKey"] = this.listKey;
        return data;
    }
}

/** The result of reconciling wish lists. */
export interface IReconcileResponse {
    /** The key of the list that should be used for this user going forward. */
    listKey?: string | undefined;
}

/** An item to update in the wishlist. */
export class UpdateItem implements IUpdateItem {
    /** The ListItemId of the item to update. */
    listItemId?: number;
    /** The new quantity for the item in the wishlist. */
    quantity?: number;

    constructor(data?: IUpdateItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listItemId = _data["listItemId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): UpdateItem {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listItemId"] = this.listItemId;
        data["quantity"] = this.quantity;
        return data;
    }
}

/** An item to update in the wishlist. */
export interface IUpdateItem {
    /** The ListItemId of the item to update. */
    listItemId?: number;
    /** The new quantity for the item in the wishlist. */
    quantity?: number;
}

/** A request to update an item in a wishlist. */
export class UpdateItemRequest implements IUpdateItemRequest {
    /** The ListItemId of the item to update. */
    listItemId?: number;
    /** The new quantity for the item in the wishlist. */
    quantity?: number;

    constructor(data?: IUpdateItemRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listItemId = _data["listItemId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): UpdateItemRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateItemRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listItemId"] = this.listItemId;
        data["quantity"] = this.quantity;
        return data;
    }
}

/** A request to update an item in a wishlist. */
export interface IUpdateItemRequest {
    /** The ListItemId of the item to update. */
    listItemId?: number;
    /** The new quantity for the item in the wishlist. */
    quantity?: number;
}

/** Result of updating an item in a wishlist. */
export class UpdateItemResult implements IUpdateItemResult {
    /** Standardized WishlistApi error code */
    readonly status?: string | undefined;
    /** The ListItemId of the item updated. */
    listItemId?: number;

    constructor(data?: IUpdateItemResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).status = _data["status"];
            this.listItemId = _data["listItemId"];
        }
    }

    static fromJS(data: any): UpdateItemResult {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateItemResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["listItemId"] = this.listItemId;
        return data;
    }
}

/** Result of updating an item in a wishlist. */
export interface IUpdateItemResult {
    /** Standardized WishlistApi error code */
    status?: string | undefined;
    /** The ListItemId of the item updated. */
    listItemId?: number;
}

/** An item in this wishlist. */
export class WishlistItem implements IWishlistItem {
    /** The ProductConditionId for this listing. */
    sku?: number;
    /** The encrypted, public key of the listo.  Null if none. */
    customListingKey?: string | undefined;
    /** The ListItemId of the item. */
    listItemId?: number;
    /** The quantity of this item in the wishlist. */
    quantity?: number;

    constructor(data?: IWishlistItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sku = _data["sku"];
            this.customListingKey = _data["customListingKey"];
            this.listItemId = _data["listItemId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): WishlistItem {
        data = typeof data === 'object' ? data : {};
        let result = new WishlistItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sku"] = this.sku;
        data["customListingKey"] = this.customListingKey;
        data["listItemId"] = this.listItemId;
        data["quantity"] = this.quantity;
        return data;
    }
}

/** An item in this wishlist. */
export interface IWishlistItem {
    /** The ProductConditionId for this listing. */
    sku?: number;
    /** The encrypted, public key of the listo.  Null if none. */
    customListingKey?: string | undefined;
    /** The ListItemId of the item. */
    listItemId?: number;
    /** The quantity of this item in the wishlist. */
    quantity?: number;
}

/** The results of creating a wishlist or requesting a user's wishlist */
export class WishlistKeyResponse implements IWishlistKeyResponse {
    /** Gets or sets the wishlist key for the response */
    wishlistKey?: string | undefined;

    constructor(data?: IWishlistKeyResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.wishlistKey = _data["wishlistKey"];
        }
    }

    static fromJS(data: any): WishlistKeyResponse {
        data = typeof data === 'object' ? data : {};
        let result = new WishlistKeyResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["wishlistKey"] = this.wishlistKey;
        return data;
    }
}

/** The results of creating a wishlist or requesting a user's wishlist */
export interface IWishlistKeyResponse {
    /** Gets or sets the wishlist key for the response */
    wishlistKey?: string | undefined;
}

}