//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class Aggregation implements IAggregation {
    value!: any;
    count!: number;

    constructor(data?: IAggregation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): Aggregation {
        data = typeof data === 'object' ? data : {};
        let result = new Aggregation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["count"] = this.count;
        return data;
    }
}

export interface IAggregation {
    value: any;
    count: number;
}

export class Aggregations implements IAggregations {

    [key: string]: Aggregation[] | any;

    constructor(data?: IAggregations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Aggregations {
        data = typeof data === 'object' ? data : {};
        let result = new Aggregations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IAggregations {

    [key: string]: Aggregation[] | any;
}

export class Cart implements ICart {
    packages!: Packages;

    constructor(data?: ICart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.packages = new Packages();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packages = _data["packages"] ? Packages.fromJS(_data["packages"]) : new Packages();
        }
    }

    static fromJS(data: any): Cart {
        data = typeof data === 'object' ? data : {};
        let result = new Cart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packages"] = this.packages ? this.packages.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICart {
    packages: Packages;
}

export class CustomAttributes implements ICustomAttributes {

    [key: string]: any;

    constructor(data?: ICustomAttributes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): CustomAttributes {
        data = typeof data === 'object' ? data : {};
        let result = new CustomAttributes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ICustomAttributes {

    [key: string]: any;
}

export class CustomData implements ICustomData {
    images!: string[];
    title!: string;
    description!: string;
    linkId!: string;

    constructor(data?: ICustomData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.images = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            this.title = _data["title"];
            this.description = _data["description"];
            this.linkId = _data["linkId"];
        }
    }

    static fromJS(data: any): CustomData {
        data = typeof data === 'object' ? data : {};
        let result = new CustomData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        data["title"] = this.title;
        data["description"] = this.description;
        data["linkId"] = this.linkId;
        return data;
    }
}

export interface ICustomData {
    images: string[];
    title: string;
    description: string;
    linkId: string;
}

export class DidYouMean implements IDidYouMean {
    original!: string | undefined;
    suggestion!: string | undefined;
    highlighted!: string | undefined;

    constructor(data?: IDidYouMean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.original = _data["original"];
            this.suggestion = _data["suggestion"];
            this.highlighted = _data["highlighted"];
        }
    }

    static fromJS(data: any): DidYouMean {
        data = typeof data === 'object' ? data : {};
        let result = new DidYouMean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["original"] = this.original;
        data["suggestion"] = this.suggestion;
        data["highlighted"] = this.highlighted;
        return data;
    }
}

export interface IDidYouMean {
    original: string | undefined;
    suggestion: string | undefined;
    highlighted: string | undefined;
}

export class DidYouMeanHighlight implements IDidYouMeanHighlight {
    preTag!: string;
    postTag!: string;

    constructor(data?: IDidYouMeanHighlight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.preTag = _data["preTag"];
            this.postTag = _data["postTag"];
        }
    }

    static fromJS(data: any): DidYouMeanHighlight {
        data = typeof data === 'object' ? data : {};
        let result = new DidYouMeanHighlight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["preTag"] = this.preTag;
        data["postTag"] = this.postTag;
        return data;
    }
}

export interface IDidYouMeanHighlight {
    preTag: string;
    postTag: string;
}

export class DidYouMeanSettings implements IDidYouMeanSettings {
    highlight!: DidYouMeanHighlight | undefined;

    constructor(data?: IDidYouMeanSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.highlight = _data["highlight"] ? DidYouMeanHighlight.fromJS(_data["highlight"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DidYouMeanSettings {
        data = typeof data === 'object' ? data : {};
        let result = new DidYouMeanSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["highlight"] = this.highlight ? this.highlight.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDidYouMeanSettings {
    highlight: DidYouMeanHighlight | undefined;
}

export class ErrorDto implements IErrorDto {
    error!: ErrorType[];

    constructor(data?: IErrorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.error = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["error"])) {
                this.error = [] as any;
                for (let item of _data["error"])
                    this.error!.push(ErrorType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ErrorDto {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.error)) {
            data["error"] = [];
            for (let item of this.error)
                data["error"].push(item.toJSON());
        }
        return data;
    }
}

export interface IErrorDto {
    error: ErrorType[];
}

export class ErrorType implements IErrorType {

    [key: string]: string | any;

    constructor(data?: IErrorType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): ErrorType {
        data = typeof data === 'object' ? data : {};
        let result = new ErrorType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IErrorType {

    [key: string]: string | any;
}

/** The collection of filters to apply to the search. */
export class Filters implements IFilters {
    term!: SearchFilter;
    range!: RangeFilter;
    exclude!: SearchFilter;
    match!: SearchFilter;

    constructor(data?: IFilters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.term = new SearchFilter();
            this.range = new RangeFilter();
            this.exclude = new SearchFilter();
            this.match = new SearchFilter();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.term = _data["term"] ? SearchFilter.fromJS(_data["term"]) : new SearchFilter();
            this.range = _data["range"] ? RangeFilter.fromJS(_data["range"]) : new RangeFilter();
            this.exclude = _data["exclude"] ? SearchFilter.fromJS(_data["exclude"]) : new SearchFilter();
            this.match = _data["match"] ? SearchFilter.fromJS(_data["match"]) : new SearchFilter();
        }
    }

    static fromJS(data: any): Filters {
        data = typeof data === 'object' ? data : {};
        let result = new Filters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["term"] = this.term ? this.term.toJSON() : <any>undefined;
        data["range"] = this.range ? this.range.toJSON() : <any>undefined;
        data["exclude"] = this.exclude ? this.exclude.toJSON() : <any>undefined;
        data["match"] = this.match ? this.match.toJSON() : <any>undefined;
        return data;
    }
}

/** The collection of filters to apply to the search. */
export interface IFilters {
    term: SearchFilter;
    range: RangeFilter;
    exclude: SearchFilter;
    match: SearchFilter;
}

export class Listing implements IListing {
    directProduct!: boolean;
    goldSeller!: boolean;
    listingId!: number;
    channelId!: number;
    conditionId!: number;
    listedDate!: string;
    verifiedSeller!: boolean;
    directInventory!: number;
    rankedShippingPrice!: number;
    productId!: number;
    printing!: string;
    languageAbbreviation!: string;
    sellerName!: string;
    forwardFreight!: boolean;
    sellerShippingPrice!: number;
    language!: string;
    shippingPrice!: number;
    condition!: string;
    languageId!: number;
    score!: number;
    directSeller!: boolean;
    productConditionId!: number;
    sellerId!: string;
    listingType!: string;
    soldDate!: string;
    sellerRating!: number;
    sellerSales!: string;
    quantity!: number;
    sellerKey!: string;
    price!: number;
    customData!: CustomData;

    constructor(data?: IListing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.customData = new CustomData();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.directProduct = _data["directProduct"];
            this.goldSeller = _data["goldSeller"];
            this.listingId = _data["listingId"];
            this.channelId = _data["channelId"];
            this.conditionId = _data["conditionId"];
            this.listedDate = _data["listedDate"];
            this.verifiedSeller = _data["verifiedSeller"];
            this.directInventory = _data["directInventory"];
            this.rankedShippingPrice = _data["rankedShippingPrice"];
            this.productId = _data["productId"];
            this.printing = _data["printing"];
            this.languageAbbreviation = _data["languageAbbreviation"];
            this.sellerName = _data["sellerName"];
            this.forwardFreight = _data["forwardFreight"];
            this.sellerShippingPrice = _data["sellerShippingPrice"];
            this.language = _data["language"];
            this.shippingPrice = _data["shippingPrice"];
            this.condition = _data["condition"];
            this.languageId = _data["languageId"];
            this.score = _data["score"];
            this.directSeller = _data["directSeller"];
            this.productConditionId = _data["productConditionId"];
            this.sellerId = _data["sellerId"];
            this.listingType = _data["listingType"];
            this.soldDate = _data["soldDate"];
            this.sellerRating = _data["sellerRating"];
            this.sellerSales = _data["sellerSales"];
            this.quantity = _data["quantity"];
            this.sellerKey = _data["sellerKey"];
            this.price = _data["price"];
            this.customData = _data["customData"] ? CustomData.fromJS(_data["customData"]) : new CustomData();
        }
    }

    static fromJS(data: any): Listing {
        data = typeof data === 'object' ? data : {};
        let result = new Listing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["directProduct"] = this.directProduct;
        data["goldSeller"] = this.goldSeller;
        data["listingId"] = this.listingId;
        data["channelId"] = this.channelId;
        data["conditionId"] = this.conditionId;
        data["listedDate"] = this.listedDate;
        data["verifiedSeller"] = this.verifiedSeller;
        data["directInventory"] = this.directInventory;
        data["rankedShippingPrice"] = this.rankedShippingPrice;
        data["productId"] = this.productId;
        data["printing"] = this.printing;
        data["languageAbbreviation"] = this.languageAbbreviation;
        data["sellerName"] = this.sellerName;
        data["forwardFreight"] = this.forwardFreight;
        data["sellerShippingPrice"] = this.sellerShippingPrice;
        data["language"] = this.language;
        data["shippingPrice"] = this.shippingPrice;
        data["condition"] = this.condition;
        data["languageId"] = this.languageId;
        data["score"] = this.score;
        data["directSeller"] = this.directSeller;
        data["productConditionId"] = this.productConditionId;
        data["sellerId"] = this.sellerId;
        data["listingType"] = this.listingType;
        data["soldDate"] = this.soldDate;
        data["sellerRating"] = this.sellerRating;
        data["sellerSales"] = this.sellerSales;
        data["quantity"] = this.quantity;
        data["sellerKey"] = this.sellerKey;
        data["price"] = this.price;
        data["customData"] = this.customData ? this.customData.toJSON() : <any>undefined;
        return data;
    }
}

export interface IListing {
    directProduct: boolean;
    goldSeller: boolean;
    listingId: number;
    channelId: number;
    conditionId: number;
    listedDate: string;
    verifiedSeller: boolean;
    directInventory: number;
    rankedShippingPrice: number;
    productId: number;
    printing: string;
    languageAbbreviation: string;
    sellerName: string;
    forwardFreight: boolean;
    sellerShippingPrice: number;
    language: string;
    shippingPrice: number;
    condition: string;
    languageId: number;
    score: number;
    directSeller: boolean;
    productConditionId: number;
    sellerId: string;
    listingType: string;
    soldDate: string;
    sellerRating: number;
    sellerSales: string;
    quantity: number;
    sellerKey: string;
    price: number;
    customData: CustomData;
}

export class ListingBucket implements IListingBucket {
    explanation!: any;
    totalResults!: number;
    error!: any;
    aggregations!: Aggregations;
    results!: Listing[];

    constructor(data?: IListingBucket) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.aggregations = new Aggregations();
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.explanation = _data["explanation"];
            this.totalResults = _data["totalResults"];
            this.error = _data["error"];
            this.aggregations = _data["aggregations"] ? Aggregations.fromJS(_data["aggregations"]) : new Aggregations();
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Listing.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListingBucket {
        data = typeof data === 'object' ? data : {};
        let result = new ListingBucket();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["explanation"] = this.explanation;
        data["totalResults"] = this.totalResults;
        data["error"] = this.error;
        data["aggregations"] = this.aggregations ? this.aggregations.toJSON() : <any>undefined;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IListingBucket {
    explanation: any;
    totalResults: number;
    error: any;
    aggregations: Aggregations;
    results: Listing[];
}

export class ListingBucketResponse implements IListingBucketResponse {
    resultId!: string;
    results!: ListingBucket[];
    error!: any;

    constructor(data?: IListingBucketResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resultId = _data["resultId"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ListingBucket.fromJS(item));
            }
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): ListingBucketResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ListingBucketResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resultId"] = this.resultId;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["error"] = this.error;
        return data;
    }
}

export interface IListingBucketResponse {
    resultId: string;
    results: ListingBucket[];
    error: any;
}

/** The search criteria which specify the pagination, sorting, filters and aggregations to apply to the bucket. */
export class ListingBucketSearch implements IListingBucketSearch {
    from!: number;
    size!: number;
    filters!: Filters;
    aggregations!: string[];
    selectiveAggregations!: boolean;
    sort!: any;

    constructor(data?: IListingBucketSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.filters = new Filters();
            this.aggregations = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"];
            this.size = _data["size"];
            this.filters = _data["filters"] ? Filters.fromJS(_data["filters"]) : new Filters();
            if (Array.isArray(_data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of _data["aggregations"])
                    this.aggregations!.push(item);
            }
            this.selectiveAggregations = _data["selectiveAggregations"];
            this.sort = _data["sort"];
        }
    }

    static fromJS(data: any): ListingBucketSearch {
        data = typeof data === 'object' ? data : {};
        let result = new ListingBucketSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from;
        data["size"] = this.size;
        data["filters"] = this.filters ? this.filters.toJSON() : <any>undefined;
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item);
        }
        data["selectiveAggregations"] = this.selectiveAggregations;
        data["sort"] = this.sort;
        return data;
    }
}

/** The search criteria which specify the pagination, sorting, filters and aggregations to apply to the bucket. */
export interface IListingBucketSearch {
    from: number;
    size: number;
    filters: Filters;
    aggregations: string[];
    selectiveAggregations: boolean;
    sort: any;
}

export class ListingBucketsSearch implements IListingBucketsSearch {
    sessionId!: string;
    /** The collection of bucket search criteria to apply to the search. */
    buckets!: ListingBucketSearch[];
    /** The query that was conducted */
    explain!: boolean;
    context!: V2Context;

    constructor(data?: IListingBucketsSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.buckets = [];
            this.context = new V2Context();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sessionId = _data["sessionId"];
            if (Array.isArray(_data["buckets"])) {
                this.buckets = [] as any;
                for (let item of _data["buckets"])
                    this.buckets!.push(ListingBucketSearch.fromJS(item));
            }
            this.explain = _data["explain"];
            this.context = _data["context"] ? V2Context.fromJS(_data["context"]) : new V2Context();
        }
    }

    static fromJS(data: any): ListingBucketsSearch {
        data = typeof data === 'object' ? data : {};
        let result = new ListingBucketsSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sessionId"] = this.sessionId;
        if (Array.isArray(this.buckets)) {
            data["buckets"] = [];
            for (let item of this.buckets)
                data["buckets"].push(item.toJSON());
        }
        data["explain"] = this.explain;
        data["context"] = this.context ? this.context.toJSON() : <any>undefined;
        return data;
    }
}

export interface IListingBucketsSearch {
    sessionId: string;
    /** The collection of bucket search criteria to apply to the search. */
    buckets: ListingBucketSearch[];
    /** The query that was conducted */
    explain: boolean;
    context: V2Context;
}

export class ListingRecommendationsResponse implements IListingRecommendationsResponse {
    resultId!: string;
    results!: ListingRecommendationsResponseResults[];

    constructor(data?: IListingRecommendationsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resultId = _data["resultId"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ListingRecommendationsResponseResults.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListingRecommendationsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ListingRecommendationsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resultId"] = this.resultId;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IListingRecommendationsResponse {
    resultId: string;
    results: ListingRecommendationsResponseResults[];
}

export class ListingRecommendationsResponseResults implements IListingRecommendationsResponseResults {
    relaxedFilters!: ListingRecommendationsResponseResultsRelaxedFilters;
    spotlight!: Listing;

    constructor(data?: IListingRecommendationsResponseResults) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.relaxedFilters = new ListingRecommendationsResponseResultsRelaxedFilters();
            this.spotlight = new Listing();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.relaxedFilters = _data["relaxedFilters"] ? ListingRecommendationsResponseResultsRelaxedFilters.fromJS(_data["relaxedFilters"]) : new ListingRecommendationsResponseResultsRelaxedFilters();
            this.spotlight = _data["spotlight"] ? Listing.fromJS(_data["spotlight"]) : new Listing();
        }
    }

    static fromJS(data: any): ListingRecommendationsResponseResults {
        data = typeof data === 'object' ? data : {};
        let result = new ListingRecommendationsResponseResults();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relaxedFilters"] = this.relaxedFilters ? this.relaxedFilters.toJSON() : <any>undefined;
        data["spotlight"] = this.spotlight ? this.spotlight.toJSON() : <any>undefined;
        return data;
    }
}

export interface IListingRecommendationsResponseResults {
    relaxedFilters: ListingRecommendationsResponseResultsRelaxedFilters;
    spotlight: Listing;
}

export class ListingRecommendationsResponseResultsRelaxedFilters implements IListingRecommendationsResponseResultsRelaxedFilters {
    listingCount!: number;
    filters!: ListingRecommendationsResponseResultsRelaxedFiltersFilters[];

    constructor(data?: IListingRecommendationsResponseResultsRelaxedFilters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.filters = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.listingCount = _data["listingCount"];
            if (Array.isArray(_data["filters"])) {
                this.filters = [] as any;
                for (let item of _data["filters"])
                    this.filters!.push(ListingRecommendationsResponseResultsRelaxedFiltersFilters.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListingRecommendationsResponseResultsRelaxedFilters {
        data = typeof data === 'object' ? data : {};
        let result = new ListingRecommendationsResponseResultsRelaxedFilters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["listingCount"] = this.listingCount;
        if (Array.isArray(this.filters)) {
            data["filters"] = [];
            for (let item of this.filters)
                data["filters"].push(item.toJSON());
        }
        return data;
    }
}

export interface IListingRecommendationsResponseResultsRelaxedFilters {
    listingCount: number;
    filters: ListingRecommendationsResponseResultsRelaxedFiltersFilters[];
}

export class ListingRecommendationsResponseResultsRelaxedFiltersFilters implements IListingRecommendationsResponseResultsRelaxedFiltersFilters {
    filter!: string;
    value!: any;

    constructor(data?: IListingRecommendationsResponseResultsRelaxedFiltersFilters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filter = _data["filter"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ListingRecommendationsResponseResultsRelaxedFiltersFilters {
        data = typeof data === 'object' ? data : {};
        let result = new ListingRecommendationsResponseResultsRelaxedFiltersFilters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter;
        data["value"] = this.value;
        return data;
    }
}

export interface IListingRecommendationsResponseResultsRelaxedFiltersFilters {
    filter: string;
    value: any;
}

export class ListingResponse implements IListingResponse {
    explanation!: any;
    totalResults!: number;
    error!: any;
    resultId!: string;
    aggregations!: Aggregations;
    results!: Listing[];

    constructor(data?: IListingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.aggregations = new Aggregations();
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.explanation = _data["explanation"];
            this.totalResults = _data["totalResults"];
            this.error = _data["error"];
            this.resultId = _data["resultId"];
            this.aggregations = _data["aggregations"] ? Aggregations.fromJS(_data["aggregations"]) : new Aggregations();
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Listing.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ListingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["explanation"] = this.explanation;
        data["totalResults"] = this.totalResults;
        data["error"] = this.error;
        data["resultId"] = this.resultId;
        data["aggregations"] = this.aggregations ? this.aggregations.toJSON() : <any>undefined;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IListingResponse {
    explanation: any;
    totalResults: number;
    error: any;
    resultId: string;
    aggregations: Aggregations;
    results: Listing[];
}

export class ListingSearch implements IListingSearch {
    includePresale!: boolean;
    /** The query that was conducted */
    explain!: boolean;
    mustHaveListings!: boolean;
    sessionId!: string;
    filters!: Filters;
    /** The number of items to return */
    size!: number;
    /** The starting page */
    from!: number;
    context!: V2Context;
    sort!: any;
    /** The fields to return counts for. */
    aggregations!: string[];

    constructor(data?: IListingSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.filters = new Filters();
            this.context = new V2Context();
            this.aggregations = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.includePresale = _data["includePresale"];
            this.explain = _data["explain"];
            this.mustHaveListings = _data["mustHaveListings"];
            this.sessionId = _data["sessionId"];
            this.filters = _data["filters"] ? Filters.fromJS(_data["filters"]) : new Filters();
            this.size = _data["size"];
            this.from = _data["from"];
            this.context = _data["context"] ? V2Context.fromJS(_data["context"]) : new V2Context();
            this.sort = _data["sort"];
            if (Array.isArray(_data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of _data["aggregations"])
                    this.aggregations!.push(item);
            }
        }
    }

    static fromJS(data: any): ListingSearch {
        data = typeof data === 'object' ? data : {};
        let result = new ListingSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["includePresale"] = this.includePresale;
        data["explain"] = this.explain;
        data["mustHaveListings"] = this.mustHaveListings;
        data["sessionId"] = this.sessionId;
        data["filters"] = this.filters ? this.filters.toJSON() : <any>undefined;
        data["size"] = this.size;
        data["from"] = this.from;
        data["context"] = this.context ? this.context.toJSON() : <any>undefined;
        data["sort"] = this.sort;
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item);
        }
        return data;
    }
}

export interface IListingSearch {
    includePresale: boolean;
    /** The query that was conducted */
    explain: boolean;
    mustHaveListings: boolean;
    sessionId: string;
    filters: Filters;
    /** The number of items to return */
    size: number;
    /** The starting page */
    from: number;
    context: V2Context;
    sort: any;
    /** The fields to return counts for. */
    aggregations: string[];
}

export class Package implements IPackage {
    packageShippingCost!: number;
    packageTotal!: number;

    constructor(data?: IPackage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageShippingCost = _data["packageShippingCost"];
            this.packageTotal = _data["packageTotal"];
        }
    }

    static fromJS(data: any): Package {
        data = typeof data === 'object' ? data : {};
        let result = new Package();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageShippingCost"] = this.packageShippingCost;
        data["packageTotal"] = this.packageTotal;
        return data;
    }
}

export interface IPackage {
    packageShippingCost: number;
    packageTotal: number;
}

export class Packages implements IPackages {

    [key: string]: Package | any;

    constructor(data?: IPackages) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): Packages {
        data = typeof data === 'object' ? data : {};
        let result = new Packages();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface IPackages {

    [key: string]: Package | any;
}

/** A range filter key value map. gte: specifies the value that must be greater than or equal to. lte: specifies the value that must be less than or equal to. */
export class RangeFilter implements IRangeFilter {

    [key: string]: RangeValue | any;

    constructor(data?: IRangeFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): RangeFilter {
        data = typeof data === 'object' ? data : {};
        let result = new RangeFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

/** A range filter key value map. gte: specifies the value that must be greater than or equal to. lte: specifies the value that must be less than or equal to. */
export interface IRangeFilter {

    [key: string]: RangeValue | any;
}

export class RangeValue implements IRangeValue {
    gte!: any;
    lte!: any;

    constructor(data?: IRangeValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gte = _data["gte"];
            this.lte = _data["lte"];
        }
    }

    static fromJS(data: any): RangeValue {
        data = typeof data === 'object' ? data : {};
        let result = new RangeValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gte"] = this.gte;
        data["lte"] = this.lte;
        return data;
    }
}

export interface IRangeValue {
    gte: any;
    lte: any;
}

export class RecommendationsResponse implements IRecommendationsResponse {
    resultId!: string;
    algorithm!: string;
    items!: RecommendationsResponseItems[];

    constructor(data?: IRecommendationsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.items = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resultId = _data["resultId"];
            this.algorithm = _data["algorithm"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RecommendationsResponseItems.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RecommendationsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RecommendationsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["resultId"] = this.resultId;
        data["algorithm"] = this.algorithm;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

export interface IRecommendationsResponse {
    resultId: string;
    algorithm: string;
    items: RecommendationsResponseItems[];
}

export class RecommendationsResponseItems implements IRecommendationsResponseItems {
    productUrlName2!: string;
    productLineUrlName2!: string;
    lowestPriceWithShipping!: number | undefined;
    setUrlName2!: string;
    productName!: string;
    productId!: number;
    setName!: string;
    confidence!: number;
    productLineName!: string;
    lowestPrice!: number | undefined;

    constructor(data?: IRecommendationsResponseItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productUrlName2 = _data["productUrlName2"];
            this.productLineUrlName2 = _data["productLineUrlName2"];
            this.lowestPriceWithShipping = _data["lowestPriceWithShipping"];
            this.setUrlName2 = _data["setUrlName2"];
            this.productName = _data["productName"];
            this.productId = _data["productId"];
            this.setName = _data["setName"];
            this.confidence = _data["confidence"];
            this.productLineName = _data["productLineName"];
            this.lowestPrice = _data["lowestPrice"];
        }
    }

    static fromJS(data: any): RecommendationsResponseItems {
        data = typeof data === 'object' ? data : {};
        let result = new RecommendationsResponseItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productUrlName2"] = this.productUrlName2;
        data["productLineUrlName2"] = this.productLineUrlName2;
        data["lowestPriceWithShipping"] = this.lowestPriceWithShipping;
        data["setUrlName2"] = this.setUrlName2;
        data["productName"] = this.productName;
        data["productId"] = this.productId;
        data["setName"] = this.setName;
        data["confidence"] = this.confidence;
        data["productLineName"] = this.productLineName;
        data["lowestPrice"] = this.lowestPrice;
        return data;
    }
}

export interface IRecommendationsResponseItems {
    productUrlName2: string;
    productLineUrlName2: string;
    lowestPriceWithShipping: number | undefined;
    setUrlName2: string;
    productName: string;
    productId: number;
    setName: string;
    confidence: number;
    productLineName: string;
    lowestPrice: number | undefined;
}

/** A key value map of search fields and values. The values can be single or multi valued. */
export class SearchFilter implements ISearchFilter {

    [key: string]: any;

    constructor(data?: ISearchFilter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): SearchFilter {
        data = typeof data === 'object' ? data : {};
        let result = new SearchFilter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

/** A key value map of search fields and values. The values can be single or multi valued. */
export interface ISearchFilter {

    [key: string]: any;
}

export class SellerCatalogSearchProduct implements ISellerCatalogSearchProduct {
    shippingCategoryId!: number | undefined;
    duplicate!: boolean;
    productLineUrlName!: string;
    productTypeName!: string | undefined;
    productUrlName!: string;
    productTypeId!: number;
    rarityName!: string;
    sealed!: boolean;
    marketPrice!: number | undefined;
    customAttributes!: CustomAttributes;
    lowestPriceWithShipping!: number | undefined;
    productName!: string;
    setId!: number;
    setCode!: string;
    productId!: number;
    artist!: string | undefined;
    imageCount!: number | undefined;
    medianPrice!: number | undefined;
    score!: number;
    setName!: string;
    sellers!: number | undefined;
    foilOnly!: boolean | undefined;
    setUrlName!: string;
    sellerListable!: boolean;
    skus!: SellerCatalogSkuItem[];
    productLineId!: number;
    totalQuantity!: number;
    productStatusId!: number;
    productLineName!: string;
    maxFulfillableQuantity!: number | undefined;
    normalOnly!: boolean | undefined;
    listings!: Listing[];
    lowestPrice!: number | undefined;

    constructor(data?: ISellerCatalogSearchProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.customAttributes = new CustomAttributes();
            this.skus = [];
            this.listings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shippingCategoryId = _data["shippingCategoryId"];
            this.duplicate = _data["duplicate"];
            this.productLineUrlName = _data["productLineUrlName"];
            this.productTypeName = _data["productTypeName"];
            this.productUrlName = _data["productUrlName"];
            this.productTypeId = _data["productTypeId"];
            this.rarityName = _data["rarityName"];
            this.sealed = _data["sealed"];
            this.marketPrice = _data["marketPrice"];
            this.customAttributes = _data["customAttributes"] ? CustomAttributes.fromJS(_data["customAttributes"]) : new CustomAttributes();
            this.lowestPriceWithShipping = _data["lowestPriceWithShipping"];
            this.productName = _data["productName"];
            this.setId = _data["setId"];
            this.setCode = _data["setCode"];
            this.productId = _data["productId"];
            this.artist = _data["artist"];
            this.imageCount = _data["imageCount"];
            this.medianPrice = _data["medianPrice"];
            this.score = _data["score"];
            this.setName = _data["setName"];
            this.sellers = _data["sellers"];
            this.foilOnly = _data["foilOnly"];
            this.setUrlName = _data["setUrlName"];
            this.sellerListable = _data["sellerListable"];
            if (Array.isArray(_data["skus"])) {
                this.skus = [] as any;
                for (let item of _data["skus"])
                    this.skus!.push(SellerCatalogSkuItem.fromJS(item));
            }
            this.productLineId = _data["productLineId"];
            this.totalQuantity = _data["totalQuantity"];
            this.productStatusId = _data["productStatusId"];
            this.productLineName = _data["productLineName"];
            this.maxFulfillableQuantity = _data["maxFulfillableQuantity"];
            this.normalOnly = _data["normalOnly"];
            if (Array.isArray(_data["listings"])) {
                this.listings = [] as any;
                for (let item of _data["listings"])
                    this.listings!.push(Listing.fromJS(item));
            }
            this.lowestPrice = _data["lowestPrice"];
        }
    }

    static fromJS(data: any): SellerCatalogSearchProduct {
        data = typeof data === 'object' ? data : {};
        let result = new SellerCatalogSearchProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shippingCategoryId"] = this.shippingCategoryId;
        data["duplicate"] = this.duplicate;
        data["productLineUrlName"] = this.productLineUrlName;
        data["productTypeName"] = this.productTypeName;
        data["productUrlName"] = this.productUrlName;
        data["productTypeId"] = this.productTypeId;
        data["rarityName"] = this.rarityName;
        data["sealed"] = this.sealed;
        data["marketPrice"] = this.marketPrice;
        data["customAttributes"] = this.customAttributes ? this.customAttributes.toJSON() : <any>undefined;
        data["lowestPriceWithShipping"] = this.lowestPriceWithShipping;
        data["productName"] = this.productName;
        data["setId"] = this.setId;
        data["setCode"] = this.setCode;
        data["productId"] = this.productId;
        data["artist"] = this.artist;
        data["imageCount"] = this.imageCount;
        data["medianPrice"] = this.medianPrice;
        data["score"] = this.score;
        data["setName"] = this.setName;
        data["sellers"] = this.sellers;
        data["foilOnly"] = this.foilOnly;
        data["setUrlName"] = this.setUrlName;
        data["sellerListable"] = this.sellerListable;
        if (Array.isArray(this.skus)) {
            data["skus"] = [];
            for (let item of this.skus)
                data["skus"].push(item.toJSON());
        }
        data["productLineId"] = this.productLineId;
        data["totalQuantity"] = this.totalQuantity;
        data["productStatusId"] = this.productStatusId;
        data["productLineName"] = this.productLineName;
        data["maxFulfillableQuantity"] = this.maxFulfillableQuantity;
        data["normalOnly"] = this.normalOnly;
        if (Array.isArray(this.listings)) {
            data["listings"] = [];
            for (let item of this.listings)
                data["listings"].push(item.toJSON());
        }
        data["lowestPrice"] = this.lowestPrice;
        return data;
    }
}

export interface ISellerCatalogSearchProduct {
    shippingCategoryId: number | undefined;
    duplicate: boolean;
    productLineUrlName: string;
    productTypeName: string | undefined;
    productUrlName: string;
    productTypeId: number;
    rarityName: string;
    sealed: boolean;
    marketPrice: number | undefined;
    customAttributes: CustomAttributes;
    lowestPriceWithShipping: number | undefined;
    productName: string;
    setId: number;
    setCode: string;
    productId: number;
    artist: string | undefined;
    imageCount: number | undefined;
    medianPrice: number | undefined;
    score: number;
    setName: string;
    sellers: number | undefined;
    foilOnly: boolean | undefined;
    setUrlName: string;
    sellerListable: boolean;
    skus: SellerCatalogSkuItem[];
    productLineId: number;
    totalQuantity: number;
    productStatusId: number;
    productLineName: string;
    maxFulfillableQuantity: number | undefined;
    normalOnly: boolean | undefined;
    listings: Listing[];
    lowestPrice: number | undefined;
}

export class SellerCatalogSearchResponse implements ISellerCatalogSearchResponse {
    explanation!: any;
    algorithm!: string;
    searchType!: string;
    didYouMean!: DidYouMean | undefined;
    totalResults!: number;
    error!: any;
    resultId!: string;
    aggregations!: Aggregations;
    results!: SellerCatalogSearchProduct[];

    constructor(data?: ISellerCatalogSearchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.aggregations = new Aggregations();
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.explanation = _data["explanation"];
            this.algorithm = _data["algorithm"];
            this.searchType = _data["searchType"];
            this.didYouMean = _data["didYouMean"] ? DidYouMean.fromJS(_data["didYouMean"]) : <any>undefined;
            this.totalResults = _data["totalResults"];
            this.error = _data["error"];
            this.resultId = _data["resultId"];
            this.aggregations = _data["aggregations"] ? Aggregations.fromJS(_data["aggregations"]) : new Aggregations();
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(SellerCatalogSearchProduct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SellerCatalogSearchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SellerCatalogSearchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["explanation"] = this.explanation;
        data["algorithm"] = this.algorithm;
        data["searchType"] = this.searchType;
        data["didYouMean"] = this.didYouMean ? this.didYouMean.toJSON() : <any>undefined;
        data["totalResults"] = this.totalResults;
        data["error"] = this.error;
        data["resultId"] = this.resultId;
        data["aggregations"] = this.aggregations ? this.aggregations.toJSON() : <any>undefined;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISellerCatalogSearchResponse {
    explanation: any;
    algorithm: string;
    searchType: string;
    didYouMean: DidYouMean | undefined;
    totalResults: number;
    error: any;
    resultId: string;
    aggregations: Aggregations;
    results: SellerCatalogSearchProduct[];
}

export class SellerCatalogSkuItem implements ISellerCatalogSkuItem {
    productConditionId!: number;
    listingId!: number;
    price!: number;
    quantity!: number;
    type!: string;
    directInventory!: number;
    title!: string;
    description!: string;

    constructor(data?: ISellerCatalogSkuItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productConditionId = _data["productConditionId"];
            this.listingId = _data["listingId"];
            this.price = _data["price"];
            this.quantity = _data["quantity"];
            this.type = _data["type"];
            this.directInventory = _data["directInventory"];
            this.title = _data["title"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): SellerCatalogSkuItem {
        data = typeof data === 'object' ? data : {};
        let result = new SellerCatalogSkuItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productConditionId"] = this.productConditionId;
        data["listingId"] = this.listingId;
        data["price"] = this.price;
        data["quantity"] = this.quantity;
        data["type"] = this.type;
        data["directInventory"] = this.directInventory;
        data["title"] = this.title;
        data["description"] = this.description;
        return data;
    }
}

export interface ISellerCatalogSkuItem {
    productConditionId: number;
    listingId: number;
    price: number;
    quantity: number;
    type: string;
    directInventory: number;
    title: string;
    description: string;
}

export class Settings implements ISettings {
    useFuzzySearch!: boolean | undefined;
    didYouMean!: DidYouMeanSettings | undefined;
    disableSynonyms!: boolean | undefined;

    constructor(data?: ISettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.useFuzzySearch = _data["useFuzzySearch"];
            this.didYouMean = _data["didYouMean"] ? DidYouMeanSettings.fromJS(_data["didYouMean"]) : <any>undefined;
            this.disableSynonyms = _data["disableSynonyms"];
        }
    }

    static fromJS(data: any): Settings {
        data = typeof data === 'object' ? data : {};
        let result = new Settings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useFuzzySearch"] = this.useFuzzySearch;
        data["didYouMean"] = this.didYouMean ? this.didYouMean.toJSON() : <any>undefined;
        data["disableSynonyms"] = this.disableSynonyms;
        return data;
    }
}

export interface ISettings {
    useFuzzySearch: boolean | undefined;
    didYouMean: DidYouMeanSettings | undefined;
    disableSynonyms: boolean | undefined;
}

export class SkuOnHold implements ISkuOnHold {

    [key: string]: number | any;

    constructor(data?: ISkuOnHold) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): SkuOnHold {
        data = typeof data === 'object' ? data : {};
        let result = new SkuOnHold();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface ISkuOnHold {

    [key: string]: number | any;
}

export class SkuSearch implements ISkuSearch {
    q!: string;
    explain!: boolean;
    algorithm!: string;
    sessionId!: string;
    filters!: Filters;
    settings!: Settings;
    size!: number;
    searchListingsAlways!: boolean;
    from!: number;
    listingSearch!: V2ListingSearch;
    sort!: any;
    aggregations!: string[];

    constructor(data?: ISkuSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.filters = new Filters();
            this.settings = new Settings();
            this.listingSearch = new V2ListingSearch();
            this.aggregations = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.q = _data["q"];
            this.explain = _data["explain"];
            this.algorithm = _data["algorithm"];
            this.sessionId = _data["sessionId"];
            this.filters = _data["filters"] ? Filters.fromJS(_data["filters"]) : new Filters();
            this.settings = _data["settings"] ? Settings.fromJS(_data["settings"]) : new Settings();
            this.size = _data["size"];
            this.searchListingsAlways = _data["searchListingsAlways"];
            this.from = _data["from"];
            this.listingSearch = _data["listingSearch"] ? V2ListingSearch.fromJS(_data["listingSearch"]) : new V2ListingSearch();
            this.sort = _data["sort"];
            if (Array.isArray(_data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of _data["aggregations"])
                    this.aggregations!.push(item);
            }
        }
    }

    static fromJS(data: any): SkuSearch {
        data = typeof data === 'object' ? data : {};
        let result = new SkuSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["q"] = this.q;
        data["explain"] = this.explain;
        data["algorithm"] = this.algorithm;
        data["sessionId"] = this.sessionId;
        data["filters"] = this.filters ? this.filters.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["size"] = this.size;
        data["searchListingsAlways"] = this.searchListingsAlways;
        data["from"] = this.from;
        data["listingSearch"] = this.listingSearch ? this.listingSearch.toJSON() : <any>undefined;
        data["sort"] = this.sort;
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item);
        }
        return data;
    }
}

export interface ISkuSearch {
    q: string;
    explain: boolean;
    algorithm: string;
    sessionId: string;
    filters: Filters;
    settings: Settings;
    size: number;
    searchListingsAlways: boolean;
    from: number;
    listingSearch: V2ListingSearch;
    sort: any;
    aggregations: string[];
}

export class SkuSearchResponse implements ISkuSearchResponse {
    totalResults!: number;
    aggregations!: Aggregations;
    resultId!: string;
    error!: any;
    explanation!: any;
    algorithm!: string;
    results!: SkuSearchResults[];

    constructor(data?: ISkuSearchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.aggregations = new Aggregations();
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalResults = _data["totalResults"];
            this.aggregations = _data["aggregations"] ? Aggregations.fromJS(_data["aggregations"]) : new Aggregations();
            this.resultId = _data["resultId"];
            this.error = _data["error"];
            this.explanation = _data["explanation"];
            this.algorithm = _data["algorithm"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(SkuSearchResults.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SkuSearchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SkuSearchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalResults"] = this.totalResults;
        data["aggregations"] = this.aggregations ? this.aggregations.toJSON() : <any>undefined;
        data["resultId"] = this.resultId;
        data["error"] = this.error;
        data["explanation"] = this.explanation;
        data["algorithm"] = this.algorithm;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISkuSearchResponse {
    totalResults: number;
    aggregations: Aggregations;
    resultId: string;
    error: any;
    explanation: any;
    algorithm: string;
    results: SkuSearchResults[];
}

export class SkuSearchResults implements ISkuSearchResults {
    shippingCategoryId!: number | undefined;
    productLineUrlName!: string;
    productTypeName!: string | undefined;
    productUrlName!: string;
    productTypeId!: number;
    rarityName!: string;
    sealed!: boolean;
    conditionId!: number;
    marketPrice!: number | undefined;
    customAttributes!: CustomAttributes;
    lowestPriceWithShipping!: number | undefined;
    productName!: string;
    setId!: number;
    setCode!: string;
    lowestShipping!: string;
    productId!: number;
    artist!: string | undefined;
    imageCount!: number | undefined;
    printing!: string;
    medianPrice!: number | undefined;
    condition!: string;
    score!: number;
    setName!: string;
    skuId!: number;
    sellers!: number | undefined;
    foilOnly!: boolean | undefined;
    setUrlName!: string;
    totalListings!: number;
    productLineId!: number;
    productStatusId!: number;
    productLineName!: string;
    maxFulfillableQuantity!: number | undefined;
    normalOnly!: boolean | undefined;
    listings!: Listing[];
    lowestPrice!: number | undefined;

    constructor(data?: ISkuSearchResults) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.customAttributes = new CustomAttributes();
            this.listings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shippingCategoryId = _data["shippingCategoryId"];
            this.productLineUrlName = _data["productLineUrlName"];
            this.productTypeName = _data["productTypeName"];
            this.productUrlName = _data["productUrlName"];
            this.productTypeId = _data["productTypeId"];
            this.rarityName = _data["rarityName"];
            this.sealed = _data["sealed"];
            this.conditionId = _data["conditionId"];
            this.marketPrice = _data["marketPrice"];
            this.customAttributes = _data["customAttributes"] ? CustomAttributes.fromJS(_data["customAttributes"]) : new CustomAttributes();
            this.lowestPriceWithShipping = _data["lowestPriceWithShipping"];
            this.productName = _data["productName"];
            this.setId = _data["setId"];
            this.setCode = _data["setCode"];
            this.lowestShipping = _data["lowestShipping"];
            this.productId = _data["productId"];
            this.artist = _data["artist"];
            this.imageCount = _data["imageCount"];
            this.printing = _data["printing"];
            this.medianPrice = _data["medianPrice"];
            this.condition = _data["condition"];
            this.score = _data["score"];
            this.setName = _data["setName"];
            this.skuId = _data["skuId"];
            this.sellers = _data["sellers"];
            this.foilOnly = _data["foilOnly"];
            this.setUrlName = _data["setUrlName"];
            this.totalListings = _data["totalListings"];
            this.productLineId = _data["productLineId"];
            this.productStatusId = _data["productStatusId"];
            this.productLineName = _data["productLineName"];
            this.maxFulfillableQuantity = _data["maxFulfillableQuantity"];
            this.normalOnly = _data["normalOnly"];
            if (Array.isArray(_data["listings"])) {
                this.listings = [] as any;
                for (let item of _data["listings"])
                    this.listings!.push(Listing.fromJS(item));
            }
            this.lowestPrice = _data["lowestPrice"];
        }
    }

    static fromJS(data: any): SkuSearchResults {
        data = typeof data === 'object' ? data : {};
        let result = new SkuSearchResults();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shippingCategoryId"] = this.shippingCategoryId;
        data["productLineUrlName"] = this.productLineUrlName;
        data["productTypeName"] = this.productTypeName;
        data["productUrlName"] = this.productUrlName;
        data["productTypeId"] = this.productTypeId;
        data["rarityName"] = this.rarityName;
        data["sealed"] = this.sealed;
        data["conditionId"] = this.conditionId;
        data["marketPrice"] = this.marketPrice;
        data["customAttributes"] = this.customAttributes ? this.customAttributes.toJSON() : <any>undefined;
        data["lowestPriceWithShipping"] = this.lowestPriceWithShipping;
        data["productName"] = this.productName;
        data["setId"] = this.setId;
        data["setCode"] = this.setCode;
        data["lowestShipping"] = this.lowestShipping;
        data["productId"] = this.productId;
        data["artist"] = this.artist;
        data["imageCount"] = this.imageCount;
        data["printing"] = this.printing;
        data["medianPrice"] = this.medianPrice;
        data["condition"] = this.condition;
        data["score"] = this.score;
        data["setName"] = this.setName;
        data["skuId"] = this.skuId;
        data["sellers"] = this.sellers;
        data["foilOnly"] = this.foilOnly;
        data["setUrlName"] = this.setUrlName;
        data["totalListings"] = this.totalListings;
        data["productLineId"] = this.productLineId;
        data["productStatusId"] = this.productStatusId;
        data["productLineName"] = this.productLineName;
        data["maxFulfillableQuantity"] = this.maxFulfillableQuantity;
        data["normalOnly"] = this.normalOnly;
        if (Array.isArray(this.listings)) {
            data["listings"] = [];
            for (let item of this.listings)
                data["listings"].push(item.toJSON());
        }
        data["lowestPrice"] = this.lowestPrice;
        return data;
    }
}

export interface ISkuSearchResults {
    shippingCategoryId: number | undefined;
    productLineUrlName: string;
    productTypeName: string | undefined;
    productUrlName: string;
    productTypeId: number;
    rarityName: string;
    sealed: boolean;
    conditionId: number;
    marketPrice: number | undefined;
    customAttributes: CustomAttributes;
    lowestPriceWithShipping: number | undefined;
    productName: string;
    setId: number;
    setCode: string;
    lowestShipping: string;
    productId: number;
    artist: string | undefined;
    imageCount: number | undefined;
    printing: string;
    medianPrice: number | undefined;
    condition: string;
    score: number;
    setName: string;
    skuId: number;
    sellers: number | undefined;
    foilOnly: boolean | undefined;
    setUrlName: string;
    totalListings: number;
    productLineId: number;
    productStatusId: number;
    productLineName: string;
    maxFulfillableQuantity: number | undefined;
    normalOnly: boolean | undefined;
    listings: Listing[];
    lowestPrice: number | undefined;
}

/** The sort name and order. */
export class SortField implements ISortField {
    field!: string;
    order!: SortFieldOrder;

    constructor(data?: ISortField) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            this.order = _data["order"];
        }
    }

    static fromJS(data: any): SortField {
        data = typeof data === 'object' ? data : {};
        let result = new SortField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["order"] = this.order;
        return data;
    }
}

/** The sort name and order. */
export interface ISortField {
    field: string;
    order: SortFieldOrder;
}

export class UserProfile implements IUserProfile {
    productLineAffinity!: string | undefined;
    priceAffinity!: number | undefined;

    constructor(data?: IUserProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineAffinity = _data["productLineAffinity"];
            this.priceAffinity = _data["priceAffinity"];
        }
    }

    static fromJS(data: any): UserProfile {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productLineAffinity"] = this.productLineAffinity;
        data["priceAffinity"] = this.priceAffinity;
        return data;
    }
}

export interface IUserProfile {
    productLineAffinity: string | undefined;
    priceAffinity: number | undefined;
}

/** The context describing additional information important to the search */
export class V1Context implements IV1Context {
    /** The provided product line is used to filter the search and apply default aggregations */
    productLineName!: string;
    /** Currently stubbed. The country code to filter listings by and use shipping for */
    shippingCountry!: string;
    userProfile!: UserProfile;

    constructor(data?: IV1Context) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.userProfile = new UserProfile();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineName = _data["productLineName"];
            this.shippingCountry = _data["shippingCountry"];
            this.userProfile = _data["userProfile"] ? UserProfile.fromJS(_data["userProfile"]) : new UserProfile();
        }
    }

    static fromJS(data: any): V1Context {
        data = typeof data === 'object' ? data : {};
        let result = new V1Context();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productLineName"] = this.productLineName;
        data["shippingCountry"] = this.shippingCountry;
        data["userProfile"] = this.userProfile ? this.userProfile.toJSON() : <any>undefined;
        return data;
    }
}

/** The context describing additional information important to the search */
export interface IV1Context {
    /** The provided product line is used to filter the search and apply default aggregations */
    productLineName: string;
    /** Currently stubbed. The country code to filter listings by and use shipping for */
    shippingCountry: string;
    userProfile: UserProfile;
}

export class V1ProductSearch implements IV1ProductSearch {
    /** Adds selective aggregations when calculating aggregation stats. */
    selectiveAggregations!: boolean;
    q!: string;
    /** The query that was conducted */
    explain!: boolean;
    /** The search algorithm to be used. */
    algorithm!: string;
    sessionId!: string;
    filters!: Filters;
    settings!: Settings;
    /** The number of items to return */
    size!: number;
    /** The starting page */
    from!: number;
    context!: V1Context;
    /** Will combine the default aggregations based on a filitered product line (if provided) with the requested aggregations. */
    useDefaultAggregations!: boolean;
    sort!: any;
    /** The fields to return counts for. */
    aggregations!: string[];
    returnCustomAttributes!: boolean;

    constructor(data?: IV1ProductSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.filters = new Filters();
            this.settings = new Settings();
            this.context = new V1Context();
            this.aggregations = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.selectiveAggregations = _data["selectiveAggregations"];
            this.q = _data["q"];
            this.explain = _data["explain"];
            this.algorithm = _data["algorithm"];
            this.sessionId = _data["sessionId"];
            this.filters = _data["filters"] ? Filters.fromJS(_data["filters"]) : new Filters();
            this.settings = _data["settings"] ? Settings.fromJS(_data["settings"]) : new Settings();
            this.size = _data["size"];
            this.from = _data["from"];
            this.context = _data["context"] ? V1Context.fromJS(_data["context"]) : new V1Context();
            this.useDefaultAggregations = _data["useDefaultAggregations"];
            this.sort = _data["sort"];
            if (Array.isArray(_data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of _data["aggregations"])
                    this.aggregations!.push(item);
            }
            this.returnCustomAttributes = _data["returnCustomAttributes"];
        }
    }

    static fromJS(data: any): V1ProductSearch {
        data = typeof data === 'object' ? data : {};
        let result = new V1ProductSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["selectiveAggregations"] = this.selectiveAggregations;
        data["q"] = this.q;
        data["explain"] = this.explain;
        data["algorithm"] = this.algorithm;
        data["sessionId"] = this.sessionId;
        data["filters"] = this.filters ? this.filters.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["size"] = this.size;
        data["from"] = this.from;
        data["context"] = this.context ? this.context.toJSON() : <any>undefined;
        data["useDefaultAggregations"] = this.useDefaultAggregations;
        data["sort"] = this.sort;
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item);
        }
        data["returnCustomAttributes"] = this.returnCustomAttributes;
        return data;
    }
}

export interface IV1ProductSearch {
    /** Adds selective aggregations when calculating aggregation stats. */
    selectiveAggregations: boolean;
    q: string;
    /** The query that was conducted */
    explain: boolean;
    /** The search algorithm to be used. */
    algorithm: string;
    sessionId: string;
    filters: Filters;
    settings: Settings;
    /** The number of items to return */
    size: number;
    /** The starting page */
    from: number;
    context: V1Context;
    /** Will combine the default aggregations based on a filitered product line (if provided) with the requested aggregations. */
    useDefaultAggregations: boolean;
    sort: any;
    /** The fields to return counts for. */
    aggregations: string[];
    returnCustomAttributes: boolean;
}

export class V1SearchProduct implements IV1SearchProduct {
    customListings!: number;
    shippingCategoryId!: number | undefined;
    duplicate!: boolean;
    productLineUrlName!: string;
    productTypeName!: string | undefined;
    productUrlName!: string;
    productTypeId!: number;
    rarityName!: string;
    sealed!: boolean;
    marketPrice!: number | undefined;
    customAttributes!: CustomAttributes;
    lowestPriceWithShipping!: number | undefined;
    productName!: string;
    setId!: number;
    setCode!: string;
    productId!: number;
    artist!: string | undefined;
    imageCount!: number | undefined;
    medianPrice!: number | undefined;
    score!: number;
    setName!: string;
    sellers!: number | undefined;
    foilOnly!: boolean | undefined;
    setUrlName!: string;
    sellerListable!: boolean;
    productLineId!: number;
    productStatusId!: number;
    productLineName!: string;
    maxFulfillableQuantity!: number | undefined;
    normalOnly!: boolean | undefined;
    listings!: number;
    lowestPrice!: number | undefined;

    constructor(data?: IV1SearchProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.customAttributes = new CustomAttributes();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customListings = _data["customListings"];
            this.shippingCategoryId = _data["shippingCategoryId"];
            this.duplicate = _data["duplicate"];
            this.productLineUrlName = _data["productLineUrlName"];
            this.productTypeName = _data["productTypeName"];
            this.productUrlName = _data["productUrlName"];
            this.productTypeId = _data["productTypeId"];
            this.rarityName = _data["rarityName"];
            this.sealed = _data["sealed"];
            this.marketPrice = _data["marketPrice"];
            this.customAttributes = _data["customAttributes"] ? CustomAttributes.fromJS(_data["customAttributes"]) : new CustomAttributes();
            this.lowestPriceWithShipping = _data["lowestPriceWithShipping"];
            this.productName = _data["productName"];
            this.setId = _data["setId"];
            this.setCode = _data["setCode"];
            this.productId = _data["productId"];
            this.artist = _data["artist"];
            this.imageCount = _data["imageCount"];
            this.medianPrice = _data["medianPrice"];
            this.score = _data["score"];
            this.setName = _data["setName"];
            this.sellers = _data["sellers"];
            this.foilOnly = _data["foilOnly"];
            this.setUrlName = _data["setUrlName"];
            this.sellerListable = _data["sellerListable"];
            this.productLineId = _data["productLineId"];
            this.productStatusId = _data["productStatusId"];
            this.productLineName = _data["productLineName"];
            this.maxFulfillableQuantity = _data["maxFulfillableQuantity"];
            this.normalOnly = _data["normalOnly"];
            this.listings = _data["listings"];
            this.lowestPrice = _data["lowestPrice"];
        }
    }

    static fromJS(data: any): V1SearchProduct {
        data = typeof data === 'object' ? data : {};
        let result = new V1SearchProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customListings"] = this.customListings;
        data["shippingCategoryId"] = this.shippingCategoryId;
        data["duplicate"] = this.duplicate;
        data["productLineUrlName"] = this.productLineUrlName;
        data["productTypeName"] = this.productTypeName;
        data["productUrlName"] = this.productUrlName;
        data["productTypeId"] = this.productTypeId;
        data["rarityName"] = this.rarityName;
        data["sealed"] = this.sealed;
        data["marketPrice"] = this.marketPrice;
        data["customAttributes"] = this.customAttributes ? this.customAttributes.toJSON() : <any>undefined;
        data["lowestPriceWithShipping"] = this.lowestPriceWithShipping;
        data["productName"] = this.productName;
        data["setId"] = this.setId;
        data["setCode"] = this.setCode;
        data["productId"] = this.productId;
        data["artist"] = this.artist;
        data["imageCount"] = this.imageCount;
        data["medianPrice"] = this.medianPrice;
        data["score"] = this.score;
        data["setName"] = this.setName;
        data["sellers"] = this.sellers;
        data["foilOnly"] = this.foilOnly;
        data["setUrlName"] = this.setUrlName;
        data["sellerListable"] = this.sellerListable;
        data["productLineId"] = this.productLineId;
        data["productStatusId"] = this.productStatusId;
        data["productLineName"] = this.productLineName;
        data["maxFulfillableQuantity"] = this.maxFulfillableQuantity;
        data["normalOnly"] = this.normalOnly;
        data["listings"] = this.listings;
        data["lowestPrice"] = this.lowestPrice;
        return data;
    }
}

export interface IV1SearchProduct {
    customListings: number;
    shippingCategoryId: number | undefined;
    duplicate: boolean;
    productLineUrlName: string;
    productTypeName: string | undefined;
    productUrlName: string;
    productTypeId: number;
    rarityName: string;
    sealed: boolean;
    marketPrice: number | undefined;
    customAttributes: CustomAttributes;
    lowestPriceWithShipping: number | undefined;
    productName: string;
    setId: number;
    setCode: string;
    productId: number;
    artist: string | undefined;
    imageCount: number | undefined;
    medianPrice: number | undefined;
    score: number;
    setName: string;
    sellers: number | undefined;
    foilOnly: boolean | undefined;
    setUrlName: string;
    sellerListable: boolean;
    productLineId: number;
    productStatusId: number;
    productLineName: string;
    maxFulfillableQuantity: number | undefined;
    normalOnly: boolean | undefined;
    listings: number;
    lowestPrice: number | undefined;
}

export class V1SearchResponse implements IV1SearchResponse {
    explanation!: any;
    algorithm!: string;
    searchType!: string;
    didYouMean!: DidYouMean | undefined;
    totalResults!: number;
    error!: any;
    resultId!: string;
    aggregations!: Aggregations;
    results!: V1SearchProduct[];

    constructor(data?: IV1SearchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.aggregations = new Aggregations();
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.explanation = _data["explanation"];
            this.algorithm = _data["algorithm"];
            this.searchType = _data["searchType"];
            this.didYouMean = _data["didYouMean"] ? DidYouMean.fromJS(_data["didYouMean"]) : <any>undefined;
            this.totalResults = _data["totalResults"];
            this.error = _data["error"];
            this.resultId = _data["resultId"];
            this.aggregations = _data["aggregations"] ? Aggregations.fromJS(_data["aggregations"]) : new Aggregations();
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(V1SearchProduct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): V1SearchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new V1SearchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["explanation"] = this.explanation;
        data["algorithm"] = this.algorithm;
        data["searchType"] = this.searchType;
        data["didYouMean"] = this.didYouMean ? this.didYouMean.toJSON() : <any>undefined;
        data["totalResults"] = this.totalResults;
        data["error"] = this.error;
        data["resultId"] = this.resultId;
        data["aggregations"] = this.aggregations ? this.aggregations.toJSON() : <any>undefined;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IV1SearchResponse {
    explanation: any;
    algorithm: string;
    searchType: string;
    didYouMean: DidYouMean | undefined;
    totalResults: number;
    error: any;
    resultId: string;
    aggregations: Aggregations;
    results: V1SearchProduct[];
}

/** The context describing additional information important to the search */
export class V2Context implements IV2Context {
    productLineName!: string;
    shippingCountry!: string;
    userProfile!: UserProfile;
    skuOnHold!: SkuOnHold;
    cart!: Cart;

    constructor(data?: IV2Context) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.userProfile = new UserProfile();
            this.skuOnHold = new SkuOnHold();
            this.cart = new Cart();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineName = _data["productLineName"];
            this.shippingCountry = _data["shippingCountry"];
            this.userProfile = _data["userProfile"] ? UserProfile.fromJS(_data["userProfile"]) : new UserProfile();
            this.skuOnHold = _data["skuOnHold"] ? SkuOnHold.fromJS(_data["skuOnHold"]) : new SkuOnHold();
            this.cart = _data["cart"] ? Cart.fromJS(_data["cart"]) : new Cart();
        }
    }

    static fromJS(data: any): V2Context {
        data = typeof data === 'object' ? data : {};
        let result = new V2Context();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productLineName"] = this.productLineName;
        data["shippingCountry"] = this.shippingCountry;
        data["userProfile"] = this.userProfile ? this.userProfile.toJSON() : <any>undefined;
        data["skuOnHold"] = this.skuOnHold ? this.skuOnHold.toJSON() : <any>undefined;
        data["cart"] = this.cart ? this.cart.toJSON() : <any>undefined;
        return data;
    }
}

/** The context describing additional information important to the search */
export interface IV2Context {
    productLineName: string;
    shippingCountry: string;
    userProfile: UserProfile;
    skuOnHold: SkuOnHold;
    cart: Cart;
}

/** The search parameters for the listing fields. */
export class V2ListingSearch implements IV2ListingSearch {
    sort!: any;
    filters!: Filters;
    mustHaveListings!: boolean;
    includePresale!: boolean;

    constructor(data?: IV2ListingSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.filters = new Filters();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sort = _data["sort"];
            this.filters = _data["filters"] ? Filters.fromJS(_data["filters"]) : new Filters();
            this.mustHaveListings = _data["mustHaveListings"];
            this.includePresale = _data["includePresale"];
        }
    }

    static fromJS(data: any): V2ListingSearch {
        data = typeof data === 'object' ? data : {};
        let result = new V2ListingSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sort"] = this.sort;
        data["filters"] = this.filters ? this.filters.toJSON() : <any>undefined;
        data["mustHaveListings"] = this.mustHaveListings;
        data["includePresale"] = this.includePresale;
        return data;
    }
}

/** The search parameters for the listing fields. */
export interface IV2ListingSearch {
    sort: any;
    filters: Filters;
    mustHaveListings: boolean;
    includePresale: boolean;
}

export class V2ProductSearch implements IV2ProductSearch {
    /** Adds selective aggregations when calculating aggregation stats. */
    selectiveAggregations!: boolean;
    q!: string;
    /** The query that was conducted */
    explain!: boolean;
    /** The search algorithm to be used. */
    algorithm!: string;
    sessionId!: string;
    filters!: Filters;
    settings!: Settings;
    /** The number of items to return */
    size!: number;
    searchListingsAlways!: boolean;
    /** The starting page */
    from!: number;
    context!: V2Context;
    /** Will combine the default aggregations based on a filitered product line (if provided) with the requested aggregations. */
    useDefaultAggregations!: boolean;
    listingSearch!: V2ListingSearch;
    sort!: any;
    /** The fields to return counts for. */
    aggregations!: string[];
    returnCustomAttributes!: boolean;

    constructor(data?: IV2ProductSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.filters = new Filters();
            this.settings = new Settings();
            this.context = new V2Context();
            this.listingSearch = new V2ListingSearch();
            this.aggregations = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.selectiveAggregations = _data["selectiveAggregations"];
            this.q = _data["q"];
            this.explain = _data["explain"];
            this.algorithm = _data["algorithm"];
            this.sessionId = _data["sessionId"];
            this.filters = _data["filters"] ? Filters.fromJS(_data["filters"]) : new Filters();
            this.settings = _data["settings"] ? Settings.fromJS(_data["settings"]) : new Settings();
            this.size = _data["size"];
            this.searchListingsAlways = _data["searchListingsAlways"];
            this.from = _data["from"];
            this.context = _data["context"] ? V2Context.fromJS(_data["context"]) : new V2Context();
            this.useDefaultAggregations = _data["useDefaultAggregations"];
            this.listingSearch = _data["listingSearch"] ? V2ListingSearch.fromJS(_data["listingSearch"]) : new V2ListingSearch();
            this.sort = _data["sort"];
            if (Array.isArray(_data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of _data["aggregations"])
                    this.aggregations!.push(item);
            }
            this.returnCustomAttributes = _data["returnCustomAttributes"];
        }
    }

    static fromJS(data: any): V2ProductSearch {
        data = typeof data === 'object' ? data : {};
        let result = new V2ProductSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["selectiveAggregations"] = this.selectiveAggregations;
        data["q"] = this.q;
        data["explain"] = this.explain;
        data["algorithm"] = this.algorithm;
        data["sessionId"] = this.sessionId;
        data["filters"] = this.filters ? this.filters.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["size"] = this.size;
        data["searchListingsAlways"] = this.searchListingsAlways;
        data["from"] = this.from;
        data["context"] = this.context ? this.context.toJSON() : <any>undefined;
        data["useDefaultAggregations"] = this.useDefaultAggregations;
        data["listingSearch"] = this.listingSearch ? this.listingSearch.toJSON() : <any>undefined;
        data["sort"] = this.sort;
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item);
        }
        data["returnCustomAttributes"] = this.returnCustomAttributes;
        return data;
    }
}

export interface IV2ProductSearch {
    /** Adds selective aggregations when calculating aggregation stats. */
    selectiveAggregations: boolean;
    q: string;
    /** The query that was conducted */
    explain: boolean;
    /** The search algorithm to be used. */
    algorithm: string;
    sessionId: string;
    filters: Filters;
    settings: Settings;
    /** The number of items to return */
    size: number;
    searchListingsAlways: boolean;
    /** The starting page */
    from: number;
    context: V2Context;
    /** Will combine the default aggregations based on a filitered product line (if provided) with the requested aggregations. */
    useDefaultAggregations: boolean;
    listingSearch: V2ListingSearch;
    sort: any;
    /** The fields to return counts for. */
    aggregations: string[];
    returnCustomAttributes: boolean;
}

export class V2SearchProduct implements IV2SearchProduct {
    shippingCategoryId!: number | undefined;
    duplicate!: boolean;
    productLineUrlName!: string;
    productTypeName!: string | undefined;
    productUrlName!: string;
    productTypeId!: number;
    rarityName!: string;
    sealed!: boolean;
    marketPrice!: number | undefined;
    customAttributes!: CustomAttributes;
    lowestPriceWithShipping!: number | undefined;
    productName!: string;
    setId!: number;
    setCode!: string;
    productId!: number;
    artist!: string | undefined;
    imageCount!: number | undefined;
    medianPrice!: number | undefined;
    score!: number;
    setName!: string;
    sellers!: number | undefined;
    foilOnly!: boolean | undefined;
    setUrlName!: string;
    sellerListable!: boolean;
    totalListings!: number | undefined;
    productLineId!: number;
    productStatusId!: number;
    productLineName!: string;
    maxFulfillableQuantity!: number | undefined;
    normalOnly!: boolean | undefined;
    listings!: Listing[];
    lowestPrice!: number | undefined;

    constructor(data?: IV2SearchProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.customAttributes = new CustomAttributes();
            this.listings = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shippingCategoryId = _data["shippingCategoryId"];
            this.duplicate = _data["duplicate"];
            this.productLineUrlName = _data["productLineUrlName"];
            this.productTypeName = _data["productTypeName"];
            this.productUrlName = _data["productUrlName"];
            this.productTypeId = _data["productTypeId"];
            this.rarityName = _data["rarityName"];
            this.sealed = _data["sealed"];
            this.marketPrice = _data["marketPrice"];
            this.customAttributes = _data["customAttributes"] ? CustomAttributes.fromJS(_data["customAttributes"]) : new CustomAttributes();
            this.lowestPriceWithShipping = _data["lowestPriceWithShipping"];
            this.productName = _data["productName"];
            this.setId = _data["setId"];
            this.setCode = _data["setCode"];
            this.productId = _data["productId"];
            this.artist = _data["artist"];
            this.imageCount = _data["imageCount"];
            this.medianPrice = _data["medianPrice"];
            this.score = _data["score"];
            this.setName = _data["setName"];
            this.sellers = _data["sellers"];
            this.foilOnly = _data["foilOnly"];
            this.setUrlName = _data["setUrlName"];
            this.sellerListable = _data["sellerListable"];
            this.totalListings = _data["totalListings"];
            this.productLineId = _data["productLineId"];
            this.productStatusId = _data["productStatusId"];
            this.productLineName = _data["productLineName"];
            this.maxFulfillableQuantity = _data["maxFulfillableQuantity"];
            this.normalOnly = _data["normalOnly"];
            if (Array.isArray(_data["listings"])) {
                this.listings = [] as any;
                for (let item of _data["listings"])
                    this.listings!.push(Listing.fromJS(item));
            }
            this.lowestPrice = _data["lowestPrice"];
        }
    }

    static fromJS(data: any): V2SearchProduct {
        data = typeof data === 'object' ? data : {};
        let result = new V2SearchProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shippingCategoryId"] = this.shippingCategoryId;
        data["duplicate"] = this.duplicate;
        data["productLineUrlName"] = this.productLineUrlName;
        data["productTypeName"] = this.productTypeName;
        data["productUrlName"] = this.productUrlName;
        data["productTypeId"] = this.productTypeId;
        data["rarityName"] = this.rarityName;
        data["sealed"] = this.sealed;
        data["marketPrice"] = this.marketPrice;
        data["customAttributes"] = this.customAttributes ? this.customAttributes.toJSON() : <any>undefined;
        data["lowestPriceWithShipping"] = this.lowestPriceWithShipping;
        data["productName"] = this.productName;
        data["setId"] = this.setId;
        data["setCode"] = this.setCode;
        data["productId"] = this.productId;
        data["artist"] = this.artist;
        data["imageCount"] = this.imageCount;
        data["medianPrice"] = this.medianPrice;
        data["score"] = this.score;
        data["setName"] = this.setName;
        data["sellers"] = this.sellers;
        data["foilOnly"] = this.foilOnly;
        data["setUrlName"] = this.setUrlName;
        data["sellerListable"] = this.sellerListable;
        data["totalListings"] = this.totalListings;
        data["productLineId"] = this.productLineId;
        data["productStatusId"] = this.productStatusId;
        data["productLineName"] = this.productLineName;
        data["maxFulfillableQuantity"] = this.maxFulfillableQuantity;
        data["normalOnly"] = this.normalOnly;
        if (Array.isArray(this.listings)) {
            data["listings"] = [];
            for (let item of this.listings)
                data["listings"].push(item.toJSON());
        }
        data["lowestPrice"] = this.lowestPrice;
        return data;
    }
}

export interface IV2SearchProduct {
    shippingCategoryId: number | undefined;
    duplicate: boolean;
    productLineUrlName: string;
    productTypeName: string | undefined;
    productUrlName: string;
    productTypeId: number;
    rarityName: string;
    sealed: boolean;
    marketPrice: number | undefined;
    customAttributes: CustomAttributes;
    lowestPriceWithShipping: number | undefined;
    productName: string;
    setId: number;
    setCode: string;
    productId: number;
    artist: string | undefined;
    imageCount: number | undefined;
    medianPrice: number | undefined;
    score: number;
    setName: string;
    sellers: number | undefined;
    foilOnly: boolean | undefined;
    setUrlName: string;
    sellerListable: boolean;
    totalListings: number | undefined;
    productLineId: number;
    productStatusId: number;
    productLineName: string;
    maxFulfillableQuantity: number | undefined;
    normalOnly: boolean | undefined;
    listings: Listing[];
    lowestPrice: number | undefined;
}

export class V2SearchResponse implements IV2SearchResponse {
    explanation!: any;
    algorithm!: string;
    searchType!: string;
    didYouMean!: DidYouMean | undefined;
    totalResults!: number;
    error!: any;
    resultId!: string;
    aggregations!: Aggregations;
    results!: V2SearchProduct[];

    constructor(data?: IV2SearchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.aggregations = new Aggregations();
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.explanation = _data["explanation"];
            this.algorithm = _data["algorithm"];
            this.searchType = _data["searchType"];
            this.didYouMean = _data["didYouMean"] ? DidYouMean.fromJS(_data["didYouMean"]) : <any>undefined;
            this.totalResults = _data["totalResults"];
            this.error = _data["error"];
            this.resultId = _data["resultId"];
            this.aggregations = _data["aggregations"] ? Aggregations.fromJS(_data["aggregations"]) : new Aggregations();
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(V2SearchProduct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): V2SearchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new V2SearchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["explanation"] = this.explanation;
        data["algorithm"] = this.algorithm;
        data["searchType"] = this.searchType;
        data["didYouMean"] = this.didYouMean ? this.didYouMean.toJSON() : <any>undefined;
        data["totalResults"] = this.totalResults;
        data["error"] = this.error;
        data["resultId"] = this.resultId;
        data["aggregations"] = this.aggregations ? this.aggregations.toJSON() : <any>undefined;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IV2SearchResponse {
    explanation: any;
    algorithm: string;
    searchType: string;
    didYouMean: DidYouMean | undefined;
    totalResults: number;
    error: any;
    resultId: string;
    aggregations: Aggregations;
    results: V2SearchProduct[];
}

export class aggregation implements Iaggregation {
    value!: any;
    count!: number;

    constructor(data?: Iaggregation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): aggregation {
        data = typeof data === 'object' ? data : {};
        let result = new aggregation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["count"] = this.count;
        return data;
    }
}

export interface Iaggregation {
    value: any;
    count: number;
}

export class aggregations implements Iaggregations {

    [key: string]: aggregation[] | any;

    constructor(data?: Iaggregations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): aggregations {
        data = typeof data === 'object' ? data : {};
        let result = new aggregations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Iaggregations {

    [key: string]: aggregation[] | any;
}

export class AutocompleteProduct implements IAutocompleteProduct {
    duplicate!: boolean;
    setUrlName!: string;
    highlight!: string;
    productName!: string;
    productUrlName!: string;
    productLineUrlName!: string;
    score!: number;
    productLineName!: string;
    productId!: number | undefined;
    setName!: string;

    constructor(data?: IAutocompleteProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.duplicate = _data["duplicate"];
            this.setUrlName = _data["set-url-name"];
            this.highlight = _data["highlight"];
            this.productName = _data["product-name"];
            this.productUrlName = _data["product-url-name"];
            this.productLineUrlName = _data["product-line-url-name"];
            this.score = _data["score"];
            this.productLineName = _data["product-line-name"];
            this.productId = _data["product-id"];
            this.setName = _data["set-name"];
        }
    }

    static fromJS(data: any): AutocompleteProduct {
        data = typeof data === 'object' ? data : {};
        let result = new AutocompleteProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["duplicate"] = this.duplicate;
        data["set-url-name"] = this.setUrlName;
        data["highlight"] = this.highlight;
        data["product-name"] = this.productName;
        data["product-url-name"] = this.productUrlName;
        data["product-line-url-name"] = this.productLineUrlName;
        data["score"] = this.score;
        data["product-line-name"] = this.productLineName;
        data["product-id"] = this.productId;
        data["set-name"] = this.setName;
        return data;
    }
}

export interface IAutocompleteProduct {
    duplicate: boolean;
    setUrlName: string;
    highlight: string;
    productName: string;
    productUrlName: string;
    productLineUrlName: string;
    score: number;
    productLineName: string;
    productId: number | undefined;
    setName: string;
}

export class AutocompleteProductLine implements IAutocompleteProductLine {
    productLineName!: string;
    productLineUrlName!: string;
    count!: number;

    constructor(data?: IAutocompleteProductLine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineName = _data["product-line-name"];
            this.productLineUrlName = _data["product-line-url-name"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): AutocompleteProductLine {
        data = typeof data === 'object' ? data : {};
        let result = new AutocompleteProductLine();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product-line-name"] = this.productLineName;
        data["product-line-url-name"] = this.productLineUrlName;
        data["count"] = this.count;
        return data;
    }
}

export interface IAutocompleteProductLine {
    productLineName: string;
    productLineUrlName: string;
    count: number;
}

export class AutocompleteResponse implements IAutocompleteResponse {
    products!: AutocompleteProduct[];
    sets!: AutocompleteSet[];
    productLines!: AutocompleteProductLine[];
    resultId!: string;
    algorithm!: string;

    constructor(data?: IAutocompleteResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.products = [];
            this.sets = [];
            this.productLines = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(AutocompleteProduct.fromJS(item));
            }
            if (Array.isArray(_data["sets"])) {
                this.sets = [] as any;
                for (let item of _data["sets"])
                    this.sets!.push(AutocompleteSet.fromJS(item));
            }
            if (Array.isArray(_data["product-lines"])) {
                this.productLines = [] as any;
                for (let item of _data["product-lines"])
                    this.productLines!.push(AutocompleteProductLine.fromJS(item));
            }
            this.resultId = _data["result-id"];
            this.algorithm = _data["algorithm"];
        }
    }

    static fromJS(data: any): AutocompleteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AutocompleteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        if (Array.isArray(this.sets)) {
            data["sets"] = [];
            for (let item of this.sets)
                data["sets"].push(item.toJSON());
        }
        if (Array.isArray(this.productLines)) {
            data["product-lines"] = [];
            for (let item of this.productLines)
                data["product-lines"].push(item.toJSON());
        }
        data["result-id"] = this.resultId;
        data["algorithm"] = this.algorithm;
        return data;
    }
}

export interface IAutocompleteResponse {
    products: AutocompleteProduct[];
    sets: AutocompleteSet[];
    productLines: AutocompleteProductLine[];
    resultId: string;
    algorithm: string;
}

export class AutocompleteSet implements IAutocompleteSet {
    setName!: string;
    setUrlName!: string;
    productLineName!: string;
    productLineUrlName!: string;
    score!: number;
    highlight!: string;

    constructor(data?: IAutocompleteSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.setName = _data["set-name"];
            this.setUrlName = _data["set-url-name"];
            this.productLineName = _data["product-line-name"];
            this.productLineUrlName = _data["product-line-url-name"];
            this.score = _data["score"];
            this.highlight = _data["highlight"];
        }
    }

    static fromJS(data: any): AutocompleteSet {
        data = typeof data === 'object' ? data : {};
        let result = new AutocompleteSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["set-name"] = this.setName;
        data["set-url-name"] = this.setUrlName;
        data["product-line-name"] = this.productLineName;
        data["product-line-url-name"] = this.productLineUrlName;
        data["score"] = this.score;
        data["highlight"] = this.highlight;
        return data;
    }
}

export interface IAutocompleteSet {
    setName: string;
    setUrlName: string;
    productLineName: string;
    productLineUrlName: string;
    score: number;
    highlight: string;
}

export class CatalogAutocompleteResponse implements ICatalogAutocompleteResponse {
    results!: CatalogAutocompleteResult[];
    resultId!: string;
    algorithm!: string;

    constructor(data?: ICatalogAutocompleteResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(CatalogAutocompleteResult.fromJS(item));
            }
            this.resultId = _data["result-id"];
            this.algorithm = _data["algorithm"];
        }
    }

    static fromJS(data: any): CatalogAutocompleteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogAutocompleteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result-id"] = this.resultId;
        data["algorithm"] = this.algorithm;
        return data;
    }
}

export interface ICatalogAutocompleteResponse {
    results: CatalogAutocompleteResult[];
    resultId: string;
    algorithm: string;
}

export class CatalogAutocompleteResult implements ICatalogAutocompleteResult {
    highlight!: string;
    productId!: number;
    productName!: string;
    productLineName!: string;
    score!: number;
    setName!: string;

    constructor(data?: ICatalogAutocompleteResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.highlight = _data["highlight"];
            this.productId = _data["product-id"];
            this.productName = _data["product-name"];
            this.productLineName = _data["product-line-name"];
            this.score = _data["score"];
            this.setName = _data["set-name"];
        }
    }

    static fromJS(data: any): CatalogAutocompleteResult {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogAutocompleteResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["highlight"] = this.highlight;
        data["product-id"] = this.productId;
        data["product-name"] = this.productName;
        data["product-line-name"] = this.productLineName;
        data["score"] = this.score;
        data["set-name"] = this.setName;
        return data;
    }
}

export interface ICatalogAutocompleteResult {
    highlight: string;
    productId: number;
    productName: string;
    productLineName: string;
    score: number;
    setName: string;
}

export class custom_attributes implements Icustom_attributes {

    [key: string]: any;

    constructor(data?: Icustom_attributes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): custom_attributes {
        data = typeof data === 'object' ? data : {};
        let result = new custom_attributes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Icustom_attributes {

    [key: string]: any;
}

export class did_you_mean implements Idid_you_mean {
    original?: string | undefined;
    suggestion?: string | undefined;
    highlighted?: string | undefined;

    constructor(data?: Idid_you_mean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.original = _data["original"];
            this.suggestion = _data["suggestion"];
            this.highlighted = _data["highlighted"];
        }
    }

    static fromJS(data: any): did_you_mean {
        data = typeof data === 'object' ? data : {};
        let result = new did_you_mean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["original"] = this.original;
        data["suggestion"] = this.suggestion;
        data["highlighted"] = this.highlighted;
        return data;
    }
}

export interface Idid_you_mean {
    original?: string | undefined;
    suggestion?: string | undefined;
    highlighted?: string | undefined;
}

export class did_you_mean_highlight implements Idid_you_mean_highlight {
    preTag!: string;
    postTag!: string;

    constructor(data?: Idid_you_mean_highlight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.preTag = _data["pre-tag"];
            this.postTag = _data["post-tag"];
        }
    }

    static fromJS(data: any): did_you_mean_highlight {
        data = typeof data === 'object' ? data : {};
        let result = new did_you_mean_highlight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pre-tag"] = this.preTag;
        data["post-tag"] = this.postTag;
        return data;
    }
}

export interface Idid_you_mean_highlight {
    preTag: string;
    postTag: string;
}

export class did_you_mean_settings implements Idid_you_mean_settings {
    highlight?: did_you_mean_highlight | undefined;

    constructor(data?: Idid_you_mean_settings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.highlight = _data["highlight"] ? did_you_mean_highlight.fromJS(_data["highlight"]) : <any>undefined;
        }
    }

    static fromJS(data: any): did_you_mean_settings {
        data = typeof data === 'object' ? data : {};
        let result = new did_you_mean_settings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["highlight"] = this.highlight ? this.highlight.toJSON() : <any>undefined;
        return data;
    }
}

export interface Idid_you_mean_settings {
    highlight?: did_you_mean_highlight | undefined;
}

export class Error implements IError {
    error!: error_type[];

    constructor(data?: IError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.error = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["error"])) {
                this.error = [] as any;
                for (let item of _data["error"])
                    this.error!.push(error_type.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Error {
        data = typeof data === 'object' ? data : {};
        let result = new Error();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.error)) {
            data["error"] = [];
            for (let item of this.error)
                data["error"].push(item.toJSON());
        }
        return data;
    }
}

export interface IError {
    error: error_type[];
}

export class error_type implements Ierror_type {

    [key: string]: string | any;

    constructor(data?: Ierror_type) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): error_type {
        data = typeof data === 'object' ? data : {};
        let result = new error_type();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Ierror_type {

    [key: string]: string | any;
}

/** The filters to narrow down results */
export class filters implements Ifilters {
    term?: search_filter | undefined;
    range?: range_filter | undefined;
    exclude?: search_filter | undefined;
    match?: search_filter | undefined;

    constructor(data?: Ifilters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.term = _data["term"] ? search_filter.fromJS(_data["term"]) : <any>undefined;
            this.range = _data["range"] ? range_filter.fromJS(_data["range"]) : <any>undefined;
            this.exclude = _data["exclude"] ? search_filter.fromJS(_data["exclude"]) : <any>undefined;
            this.match = _data["match"] ? search_filter.fromJS(_data["match"]) : <any>undefined;
        }
    }

    static fromJS(data: any): filters {
        data = typeof data === 'object' ? data : {};
        let result = new filters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["term"] = this.term ? this.term.toJSON() : <any>undefined;
        data["range"] = this.range ? this.range.toJSON() : <any>undefined;
        data["exclude"] = this.exclude ? this.exclude.toJSON() : <any>undefined;
        data["match"] = this.match ? this.match.toJSON() : <any>undefined;
        return data;
    }
}

/** The filters to narrow down results */
export interface Ifilters {
    term?: search_filter | undefined;
    range?: range_filter | undefined;
    exclude?: search_filter | undefined;
    match?: search_filter | undefined;
}

export class ProductTagsRequestBody implements IProductTagsRequestBody {
    productLineId!: number;
    tags!: string[];

    constructor(data?: IProductTagsRequestBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.tags = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineId = _data["product-line-id"];
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(item);
            }
        }
    }

    static fromJS(data: any): ProductTagsRequestBody {
        data = typeof data === 'object' ? data : {};
        let result = new ProductTagsRequestBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product-line-id"] = this.productLineId;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        return data;
    }
}

export interface IProductTagsRequestBody {
    productLineId: number;
    tags: string[];
}

export class range_filter implements Irange_filter {

    [key: string]: range_value | any;

    constructor(data?: Irange_filter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): range_filter {
        data = typeof data === 'object' ? data : {};
        let result = new range_filter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Irange_filter {

    [key: string]: range_value | any;
}

export class range_value implements Irange_value {
    gte?: any | undefined;
    lte?: any | undefined;

    constructor(data?: Irange_value) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gte = _data["gte"];
            this.lte = _data["lte"];
        }
    }

    static fromJS(data: any): range_value {
        data = typeof data === 'object' ? data : {};
        let result = new range_value();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gte"] = this.gte;
        data["lte"] = this.lte;
        return data;
    }
}

export interface Irange_value {
    gte?: any | undefined;
    lte?: any | undefined;
}

export class SearchFieldsResponse implements ISearchFieldsResponse {
    fields!: any;

    constructor(data?: ISearchFieldsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fields = _data["fields"];
        }
    }

    static fromJS(data: any): SearchFieldsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SearchFieldsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fields"] = this.fields;
        return data;
    }
}

export interface ISearchFieldsResponse {
    fields: any;
}

export class search_filter implements Isearch_filter {

    [key: string]: any;

    constructor(data?: Isearch_filter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
        }
    }

    static fromJS(data: any): search_filter {
        data = typeof data === 'object' ? data : {};
        let result = new search_filter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        return data;
    }
}

export interface Isearch_filter {

    [key: string]: any;
}

export class settings implements Isettings {
    useFuzzySearch?: boolean | undefined;
    didYouMean?: did_you_mean_settings | undefined;
    disableSynonyms?: boolean | undefined;

    constructor(data?: Isettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.useFuzzySearch = _data["use-fuzzy-search"];
            this.didYouMean = _data["did-you-mean"] ? did_you_mean_settings.fromJS(_data["did-you-mean"]) : <any>undefined;
            this.disableSynonyms = _data["disable-synonyms"];
        }
    }

    static fromJS(data: any): settings {
        data = typeof data === 'object' ? data : {};
        let result = new settings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["use-fuzzy-search"] = this.useFuzzySearch;
        data["did-you-mean"] = this.didYouMean ? this.didYouMean.toJSON() : <any>undefined;
        data["disable-synonyms"] = this.disableSynonyms;
        return data;
    }
}

export interface Isettings {
    useFuzzySearch?: boolean | undefined;
    didYouMean?: did_you_mean_settings | undefined;
    disableSynonyms?: boolean | undefined;
}

export class sort_field implements Isort_field {
    field?: string | undefined;
    order?: Sort_fieldOrder | undefined;

    constructor(data?: Isort_field) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.field = _data["field"];
            this.order = _data["order"];
        }
    }

    static fromJS(data: any): sort_field {
        data = typeof data === 'object' ? data : {};
        let result = new sort_field();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["field"] = this.field;
        data["order"] = this.order;
        return data;
    }
}

export interface Isort_field {
    field?: string | undefined;
    order?: Sort_fieldOrder | undefined;
}

export class TrendingProduct implements ITrendingProduct {
    setCode?: string | undefined;
    normalOnly?: boolean | undefined;
    maxFulfillableQuantity?: number | undefined;
    setUrlName!: string;
    customAttributes?: custom_attributes | undefined;
    customListings?: number | undefined;
    artist?: string | undefined;
    rarityName?: string | undefined;
    productName!: string;
    productUrlName!: string;
    foilOnly?: boolean | undefined;
    imageCount?: number | undefined;
    productLineUrlName!: string;
    productLineId!: number;
    marketPrice!: number | undefined;
    medianPrice?: number | undefined;
    setId!: number;
    shippingCategoryId?: number | undefined;
    productLineName!: string;
    productId!: number;
    setName!: string;

    constructor(data?: ITrendingProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.setCode = _data["set-code"];
            this.normalOnly = _data["normal-only"];
            this.maxFulfillableQuantity = _data["max-fulfillable-quantity"];
            this.setUrlName = _data["set-url-name"];
            this.customAttributes = _data["custom-attributes"] ? custom_attributes.fromJS(_data["custom-attributes"]) : <any>undefined;
            this.customListings = _data["custom-listings"];
            this.artist = _data["artist"];
            this.rarityName = _data["rarity-name"];
            this.productName = _data["product-name"];
            this.productUrlName = _data["product-url-name"];
            this.foilOnly = _data["foil-only"];
            this.imageCount = _data["image-count"];
            this.productLineUrlName = _data["product-line-url-name"];
            this.productLineId = _data["product-line-id"];
            this.marketPrice = _data["market-price"];
            this.medianPrice = _data["median-price"];
            this.setId = _data["set-id"];
            this.shippingCategoryId = _data["shipping-category-id"];
            this.productLineName = _data["product-line-name"];
            this.productId = _data["product-id"];
            this.setName = _data["set-name"];
        }
    }

    static fromJS(data: any): TrendingProduct {
        data = typeof data === 'object' ? data : {};
        let result = new TrendingProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["set-code"] = this.setCode;
        data["normal-only"] = this.normalOnly;
        data["max-fulfillable-quantity"] = this.maxFulfillableQuantity;
        data["set-url-name"] = this.setUrlName;
        data["custom-attributes"] = this.customAttributes ? this.customAttributes.toJSON() : <any>undefined;
        data["custom-listings"] = this.customListings;
        data["artist"] = this.artist;
        data["rarity-name"] = this.rarityName;
        data["product-name"] = this.productName;
        data["product-url-name"] = this.productUrlName;
        data["foil-only"] = this.foilOnly;
        data["image-count"] = this.imageCount;
        data["product-line-url-name"] = this.productLineUrlName;
        data["product-line-id"] = this.productLineId;
        data["market-price"] = this.marketPrice;
        data["median-price"] = this.medianPrice;
        data["set-id"] = this.setId;
        data["shipping-category-id"] = this.shippingCategoryId;
        data["product-line-name"] = this.productLineName;
        data["product-id"] = this.productId;
        data["set-name"] = this.setName;
        return data;
    }
}

export interface ITrendingProduct {
    setCode?: string | undefined;
    normalOnly?: boolean | undefined;
    maxFulfillableQuantity?: number | undefined;
    setUrlName: string;
    customAttributes?: custom_attributes | undefined;
    customListings?: number | undefined;
    artist?: string | undefined;
    rarityName?: string | undefined;
    productName: string;
    productUrlName: string;
    foilOnly?: boolean | undefined;
    imageCount?: number | undefined;
    productLineUrlName: string;
    productLineId: number;
    marketPrice: number | undefined;
    medianPrice?: number | undefined;
    setId: number;
    shippingCategoryId?: number | undefined;
    productLineName: string;
    productId: number;
    setName: string;
}

export class TrendingResponse implements ITrendingResponse {
    results!: TrendingProduct[];
    resultId!: string;
    error?: any | undefined;
    explanation?: any | undefined;
    algorithm!: string;

    constructor(data?: ITrendingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(TrendingProduct.fromJS(item));
            }
            this.resultId = _data["result-id"];
            this.error = _data["error"];
            this.explanation = _data["explanation"];
            this.algorithm = _data["algorithm"];
        }
    }

    static fromJS(data: any): TrendingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TrendingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result-id"] = this.resultId;
        data["error"] = this.error;
        data["explanation"] = this.explanation;
        data["algorithm"] = this.algorithm;
        return data;
    }
}

export interface ITrendingResponse {
    results: TrendingProduct[];
    resultId: string;
    error?: any | undefined;
    explanation?: any | undefined;
    algorithm: string;
}

export class TrendingSearch implements ITrendingSearch {
    /** A string used to filter suggestions to a specific product line. Also known as the url-name, e.g., 'magic', 'pokemon', 'yugioh' */
    productLineUrlName?: string | undefined;
    /** A globally unique identifier that can be used to correlate searches across multiple requests. */
    sessionId!: string;

    constructor(data?: ITrendingSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineUrlName = _data["product-line-url-name"];
            this.sessionId = _data["session-id"];
        }
    }

    static fromJS(data: any): TrendingSearch {
        data = typeof data === 'object' ? data : {};
        let result = new TrendingSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product-line-url-name"] = this.productLineUrlName;
        data["session-id"] = this.sessionId;
        return data;
    }
}

export interface ITrendingSearch {
    /** A string used to filter suggestions to a specific product line. Also known as the url-name, e.g., 'magic', 'pokemon', 'yugioh' */
    productLineUrlName?: string | undefined;
    /** A globally unique identifier that can be used to correlate searches across multiple requests. */
    sessionId: string;
}

export class TrendingTerm implements ITrendingTerm {
    value!: string;
    score!: number;

    constructor(data?: ITrendingTerm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.score = _data["score"];
        }
    }

    static fromJS(data: any): TrendingTerm {
        data = typeof data === 'object' ? data : {};
        let result = new TrendingTerm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["score"] = this.score;
        return data;
    }
}

export interface ITrendingTerm {
    value: string;
    score: number;
}

export class TrendingTermsResponse implements ITrendingTermsResponse {
    resultId!: string;
    results!: TrendingTerm[];

    constructor(data?: ITrendingTermsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.resultId = _data["result-id"];
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(TrendingTerm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TrendingTermsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TrendingTermsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result-id"] = this.resultId;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITrendingTermsResponse {
    resultId: string;
    results: TrendingTerm[];
}

export class user_profile implements Iuser_profile {
    productLineAffinity?: string | undefined;
    priceAffinity?: number | undefined;

    constructor(data?: Iuser_profile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineAffinity = _data["product-line-affinity"];
            this.priceAffinity = _data["price-affinity"];
        }
    }

    static fromJS(data: any): user_profile {
        data = typeof data === 'object' ? data : {};
        let result = new user_profile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product-line-affinity"] = this.productLineAffinity;
        data["price-affinity"] = this.priceAffinity;
        return data;
    }
}

export interface Iuser_profile {
    productLineAffinity?: string | undefined;
    priceAffinity?: number | undefined;
}

/** The context describing additional information important to the search */
export class v1_context implements Iv1_context {
    /** The provided product line is used to filter the search and apply default aggregations */
    productLineName?: string | undefined;
    /** Currently stubbed. The country code to filter listings by and use shipping for */
    shippingCountry?: string | undefined;
    userProfile?: user_profile | undefined;

    constructor(data?: Iv1_context) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineName = _data["product-line-name"];
            this.shippingCountry = _data["shipping-country"];
            this.userProfile = _data["user-profile"] ? user_profile.fromJS(_data["user-profile"]) : <any>undefined;
        }
    }

    static fromJS(data: any): v1_context {
        data = typeof data === 'object' ? data : {};
        let result = new v1_context();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["product-line-name"] = this.productLineName;
        data["shipping-country"] = this.shippingCountry;
        data["user-profile"] = this.userProfile ? this.userProfile.toJSON() : <any>undefined;
        return data;
    }
}

/** The context describing additional information important to the search */
export interface Iv1_context {
    /** The provided product line is used to filter the search and apply default aggregations */
    productLineName?: string | undefined;
    /** Currently stubbed. The country code to filter listings by and use shipping for */
    shippingCountry?: string | undefined;
    userProfile?: user_profile | undefined;
}

export class v1_product_search implements Iv1_product_search {
    q?: string | undefined;
    sessionId?: string | undefined;
    /** The query that was conducted */
    explain?: boolean | undefined;
    /** The search algorithm to be used. */
    algorithm?: string | undefined;
    /** Will combine the default aggregations based on a filitered product line (if provided) with the requested aggregations. */
    useDefaultAggregations?: boolean | undefined;
    filters?: filters | undefined;
    settings?: settings | undefined;
    /** The number of items to return */
    size?: number | undefined;
    /** The starting page */
    from?: number | undefined;
    returnCustomAttributes?: boolean | undefined;
    context?: v1_context | undefined;
    /** Adds selective aggregations when calculating aggregation stats. */
    selectiveAggregations?: boolean | undefined;
    sort?: any | undefined;
    /** The fields to return counts for. */
    aggregations?: string[] | undefined;

    constructor(data?: Iv1_product_search) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.q = _data["q"];
            this.sessionId = _data["session-id"];
            this.explain = _data["explain"];
            this.algorithm = _data["algorithm"];
            this.useDefaultAggregations = _data["use-default-aggregations"];
            this.filters = _data["filters"] ? filters.fromJS(_data["filters"]) : <any>undefined;
            this.settings = _data["settings"] ? settings.fromJS(_data["settings"]) : <any>undefined;
            this.size = _data["size"];
            this.from = _data["from"];
            this.returnCustomAttributes = _data["return-custom-attributes"];
            this.context = _data["context"] ? v1_context.fromJS(_data["context"]) : <any>undefined;
            this.selectiveAggregations = _data["selective-aggregations"];
            this.sort = _data["sort"];
            if (Array.isArray(_data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of _data["aggregations"])
                    this.aggregations!.push(item);
            }
        }
    }

    static fromJS(data: any): v1_product_search {
        data = typeof data === 'object' ? data : {};
        let result = new v1_product_search();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["q"] = this.q;
        data["session-id"] = this.sessionId;
        data["explain"] = this.explain;
        data["algorithm"] = this.algorithm;
        data["use-default-aggregations"] = this.useDefaultAggregations;
        data["filters"] = this.filters ? this.filters.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["size"] = this.size;
        data["from"] = this.from;
        data["return-custom-attributes"] = this.returnCustomAttributes;
        data["context"] = this.context ? this.context.toJSON() : <any>undefined;
        data["selective-aggregations"] = this.selectiveAggregations;
        data["sort"] = this.sort;
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item);
        }
        return data;
    }
}

export interface Iv1_product_search {
    q?: string | undefined;
    sessionId?: string | undefined;
    /** The query that was conducted */
    explain?: boolean | undefined;
    /** The search algorithm to be used. */
    algorithm?: string | undefined;
    /** Will combine the default aggregations based on a filitered product line (if provided) with the requested aggregations. */
    useDefaultAggregations?: boolean | undefined;
    filters?: filters | undefined;
    settings?: settings | undefined;
    /** The number of items to return */
    size?: number | undefined;
    /** The starting page */
    from?: number | undefined;
    returnCustomAttributes?: boolean | undefined;
    context?: v1_context | undefined;
    /** Adds selective aggregations when calculating aggregation stats. */
    selectiveAggregations?: boolean | undefined;
    sort?: any | undefined;
    /** The fields to return counts for. */
    aggregations?: string[] | undefined;
}

export class v1_search_product implements Iv1_search_product {
    duplicate!: boolean;
    setCode?: string | undefined;
    normalOnly?: boolean | undefined;
    maxFulfillableQuantity?: number | undefined;
    setUrlName!: string;
    customAttributes?: custom_attributes | undefined;
    sealed!: boolean;
    customListings?: number | undefined;
    lowestPrice?: number | undefined;
    artist?: string | undefined;
    rarityName?: string | undefined;
    productName!: string;
    lowestPriceWithShipping!: number | undefined;
    productUrlName!: string;
    productTypeId!: number;
    foilOnly?: boolean | undefined;
    productTypeName?: string | undefined;
    imageCount?: number | undefined;
    productLineUrlName!: string;
    score!: number;
    productLineId!: number;
    marketPrice!: number | undefined;
    sellers?: number | undefined;
    medianPrice?: number | undefined;
    setId!: number;
    shippingCategoryId?: number | undefined;
    productLineName!: string;
    productId!: number;
    sellerListable!: boolean;
    setName!: string;
    listings?: number | undefined;
    productStatusId!: number;

    constructor(data?: Iv1_search_product) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.duplicate = _data["duplicate"];
            this.setCode = _data["set-code"];
            this.normalOnly = _data["normal-only"];
            this.maxFulfillableQuantity = _data["max-fulfillable-quantity"];
            this.setUrlName = _data["set-url-name"];
            this.customAttributes = _data["custom-attributes"] ? custom_attributes.fromJS(_data["custom-attributes"]) : <any>undefined;
            this.sealed = _data["sealed"];
            this.customListings = _data["custom-listings"];
            this.lowestPrice = _data["lowest-price"];
            this.artist = _data["artist"];
            this.rarityName = _data["rarity-name"];
            this.productName = _data["product-name"];
            this.lowestPriceWithShipping = _data["lowest-price-with-shipping"];
            this.productUrlName = _data["product-url-name"];
            this.productTypeId = _data["product-type-id"];
            this.foilOnly = _data["foil-only"];
            this.productTypeName = _data["product-type-name"];
            this.imageCount = _data["image-count"];
            this.productLineUrlName = _data["product-line-url-name"];
            this.score = _data["score"];
            this.productLineId = _data["product-line-id"];
            this.marketPrice = _data["market-price"];
            this.sellers = _data["sellers"];
            this.medianPrice = _data["median-price"];
            this.setId = _data["set-id"];
            this.shippingCategoryId = _data["shipping-category-id"];
            this.productLineName = _data["product-line-name"];
            this.productId = _data["product-id"];
            this.sellerListable = _data["seller-listable"];
            this.setName = _data["set-name"];
            this.listings = _data["listings"];
            this.productStatusId = _data["product-status-id"];
        }
    }

    static fromJS(data: any): v1_search_product {
        data = typeof data === 'object' ? data : {};
        let result = new v1_search_product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["duplicate"] = this.duplicate;
        data["set-code"] = this.setCode;
        data["normal-only"] = this.normalOnly;
        data["max-fulfillable-quantity"] = this.maxFulfillableQuantity;
        data["set-url-name"] = this.setUrlName;
        data["custom-attributes"] = this.customAttributes ? this.customAttributes.toJSON() : <any>undefined;
        data["sealed"] = this.sealed;
        data["custom-listings"] = this.customListings;
        data["lowest-price"] = this.lowestPrice;
        data["artist"] = this.artist;
        data["rarity-name"] = this.rarityName;
        data["product-name"] = this.productName;
        data["lowest-price-with-shipping"] = this.lowestPriceWithShipping;
        data["product-url-name"] = this.productUrlName;
        data["product-type-id"] = this.productTypeId;
        data["foil-only"] = this.foilOnly;
        data["product-type-name"] = this.productTypeName;
        data["image-count"] = this.imageCount;
        data["product-line-url-name"] = this.productLineUrlName;
        data["score"] = this.score;
        data["product-line-id"] = this.productLineId;
        data["market-price"] = this.marketPrice;
        data["sellers"] = this.sellers;
        data["median-price"] = this.medianPrice;
        data["set-id"] = this.setId;
        data["shipping-category-id"] = this.shippingCategoryId;
        data["product-line-name"] = this.productLineName;
        data["product-id"] = this.productId;
        data["seller-listable"] = this.sellerListable;
        data["set-name"] = this.setName;
        data["listings"] = this.listings;
        data["product-status-id"] = this.productStatusId;
        return data;
    }
}

export interface Iv1_search_product {
    duplicate: boolean;
    setCode?: string | undefined;
    normalOnly?: boolean | undefined;
    maxFulfillableQuantity?: number | undefined;
    setUrlName: string;
    customAttributes?: custom_attributes | undefined;
    sealed: boolean;
    customListings?: number | undefined;
    lowestPrice?: number | undefined;
    artist?: string | undefined;
    rarityName?: string | undefined;
    productName: string;
    lowestPriceWithShipping: number | undefined;
    productUrlName: string;
    productTypeId: number;
    foilOnly?: boolean | undefined;
    productTypeName?: string | undefined;
    imageCount?: number | undefined;
    productLineUrlName: string;
    score: number;
    productLineId: number;
    marketPrice: number | undefined;
    sellers?: number | undefined;
    medianPrice?: number | undefined;
    setId: number;
    shippingCategoryId?: number | undefined;
    productLineName: string;
    productId: number;
    sellerListable: boolean;
    setName: string;
    listings?: number | undefined;
    productStatusId: number;
}

export class v1_search_response implements Iv1_search_response {
    explanation?: any | undefined;
    algorithm!: string;
    didYouMean?: did_you_mean | undefined;
    resultId!: string;
    searchType!: string;
    totalResults!: number;
    error?: any | undefined;
    aggregations!: aggregations;
    results!: v1_search_product[];

    constructor(data?: Iv1_search_response) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.aggregations = new aggregations();
            this.results = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.explanation = _data["explanation"];
            this.algorithm = _data["algorithm"];
            this.didYouMean = _data["did-you-mean"] ? did_you_mean.fromJS(_data["did-you-mean"]) : <any>undefined;
            this.resultId = _data["result-id"];
            this.searchType = _data["search-type"];
            this.totalResults = _data["total-results"];
            this.error = _data["error"];
            this.aggregations = _data["aggregations"] ? aggregations.fromJS(_data["aggregations"]) : new aggregations();
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(v1_search_product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): v1_search_response {
        data = typeof data === 'object' ? data : {};
        let result = new v1_search_response();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["explanation"] = this.explanation;
        data["algorithm"] = this.algorithm;
        data["did-you-mean"] = this.didYouMean ? this.didYouMean.toJSON() : <any>undefined;
        data["result-id"] = this.resultId;
        data["search-type"] = this.searchType;
        data["total-results"] = this.totalResults;
        data["error"] = this.error;
        data["aggregations"] = this.aggregations ? this.aggregations.toJSON() : <any>undefined;
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface Iv1_search_response {
    explanation?: any | undefined;
    algorithm: string;
    didYouMean?: did_you_mean | undefined;
    resultId: string;
    searchType: string;
    totalResults: number;
    error?: any | undefined;
    aggregations: aggregations;
    results: v1_search_product[];
}

export enum SortFieldOrder {
    Desc = "desc",
    Asc = "asc",
}

export enum Sort_fieldOrder {
    Desc = "desc",
    Asc = "asc",
}