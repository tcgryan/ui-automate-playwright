//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

namespace Marketplace {

export class Aggregation implements IAggregation {
    value?: any | undefined;
    count?: number;

    constructor(data?: IAggregation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): Aggregation {
        data = typeof data === 'object' ? data : {};
        let result = new Aggregation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["count"] = this.count;
        return data;
    }
}

export interface IAggregation {
    value?: any | undefined;
    count?: number;
}

export class Cart implements ICart {
    packages?: { [key: string]: Package; } | undefined;

    constructor(data?: ICart) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["packages"]) {
                this.packages = {} as any;
                for (let key in _data["packages"]) {
                    if (_data["packages"].hasOwnProperty(key))
                        (<any>this.packages)![key] = _data["packages"][key] ? Package.fromJS(_data["packages"][key]) : new Package();
                }
            }
        }
    }

    static fromJS(data: any): Cart {
        data = typeof data === 'object' ? data : {};
        let result = new Cart();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.packages) {
            data["packages"] = {};
            for (let key in this.packages) {
                if (this.packages.hasOwnProperty(key))
                    (<any>data["packages"])[key] = this.packages[key] ? this.packages[key].toJSON() : <any>undefined;
            }
        }
        return data;
    }
}

export interface ICart {
    packages?: { [key: string]: Package; } | undefined;
}

export class CustomData implements ICustomData {
    images?: string[] | undefined;
    title?: string | undefined;
    description?: string | undefined;
    linkId?: string | undefined;

    constructor(data?: ICustomData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
            this.title = _data["title"];
            this.description = _data["description"];
            this.linkId = _data["linkId"];
        }
    }

    static fromJS(data: any): CustomData {
        data = typeof data === 'object' ? data : {};
        let result = new CustomData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        data["title"] = this.title;
        data["description"] = this.description;
        data["linkId"] = this.linkId;
        return data;
    }
}

export interface ICustomData {
    images?: string[] | undefined;
    title?: string | undefined;
    description?: string | undefined;
    linkId?: string | undefined;
}

export class DidYouMean implements IDidYouMean {
    original?: string | undefined;
    suggestion?: string | undefined;
    highlighted?: string | undefined;

    constructor(data?: IDidYouMean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.original = _data["original"];
            this.suggestion = _data["suggestion"];
            this.highlighted = _data["highlighted"];
        }
    }

    static fromJS(data: any): DidYouMean {
        data = typeof data === 'object' ? data : {};
        let result = new DidYouMean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["original"] = this.original;
        data["suggestion"] = this.suggestion;
        data["highlighted"] = this.highlighted;
        return data;
    }
}

export interface IDidYouMean {
    original?: string | undefined;
    suggestion?: string | undefined;
    highlighted?: string | undefined;
}

export class DidYouMeanHighlight implements IDidYouMeanHighlight {
    preTag?: string | undefined;
    postTag?: string | undefined;

    constructor(data?: IDidYouMeanHighlight) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.preTag = _data["preTag"];
            this.postTag = _data["postTag"];
        }
    }

    static fromJS(data: any): DidYouMeanHighlight {
        data = typeof data === 'object' ? data : {};
        let result = new DidYouMeanHighlight();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["preTag"] = this.preTag;
        data["postTag"] = this.postTag;
        return data;
    }
}

export interface IDidYouMeanHighlight {
    preTag?: string | undefined;
    postTag?: string | undefined;
}

export class DidYouMeanSettings implements IDidYouMeanSettings {
    highlight?: DidYouMeanHighlight;

    constructor(data?: IDidYouMeanSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.highlight = _data["highlight"] ? DidYouMeanHighlight.fromJS(_data["highlight"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DidYouMeanSettings {
        data = typeof data === 'object' ? data : {};
        let result = new DidYouMeanSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["highlight"] = this.highlight ? this.highlight.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDidYouMeanSettings {
    highlight?: DidYouMeanHighlight;
}

export class Filters implements IFilters {
    term?: { [key: string]: any; } | undefined;
    range?: { [key: string]: RangeValue; } | undefined;
    exclude?: { [key: string]: any; } | undefined;
    match?: { [key: string]: any; } | undefined;

    constructor(data?: IFilters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["term"]) {
                this.term = {} as any;
                for (let key in _data["term"]) {
                    if (_data["term"].hasOwnProperty(key))
                        (<any>this.term)![key] = _data["term"][key];
                }
            }
            if (_data["range"]) {
                this.range = {} as any;
                for (let key in _data["range"]) {
                    if (_data["range"].hasOwnProperty(key))
                        (<any>this.range)![key] = _data["range"][key] ? RangeValue.fromJS(_data["range"][key]) : new RangeValue();
                }
            }
            if (_data["exclude"]) {
                this.exclude = {} as any;
                for (let key in _data["exclude"]) {
                    if (_data["exclude"].hasOwnProperty(key))
                        (<any>this.exclude)![key] = _data["exclude"][key];
                }
            }
            if (_data["match"]) {
                this.match = {} as any;
                for (let key in _data["match"]) {
                    if (_data["match"].hasOwnProperty(key))
                        (<any>this.match)![key] = _data["match"][key];
                }
            }
        }
    }

    static fromJS(data: any): Filters {
        data = typeof data === 'object' ? data : {};
        let result = new Filters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.term) {
            data["term"] = {};
            for (let key in this.term) {
                if (this.term.hasOwnProperty(key))
                    (<any>data["term"])[key] = (<any>this.term)[key];
            }
        }
        if (this.range) {
            data["range"] = {};
            for (let key in this.range) {
                if (this.range.hasOwnProperty(key))
                    (<any>data["range"])[key] = this.range[key] ? this.range[key].toJSON() : <any>undefined;
            }
        }
        if (this.exclude) {
            data["exclude"] = {};
            for (let key in this.exclude) {
                if (this.exclude.hasOwnProperty(key))
                    (<any>data["exclude"])[key] = (<any>this.exclude)[key];
            }
        }
        if (this.match) {
            data["match"] = {};
            for (let key in this.match) {
                if (this.match.hasOwnProperty(key))
                    (<any>data["match"])[key] = (<any>this.match)[key];
            }
        }
        return data;
    }
}

export interface IFilters {
    term?: { [key: string]: any; } | undefined;
    range?: { [key: string]: RangeValue; } | undefined;
    exclude?: { [key: string]: any; } | undefined;
    match?: { [key: string]: any; } | undefined;
}

export class Listing implements IListing {
    directProduct?: boolean;
    goldSeller?: boolean;
    listingId?: number;
    channelId?: number;
    conditionId?: number;
    listedDate?: string | undefined;
    verifiedSeller?: boolean;
    directInventory?: number;
    rankedShippingPrice?: number;
    productId?: number;
    printing?: string | undefined;
    languageAbbreviation?: string | undefined;
    sellerName?: string | undefined;
    forwardFreight?: boolean;
    sellerShippingPrice?: number;
    language?: string | undefined;
    shippingPrice?: number;
    condition?: string | undefined;
    languageId?: number;
    score?: number;
    directSeller?: boolean;
    productConditionId?: number;
    sellerId?: string | undefined;
    listingType?: string | undefined;
    soldDate?: string | undefined;
    sellerRating?: number;
    sellerSales?: string | undefined;
    quantity?: number;
    sellerKey?: string | undefined;
    price?: number;
    customData?: CustomData;

    constructor(data?: IListing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.directProduct = _data["directProduct"];
            this.goldSeller = _data["goldSeller"];
            this.listingId = _data["listingId"];
            this.channelId = _data["channelId"];
            this.conditionId = _data["conditionId"];
            this.listedDate = _data["listedDate"];
            this.verifiedSeller = _data["verifiedSeller"];
            this.directInventory = _data["directInventory"];
            this.rankedShippingPrice = _data["rankedShippingPrice"];
            this.productId = _data["productId"];
            this.printing = _data["printing"];
            this.languageAbbreviation = _data["languageAbbreviation"];
            this.sellerName = _data["sellerName"];
            this.forwardFreight = _data["forwardFreight"];
            this.sellerShippingPrice = _data["sellerShippingPrice"];
            this.language = _data["language"];
            this.shippingPrice = _data["shippingPrice"];
            this.condition = _data["condition"];
            this.languageId = _data["languageId"];
            this.score = _data["score"];
            this.directSeller = _data["directSeller"];
            this.productConditionId = _data["productConditionId"];
            this.sellerId = _data["sellerId"];
            this.listingType = _data["listingType"];
            this.soldDate = _data["soldDate"];
            this.sellerRating = _data["sellerRating"];
            this.sellerSales = _data["sellerSales"];
            this.quantity = _data["quantity"];
            this.sellerKey = _data["sellerKey"];
            this.price = _data["price"];
            this.customData = _data["customData"] ? CustomData.fromJS(_data["customData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Listing {
        data = typeof data === 'object' ? data : {};
        let result = new Listing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["directProduct"] = this.directProduct;
        data["goldSeller"] = this.goldSeller;
        data["listingId"] = this.listingId;
        data["channelId"] = this.channelId;
        data["conditionId"] = this.conditionId;
        data["listedDate"] = this.listedDate;
        data["verifiedSeller"] = this.verifiedSeller;
        data["directInventory"] = this.directInventory;
        data["rankedShippingPrice"] = this.rankedShippingPrice;
        data["productId"] = this.productId;
        data["printing"] = this.printing;
        data["languageAbbreviation"] = this.languageAbbreviation;
        data["sellerName"] = this.sellerName;
        data["forwardFreight"] = this.forwardFreight;
        data["sellerShippingPrice"] = this.sellerShippingPrice;
        data["language"] = this.language;
        data["shippingPrice"] = this.shippingPrice;
        data["condition"] = this.condition;
        data["languageId"] = this.languageId;
        data["score"] = this.score;
        data["directSeller"] = this.directSeller;
        data["productConditionId"] = this.productConditionId;
        data["sellerId"] = this.sellerId;
        data["listingType"] = this.listingType;
        data["soldDate"] = this.soldDate;
        data["sellerRating"] = this.sellerRating;
        data["sellerSales"] = this.sellerSales;
        data["quantity"] = this.quantity;
        data["sellerKey"] = this.sellerKey;
        data["price"] = this.price;
        data["customData"] = this.customData ? this.customData.toJSON() : <any>undefined;
        return data;
    }
}

export interface IListing {
    directProduct?: boolean;
    goldSeller?: boolean;
    listingId?: number;
    channelId?: number;
    conditionId?: number;
    listedDate?: string | undefined;
    verifiedSeller?: boolean;
    directInventory?: number;
    rankedShippingPrice?: number;
    productId?: number;
    printing?: string | undefined;
    languageAbbreviation?: string | undefined;
    sellerName?: string | undefined;
    forwardFreight?: boolean;
    sellerShippingPrice?: number;
    language?: string | undefined;
    shippingPrice?: number;
    condition?: string | undefined;
    languageId?: number;
    score?: number;
    directSeller?: boolean;
    productConditionId?: number;
    sellerId?: string | undefined;
    listingType?: string | undefined;
    soldDate?: string | undefined;
    sellerRating?: number;
    sellerSales?: string | undefined;
    quantity?: number;
    sellerKey?: string | undefined;
    price?: number;
    customData?: CustomData;
}

export class ListingResponse implements IListingResponse {
    explanation?: any | undefined;
    totalResults?: number;
    error?: any | undefined;
    resultId?: string | undefined;
    aggregations?: { [key: string]: Aggregation[]; } | undefined;
    results?: Listing[] | undefined;

    constructor(data?: IListingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.explanation = _data["explanation"];
            this.totalResults = _data["totalResults"];
            this.error = _data["error"];
            this.resultId = _data["resultId"];
            if (_data["aggregations"]) {
                this.aggregations = {} as any;
                for (let key in _data["aggregations"]) {
                    if (_data["aggregations"].hasOwnProperty(key))
                        (<any>this.aggregations)![key] = _data["aggregations"][key] ? _data["aggregations"][key].map((i: any) => Aggregation.fromJS(i)) : [];
                }
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Listing.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ListingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["explanation"] = this.explanation;
        data["totalResults"] = this.totalResults;
        data["error"] = this.error;
        data["resultId"] = this.resultId;
        if (this.aggregations) {
            data["aggregations"] = {};
            for (let key in this.aggregations) {
                if (this.aggregations.hasOwnProperty(key))
                    (<any>data["aggregations"])[key] = (<any>this.aggregations)[key];
            }
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

export interface IListingResponse {
    explanation?: any | undefined;
    totalResults?: number;
    error?: any | undefined;
    resultId?: string | undefined;
    aggregations?: { [key: string]: Aggregation[]; } | undefined;
    results?: Listing[] | undefined;
}

export class ListingResponseApiResult implements IListingResponseApiResult {
    errors?: ApiError[] | undefined;
    results?: ListingResponse[] | undefined;
    result?: ListingResponse;

    constructor(data?: IListingResponseApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ListingResponse.fromJS(item));
            }
            this.result = _data["result"] ? ListingResponse.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ListingResponseApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new ListingResponseApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IListingResponseApiResult {
    errors?: ApiError[] | undefined;
    results?: ListingResponse[] | undefined;
    result?: ListingResponse;
}

export class ListingSearch implements IListingSearch {
    includePresale?: boolean;
    explain?: boolean;
    mustHaveListings?: boolean;
    sessionId?: string | undefined;
    filters?: Filters;
    size?: number;
    from?: number;
    context?: V2Context;
    sort?: any | undefined;
    aggregations?: string[] | undefined;

    constructor(data?: IListingSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.includePresale = _data["includePresale"];
            this.explain = _data["explain"];
            this.mustHaveListings = _data["mustHaveListings"];
            this.sessionId = _data["sessionId"];
            this.filters = _data["filters"] ? Filters.fromJS(_data["filters"]) : <any>undefined;
            this.size = _data["size"];
            this.from = _data["from"];
            this.context = _data["context"] ? V2Context.fromJS(_data["context"]) : <any>undefined;
            this.sort = _data["sort"];
            if (Array.isArray(_data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of _data["aggregations"])
                    this.aggregations!.push(item);
            }
        }
    }

    static fromJS(data: any): ListingSearch {
        data = typeof data === 'object' ? data : {};
        let result = new ListingSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["includePresale"] = this.includePresale;
        data["explain"] = this.explain;
        data["mustHaveListings"] = this.mustHaveListings;
        data["sessionId"] = this.sessionId;
        data["filters"] = this.filters ? this.filters.toJSON() : <any>undefined;
        data["size"] = this.size;
        data["from"] = this.from;
        data["context"] = this.context ? this.context.toJSON() : <any>undefined;
        data["sort"] = this.sort;
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item);
        }
        return data;
    }
}

export interface IListingSearch {
    includePresale?: boolean;
    explain?: boolean;
    mustHaveListings?: boolean;
    sessionId?: string | undefined;
    filters?: Filters;
    size?: number;
    from?: number;
    context?: V2Context;
    sort?: any | undefined;
    aggregations?: string[] | undefined;
}

export class Package implements IPackage {
    packageShippingCost?: number;
    packageTotal?: number;

    constructor(data?: IPackage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageShippingCost = _data["packageShippingCost"];
            this.packageTotal = _data["packageTotal"];
        }
    }

    static fromJS(data: any): Package {
        data = typeof data === 'object' ? data : {};
        let result = new Package();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageShippingCost"] = this.packageShippingCost;
        data["packageTotal"] = this.packageTotal;
        return data;
    }
}

export interface IPackage {
    packageShippingCost?: number;
    packageTotal?: number;
}

export class RangeValue implements IRangeValue {
    gte?: any | undefined;
    lte?: any | undefined;

    constructor(data?: IRangeValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gte = _data["gte"];
            this.lte = _data["lte"];
        }
    }

    static fromJS(data: any): RangeValue {
        data = typeof data === 'object' ? data : {};
        let result = new RangeValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gte"] = this.gte;
        data["lte"] = this.lte;
        return data;
    }
}

export interface IRangeValue {
    gte?: any | undefined;
    lte?: any | undefined;
}

export class Settings implements ISettings {
    useFuzzySearch?: boolean | undefined;
    didYouMean?: DidYouMeanSettings;

    constructor(data?: ISettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.useFuzzySearch = _data["useFuzzySearch"];
            this.didYouMean = _data["didYouMean"] ? DidYouMeanSettings.fromJS(_data["didYouMean"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Settings {
        data = typeof data === 'object' ? data : {};
        let result = new Settings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["useFuzzySearch"] = this.useFuzzySearch;
        data["didYouMean"] = this.didYouMean ? this.didYouMean.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISettings {
    useFuzzySearch?: boolean | undefined;
    didYouMean?: DidYouMeanSettings;
}

export class UserProfile implements IUserProfile {
    productLineAffinity?: string | undefined;

    constructor(data?: IUserProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineAffinity = _data["productLineAffinity"];
        }
    }

    static fromJS(data: any): UserProfile {
        data = typeof data === 'object' ? data : {};
        let result = new UserProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productLineAffinity"] = this.productLineAffinity;
        return data;
    }
}

export interface IUserProfile {
    productLineAffinity?: string | undefined;
}

export class V2Context implements IV2Context {
    productLineName?: string | undefined;
    shippingCountry?: string | undefined;
    userProfile?: UserProfile;
    skuOnHold?: { [key: string]: number; } | undefined;
    cart?: Cart;

    constructor(data?: IV2Context) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineName = _data["productLineName"];
            this.shippingCountry = _data["shippingCountry"];
            this.userProfile = _data["userProfile"] ? UserProfile.fromJS(_data["userProfile"]) : <any>undefined;
            if (_data["skuOnHold"]) {
                this.skuOnHold = {} as any;
                for (let key in _data["skuOnHold"]) {
                    if (_data["skuOnHold"].hasOwnProperty(key))
                        (<any>this.skuOnHold)![key] = _data["skuOnHold"][key];
                }
            }
            this.cart = _data["cart"] ? Cart.fromJS(_data["cart"]) : <any>undefined;
        }
    }

    static fromJS(data: any): V2Context {
        data = typeof data === 'object' ? data : {};
        let result = new V2Context();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productLineName"] = this.productLineName;
        data["shippingCountry"] = this.shippingCountry;
        data["userProfile"] = this.userProfile ? this.userProfile.toJSON() : <any>undefined;
        if (this.skuOnHold) {
            data["skuOnHold"] = {};
            for (let key in this.skuOnHold) {
                if (this.skuOnHold.hasOwnProperty(key))
                    (<any>data["skuOnHold"])[key] = (<any>this.skuOnHold)[key];
            }
        }
        data["cart"] = this.cart ? this.cart.toJSON() : <any>undefined;
        return data;
    }
}

export interface IV2Context {
    productLineName?: string | undefined;
    shippingCountry?: string | undefined;
    userProfile?: UserProfile;
    skuOnHold?: { [key: string]: number; } | undefined;
    cart?: Cart;
}

export class V2ListingSearch implements IV2ListingSearch {
    sort?: any | undefined;
    filters?: Filters;
    mustHaveListings?: boolean;
    includePresale?: boolean;

    constructor(data?: IV2ListingSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sort = _data["sort"];
            this.filters = _data["filters"] ? Filters.fromJS(_data["filters"]) : <any>undefined;
            this.mustHaveListings = _data["mustHaveListings"];
            this.includePresale = _data["includePresale"];
        }
    }

    static fromJS(data: any): V2ListingSearch {
        data = typeof data === 'object' ? data : {};
        let result = new V2ListingSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sort"] = this.sort;
        data["filters"] = this.filters ? this.filters.toJSON() : <any>undefined;
        data["mustHaveListings"] = this.mustHaveListings;
        data["includePresale"] = this.includePresale;
        return data;
    }
}

export interface IV2ListingSearch {
    sort?: any | undefined;
    filters?: Filters;
    mustHaveListings?: boolean;
    includePresale?: boolean;
}

export class V2ProductSearch implements IV2ProductSearch {
    selectiveAggregations?: boolean;
    q?: string | undefined;
    explain?: boolean;
    algorithm?: string | undefined;
    sessionId?: string | undefined;
    filters?: Filters;
    settings?: Settings;
    size?: number;
    searchListingsAlways?: boolean;
    from?: number;
    context?: V2Context;
    useDefaultAggregations?: boolean;
    listingSearch?: V2ListingSearch;
    sort?: any | undefined;
    aggregations?: string[] | undefined;
    returnCustomAttributes?: boolean;

    constructor(data?: IV2ProductSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.selectiveAggregations = _data["selectiveAggregations"];
            this.q = _data["q"];
            this.explain = _data["explain"];
            this.algorithm = _data["algorithm"];
            this.sessionId = _data["sessionId"];
            this.filters = _data["filters"] ? Filters.fromJS(_data["filters"]) : <any>undefined;
            this.settings = _data["settings"] ? Settings.fromJS(_data["settings"]) : <any>undefined;
            this.size = _data["size"];
            this.searchListingsAlways = _data["searchListingsAlways"];
            this.from = _data["from"];
            this.context = _data["context"] ? V2Context.fromJS(_data["context"]) : <any>undefined;
            this.useDefaultAggregations = _data["useDefaultAggregations"];
            this.listingSearch = _data["listingSearch"] ? V2ListingSearch.fromJS(_data["listingSearch"]) : <any>undefined;
            this.sort = _data["sort"];
            if (Array.isArray(_data["aggregations"])) {
                this.aggregations = [] as any;
                for (let item of _data["aggregations"])
                    this.aggregations!.push(item);
            }
            this.returnCustomAttributes = _data["returnCustomAttributes"];
        }
    }

    static fromJS(data: any): V2ProductSearch {
        data = typeof data === 'object' ? data : {};
        let result = new V2ProductSearch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["selectiveAggregations"] = this.selectiveAggregations;
        data["q"] = this.q;
        data["explain"] = this.explain;
        data["algorithm"] = this.algorithm;
        data["sessionId"] = this.sessionId;
        data["filters"] = this.filters ? this.filters.toJSON() : <any>undefined;
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["size"] = this.size;
        data["searchListingsAlways"] = this.searchListingsAlways;
        data["from"] = this.from;
        data["context"] = this.context ? this.context.toJSON() : <any>undefined;
        data["useDefaultAggregations"] = this.useDefaultAggregations;
        data["listingSearch"] = this.listingSearch ? this.listingSearch.toJSON() : <any>undefined;
        data["sort"] = this.sort;
        if (Array.isArray(this.aggregations)) {
            data["aggregations"] = [];
            for (let item of this.aggregations)
                data["aggregations"].push(item);
        }
        data["returnCustomAttributes"] = this.returnCustomAttributes;
        return data;
    }
}

export interface IV2ProductSearch {
    selectiveAggregations?: boolean;
    q?: string | undefined;
    explain?: boolean;
    algorithm?: string | undefined;
    sessionId?: string | undefined;
    filters?: Filters;
    settings?: Settings;
    size?: number;
    searchListingsAlways?: boolean;
    from?: number;
    context?: V2Context;
    useDefaultAggregations?: boolean;
    listingSearch?: V2ListingSearch;
    sort?: any | undefined;
    aggregations?: string[] | undefined;
    returnCustomAttributes?: boolean;
}

export class V2SearchProduct implements IV2SearchProduct {
    shippingCategoryId?: number | undefined;
    duplicate?: boolean;
    productLineUrlName?: string | undefined;
    productTypeName?: string | undefined;
    productUrlName?: string | undefined;
    productTypeId?: number;
    rarityName?: string | undefined;
    sealed?: boolean;
    marketPrice?: number | undefined;
    customAttributes?: { [key: string]: any; } | undefined;
    lowestPriceWithShipping?: number | undefined;
    productName?: string | undefined;
    setId?: number;
    setCode?: string | undefined;
    productId?: number;
    artist?: string | undefined;
    imageCount?: number | undefined;
    medianPrice?: number | undefined;
    score?: number;
    setName?: string | undefined;
    sellers?: number | undefined;
    foilOnly?: boolean | undefined;
    setUrlName?: string | undefined;
    sellerListable?: boolean;
    totalListings?: number | undefined;
    productLineId?: number;
    productStatusId?: number;
    productLineName?: string | undefined;
    maxFulfillableQuantity?: number | undefined;
    normalOnly?: boolean | undefined;
    listings?: Listing[] | undefined;
    lowestPrice?: number | undefined;

    constructor(data?: IV2SearchProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shippingCategoryId = _data["shippingCategoryId"];
            this.duplicate = _data["duplicate"];
            this.productLineUrlName = _data["productLineUrlName"];
            this.productTypeName = _data["productTypeName"];
            this.productUrlName = _data["productUrlName"];
            this.productTypeId = _data["productTypeId"];
            this.rarityName = _data["rarityName"];
            this.sealed = _data["sealed"];
            this.marketPrice = _data["marketPrice"];
            if (_data["customAttributes"]) {
                this.customAttributes = {} as any;
                for (let key in _data["customAttributes"]) {
                    if (_data["customAttributes"].hasOwnProperty(key))
                        (<any>this.customAttributes)![key] = _data["customAttributes"][key];
                }
            }
            this.lowestPriceWithShipping = _data["lowestPriceWithShipping"];
            this.productName = _data["productName"];
            this.setId = _data["setId"];
            this.setCode = _data["setCode"];
            this.productId = _data["productId"];
            this.artist = _data["artist"];
            this.imageCount = _data["imageCount"];
            this.medianPrice = _data["medianPrice"];
            this.score = _data["score"];
            this.setName = _data["setName"];
            this.sellers = _data["sellers"];
            this.foilOnly = _data["foilOnly"];
            this.setUrlName = _data["setUrlName"];
            this.sellerListable = _data["sellerListable"];
            this.totalListings = _data["totalListings"];
            this.productLineId = _data["productLineId"];
            this.productStatusId = _data["productStatusId"];
            this.productLineName = _data["productLineName"];
            this.maxFulfillableQuantity = _data["maxFulfillableQuantity"];
            this.normalOnly = _data["normalOnly"];
            if (Array.isArray(_data["listings"])) {
                this.listings = [] as any;
                for (let item of _data["listings"])
                    this.listings!.push(Listing.fromJS(item));
            }
            this.lowestPrice = _data["lowestPrice"];
        }
    }

    static fromJS(data: any): V2SearchProduct {
        data = typeof data === 'object' ? data : {};
        let result = new V2SearchProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shippingCategoryId"] = this.shippingCategoryId;
        data["duplicate"] = this.duplicate;
        data["productLineUrlName"] = this.productLineUrlName;
        data["productTypeName"] = this.productTypeName;
        data["productUrlName"] = this.productUrlName;
        data["productTypeId"] = this.productTypeId;
        data["rarityName"] = this.rarityName;
        data["sealed"] = this.sealed;
        data["marketPrice"] = this.marketPrice;
        if (this.customAttributes) {
            data["customAttributes"] = {};
            for (let key in this.customAttributes) {
                if (this.customAttributes.hasOwnProperty(key))
                    (<any>data["customAttributes"])[key] = (<any>this.customAttributes)[key];
            }
        }
        data["lowestPriceWithShipping"] = this.lowestPriceWithShipping;
        data["productName"] = this.productName;
        data["setId"] = this.setId;
        data["setCode"] = this.setCode;
        data["productId"] = this.productId;
        data["artist"] = this.artist;
        data["imageCount"] = this.imageCount;
        data["medianPrice"] = this.medianPrice;
        data["score"] = this.score;
        data["setName"] = this.setName;
        data["sellers"] = this.sellers;
        data["foilOnly"] = this.foilOnly;
        data["setUrlName"] = this.setUrlName;
        data["sellerListable"] = this.sellerListable;
        data["totalListings"] = this.totalListings;
        data["productLineId"] = this.productLineId;
        data["productStatusId"] = this.productStatusId;
        data["productLineName"] = this.productLineName;
        data["maxFulfillableQuantity"] = this.maxFulfillableQuantity;
        data["normalOnly"] = this.normalOnly;
        if (Array.isArray(this.listings)) {
            data["listings"] = [];
            for (let item of this.listings)
                data["listings"].push(item.toJSON());
        }
        data["lowestPrice"] = this.lowestPrice;
        return data;
    }
}

export interface IV2SearchProduct {
    shippingCategoryId?: number | undefined;
    duplicate?: boolean;
    productLineUrlName?: string | undefined;
    productTypeName?: string | undefined;
    productUrlName?: string | undefined;
    productTypeId?: number;
    rarityName?: string | undefined;
    sealed?: boolean;
    marketPrice?: number | undefined;
    customAttributes?: { [key: string]: any; } | undefined;
    lowestPriceWithShipping?: number | undefined;
    productName?: string | undefined;
    setId?: number;
    setCode?: string | undefined;
    productId?: number;
    artist?: string | undefined;
    imageCount?: number | undefined;
    medianPrice?: number | undefined;
    score?: number;
    setName?: string | undefined;
    sellers?: number | undefined;
    foilOnly?: boolean | undefined;
    setUrlName?: string | undefined;
    sellerListable?: boolean;
    totalListings?: number | undefined;
    productLineId?: number;
    productStatusId?: number;
    productLineName?: string | undefined;
    maxFulfillableQuantity?: number | undefined;
    normalOnly?: boolean | undefined;
    listings?: Listing[] | undefined;
    lowestPrice?: number | undefined;
}

/** Appends additional data to the original aggregation class */
export class EnrichedAggregation implements IEnrichedAggregation {
    value?: any | undefined;
    count?: number;
    /** Gets or sets the converted url from the aggregation value */
    urlValue?: string | undefined;
    /** Gets or sets a value indicating whether the filter status is active. */
    isActive?: boolean;

    constructor(data?: IEnrichedAggregation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.count = _data["count"];
            this.urlValue = _data["urlValue"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): EnrichedAggregation {
        data = typeof data === 'object' ? data : {};
        let result = new EnrichedAggregation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["count"] = this.count;
        data["urlValue"] = this.urlValue;
        data["isActive"] = this.isActive;
        return data;
    }
}

/** Appends additional data to the original aggregation class */
export interface IEnrichedAggregation {
    value?: any | undefined;
    count?: number;
    /** Gets or sets the converted url from the aggregation value */
    urlValue?: string | undefined;
    /** Gets or sets a value indicating whether the filter status is active. */
    isActive?: boolean;
}

/** The enriched response contains additional data hydrated from the request body. */
export class EnrichedProductSearchResponse implements IEnrichedProductSearchResponse {
    explanation?: any | undefined;
    algorithm?: string | undefined;
    searchType?: string | undefined;
    didYouMean?: DidYouMean;
    totalResults?: number;
    error?: any | undefined;
    resultId?: string | undefined;
    /** Gets the enriched aggregations */
    readonly aggregations?: { [key: string]: EnrichedAggregation[]; } | undefined;
    results?: V2SearchProduct[] | undefined;

    constructor(data?: IEnrichedProductSearchResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.explanation = _data["explanation"];
            this.algorithm = _data["algorithm"];
            this.searchType = _data["searchType"];
            this.didYouMean = _data["didYouMean"] ? DidYouMean.fromJS(_data["didYouMean"]) : <any>undefined;
            this.totalResults = _data["totalResults"];
            this.error = _data["error"];
            this.resultId = _data["resultId"];
            if (_data["aggregations"]) {
                (<any>this).aggregations = {} as any;
                for (let key in _data["aggregations"]) {
                    if (_data["aggregations"].hasOwnProperty(key))
                        (<any>(<any>this).aggregations)![key] = _data["aggregations"][key] ? _data["aggregations"][key].map((i: any) => EnrichedAggregation.fromJS(i)) : [];
                }
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(V2SearchProduct.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EnrichedProductSearchResponse {
        data = typeof data === 'object' ? data : {};
        let result = new EnrichedProductSearchResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["explanation"] = this.explanation;
        data["algorithm"] = this.algorithm;
        data["searchType"] = this.searchType;
        data["didYouMean"] = this.didYouMean ? this.didYouMean.toJSON() : <any>undefined;
        data["totalResults"] = this.totalResults;
        data["error"] = this.error;
        data["resultId"] = this.resultId;
        if (this.aggregations) {
            data["aggregations"] = {};
            for (let key in this.aggregations) {
                if (this.aggregations.hasOwnProperty(key))
                    (<any>data["aggregations"])[key] = (<any>this.aggregations)[key];
            }
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        return data;
    }
}

/** The enriched response contains additional data hydrated from the request body. */
export interface IEnrichedProductSearchResponse {
    explanation?: any | undefined;
    algorithm?: string | undefined;
    searchType?: string | undefined;
    didYouMean?: DidYouMean;
    totalResults?: number;
    error?: any | undefined;
    resultId?: string | undefined;
    /** Gets the enriched aggregations */
    aggregations?: { [key: string]: EnrichedAggregation[]; } | undefined;
    results?: V2SearchProduct[] | undefined;
}

export class EnrichedProductSearchResponseApiResult implements IEnrichedProductSearchResponseApiResult {
    errors?: ApiError[] | undefined;
    results?: EnrichedProductSearchResponse[] | undefined;
    result?: EnrichedProductSearchResponse;

    constructor(data?: IEnrichedProductSearchResponseApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(EnrichedProductSearchResponse.fromJS(item));
            }
            this.result = _data["result"] ? EnrichedProductSearchResponse.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EnrichedProductSearchResponseApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new EnrichedProductSearchResponseApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEnrichedProductSearchResponseApiResult {
    errors?: ApiError[] | undefined;
    results?: EnrichedProductSearchResponse[] | undefined;
    result?: EnrichedProductSearchResponse;
}

export class EnrichedProductSearchResponseApiResultActionResult implements IEnrichedProductSearchResponseApiResultActionResult {
    result?: ActionResult;
    value?: EnrichedProductSearchResponseApiResult;

    constructor(data?: IEnrichedProductSearchResponseApiResultActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"] ? EnrichedProductSearchResponseApiResult.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EnrichedProductSearchResponseApiResultActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new EnrichedProductSearchResponseApiResultActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEnrichedProductSearchResponseApiResultActionResult {
    result?: ActionResult;
    value?: EnrichedProductSearchResponseApiResult;
}

/** Possible condition for a category */
export class Condition implements ICondition {
    /** Id of the condition */
    id?: number;
    /** Name of the condition */
    name?: string | undefined;
    /** Abbreviated name of the condition */
    abbreviation?: string | undefined;

    constructor(data?: ICondition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.abbreviation = _data["abbreviation"];
        }
    }

    static fromJS(data: any): Condition {
        data = typeof data === 'object' ? data : {};
        let result = new Condition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["abbreviation"] = this.abbreviation;
        return data;
    }
}

/** Possible condition for a category */
export interface ICondition {
    /** Id of the condition */
    id?: number;
    /** Name of the condition */
    name?: string | undefined;
    /** Abbreviated name of the condition */
    abbreviation?: string | undefined;
}

/** Custom Listing Data */
export class CustomListingData implements ICustomListingData {
    /** The users shipping country */
    shippingCountry?: string | undefined;
    /** Session Id of the user */
    sessionId?: string | undefined;

    constructor(data?: ICustomListingData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shippingCountry = _data["shippingCountry"];
            this.sessionId = _data["sessionId"];
        }
    }

    static fromJS(data: any): CustomListingData {
        data = typeof data === 'object' ? data : {};
        let result = new CustomListingData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shippingCountry"] = this.shippingCountry;
        data["sessionId"] = this.sessionId;
        return data;
    }
}

/** Custom Listing Data */
export interface ICustomListingData {
    /** The users shipping country */
    shippingCountry?: string | undefined;
    /** Session Id of the user */
    sessionId?: string | undefined;
}

/** Aggregate object containing MPSearchApi.Models.ProductModels.Variant, MPSearchApi.Models.ProductModels.Condition, and MPSearchApi.Models.ProductModels.Language filters. */
export class FilterAggregate implements IFilterAggregate {
    /** List of variants */
    variants?: Variant[] | undefined;
    /** List of conditions */
    conditions?: Condition[] | undefined;
    /** List of languages */
    languages?: Language[] | undefined;

    constructor(data?: IFilterAggregate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["variants"])) {
                this.variants = [] as any;
                for (let item of _data["variants"])
                    this.variants!.push(Variant.fromJS(item));
            }
            if (Array.isArray(_data["conditions"])) {
                this.conditions = [] as any;
                for (let item of _data["conditions"])
                    this.conditions!.push(Condition.fromJS(item));
            }
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(Language.fromJS(item));
            }
        }
    }

    static fromJS(data: any): FilterAggregate {
        data = typeof data === 'object' ? data : {};
        let result = new FilterAggregate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.variants)) {
            data["variants"] = [];
            for (let item of this.variants)
                data["variants"].push(item.toJSON());
        }
        if (Array.isArray(this.conditions)) {
            data["conditions"] = [];
            for (let item of this.conditions)
                data["conditions"].push(item.toJSON());
        }
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item.toJSON());
        }
        return data;
    }
}

/** Aggregate object containing MPSearchApi.Models.ProductModels.Variant, MPSearchApi.Models.ProductModels.Condition, and MPSearchApi.Models.ProductModels.Language filters. */
export interface IFilterAggregate {
    /** List of variants */
    variants?: Variant[] | undefined;
    /** List of conditions */
    conditions?: Condition[] | undefined;
    /** List of languages */
    languages?: Language[] | undefined;
}

export class FilterAggregateApiResult implements IFilterAggregateApiResult {
    errors?: ApiError[] | undefined;
    results?: FilterAggregate[] | undefined;
    result?: FilterAggregate;

    constructor(data?: IFilterAggregateApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(FilterAggregate.fromJS(item));
            }
            this.result = _data["result"] ? FilterAggregate.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FilterAggregateApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new FilterAggregateApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFilterAggregateApiResult {
    errors?: ApiError[] | undefined;
    results?: FilterAggregate[] | undefined;
    result?: FilterAggregate;
}

/** Possible language for a category */
export class Language implements ILanguage {
    /** Id of the language */
    id?: number;
    /** Name of the language */
    name?: string | undefined;
    /** Abbreviated name of the language */
    abbreviation?: string | undefined;

    constructor(data?: ILanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.abbreviation = _data["abbreviation"];
        }
    }

    static fromJS(data: any): Language {
        data = typeof data === 'object' ? data : {};
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["abbreviation"] = this.abbreviation;
        return data;
    }
}

/** Possible language for a category */
export interface ILanguage {
    /** Id of the language */
    id?: number;
    /** Name of the language */
    name?: string | undefined;
    /** Abbreviated name of the language */
    abbreviation?: string | undefined;
}

export class ProductForId implements IProductForId {
    productId?: number;
    productName?: string | undefined;
    setAbbreviation?: string | undefined;
    collectorNumber?: string | undefined;

    constructor(data?: IProductForId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.setAbbreviation = _data["setAbbreviation"];
            this.collectorNumber = _data["collectorNumber"];
        }
    }

    static fromJS(data: any): ProductForId {
        data = typeof data === 'object' ? data : {};
        let result = new ProductForId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["setAbbreviation"] = this.setAbbreviation;
        data["collectorNumber"] = this.collectorNumber;
        return data;
    }
}

export interface IProductForId {
    productId?: number;
    productName?: string | undefined;
    setAbbreviation?: string | undefined;
    collectorNumber?: string | undefined;
}

export class ProductForIdListApiResult implements IProductForIdListApiResult {
    errors?: ApiError[] | undefined;
    results?: ProductForId[][] | undefined;
    result?: ProductForId[] | undefined;

    constructor(data?: IProductForIdListApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(item);
            }
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(ProductForId.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductForIdListApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProductForIdListApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item);
        }
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductForIdListApiResult {
    errors?: ApiError[] | undefined;
    results?: ProductForId[][] | undefined;
    result?: ProductForId[] | undefined;
}

export class ProductForSku implements IProductForSku {
    sku?: number;
    productId?: number;
    productName?: string | undefined;
    setName?: string | undefined;
    categoryId?: number;
    categoryName?: string | undefined;
    condition?: string | undefined;
    printing?: string | undefined;
    presaleReleaseDate?: Date | undefined;
    rarity?: string | undefined;
    collectorNumber?: string | undefined;
    productLineName?: string | undefined;
    productLineUrlName?: string | undefined;
    productTypeId?: number;
    productTypeName?: string | undefined;
    productStatusId?: number;
    readonly customAttributes?: { [key: string]: any; } | undefined;
    readonly formattedAttributes?: { [key: string]: any; } | undefined;
    shippingCategoryId?: number;
    lowestPriceWithShipping?: number | undefined;
    isSealed?: boolean;
    isSingle?: boolean;

    constructor(data?: IProductForSku) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sku = _data["sku"];
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.setName = _data["setName"];
            this.categoryId = _data["categoryId"];
            this.categoryName = _data["categoryName"];
            this.condition = _data["condition"];
            this.printing = _data["printing"];
            this.presaleReleaseDate = _data["presaleReleaseDate"] ? new Date(_data["presaleReleaseDate"].toString()) : <any>undefined;
            this.rarity = _data["rarity"];
            this.collectorNumber = _data["collectorNumber"];
            this.productLineName = _data["productLineName"];
            this.productLineUrlName = _data["productLineUrlName"];
            this.productTypeId = _data["productTypeId"];
            this.productTypeName = _data["productTypeName"];
            this.productStatusId = _data["productStatusId"];
            if (_data["customAttributes"]) {
                (<any>this).customAttributes = {} as any;
                for (let key in _data["customAttributes"]) {
                    if (_data["customAttributes"].hasOwnProperty(key))
                        (<any>(<any>this).customAttributes)![key] = _data["customAttributes"][key];
                }
            }
            if (_data["formattedAttributes"]) {
                (<any>this).formattedAttributes = {} as any;
                for (let key in _data["formattedAttributes"]) {
                    if (_data["formattedAttributes"].hasOwnProperty(key))
                        (<any>(<any>this).formattedAttributes)![key] = _data["formattedAttributes"][key];
                }
            }
            this.shippingCategoryId = _data["shippingCategoryId"];
            this.lowestPriceWithShipping = _data["lowestPriceWithShipping"];
            this.isSealed = _data["isSealed"];
            this.isSingle = _data["isSingle"];
        }
    }

    static fromJS(data: any): ProductForSku {
        data = typeof data === 'object' ? data : {};
        let result = new ProductForSku();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sku"] = this.sku;
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["setName"] = this.setName;
        data["categoryId"] = this.categoryId;
        data["categoryName"] = this.categoryName;
        data["condition"] = this.condition;
        data["printing"] = this.printing;
        data["presaleReleaseDate"] = this.presaleReleaseDate ? this.presaleReleaseDate.toISOString() : <any>undefined;
        data["rarity"] = this.rarity;
        data["collectorNumber"] = this.collectorNumber;
        data["productLineName"] = this.productLineName;
        data["productLineUrlName"] = this.productLineUrlName;
        data["productTypeId"] = this.productTypeId;
        data["productTypeName"] = this.productTypeName;
        data["productStatusId"] = this.productStatusId;
        if (this.customAttributes) {
            data["customAttributes"] = {};
            for (let key in this.customAttributes) {
                if (this.customAttributes.hasOwnProperty(key))
                    (<any>data["customAttributes"])[key] = (<any>this.customAttributes)[key];
            }
        }
        if (this.formattedAttributes) {
            data["formattedAttributes"] = {};
            for (let key in this.formattedAttributes) {
                if (this.formattedAttributes.hasOwnProperty(key))
                    (<any>data["formattedAttributes"])[key] = (<any>this.formattedAttributes)[key];
            }
        }
        data["shippingCategoryId"] = this.shippingCategoryId;
        data["lowestPriceWithShipping"] = this.lowestPriceWithShipping;
        data["isSealed"] = this.isSealed;
        data["isSingle"] = this.isSingle;
        return data;
    }
}

export interface IProductForSku {
    sku?: number;
    productId?: number;
    productName?: string | undefined;
    setName?: string | undefined;
    categoryId?: number;
    categoryName?: string | undefined;
    condition?: string | undefined;
    printing?: string | undefined;
    presaleReleaseDate?: Date | undefined;
    rarity?: string | undefined;
    collectorNumber?: string | undefined;
    productLineName?: string | undefined;
    productLineUrlName?: string | undefined;
    productTypeId?: number;
    productTypeName?: string | undefined;
    productStatusId?: number;
    customAttributes?: { [key: string]: any; } | undefined;
    formattedAttributes?: { [key: string]: any; } | undefined;
    shippingCategoryId?: number;
    lowestPriceWithShipping?: number | undefined;
    isSealed?: boolean;
    isSingle?: boolean;
}

export class ProductForSkuListApiResult implements IProductForSkuListApiResult {
    errors?: ApiError[] | undefined;
    results?: ProductForSku[][] | undefined;
    result?: ProductForSku[] | undefined;

    constructor(data?: IProductForSkuListApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(item);
            }
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(ProductForSku.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductForSkuListApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProductForSkuListApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item);
        }
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductForSkuListApiResult {
    errors?: ApiError[] | undefined;
    results?: ProductForSku[][] | undefined;
    result?: ProductForSku[] | undefined;
}

/** Map product line search fields to Elastic Search fields */
export class ProductLineMapping implements IProductLineMapping {
    /** Filter Name */
    name?: string | undefined;
    /** Filter Type */
    type?: string | undefined;
    /** Value name is mapped to */
    canonical?: string | undefined;

    constructor(data?: IProductLineMapping) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.type = _data["type"];
            this.canonical = _data["canonical"];
        }
    }

    static fromJS(data: any): ProductLineMapping {
        data = typeof data === 'object' ? data : {};
        let result = new ProductLineMapping();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["canonical"] = this.canonical;
        return data;
    }
}

/** Map product line search fields to Elastic Search fields */
export interface IProductLineMapping {
    /** Filter Name */
    name?: string | undefined;
    /** Filter Type */
    type?: string | undefined;
    /** Value name is mapped to */
    canonical?: string | undefined;
}

export class ProductRecommendation implements IProductRecommendation {
    productId?: number;
    productName?: string | undefined;
    productLineName?: string | undefined;
    setName?: string | undefined;
    productUrlName?: string | undefined;
    productLineUrlName?: string | undefined;
    setUrlName?: string | undefined;
    lowestPrice?: number | undefined;
    lowestPriceWithShipping?: number | undefined;
    resultId?: string | undefined;

    constructor(data?: IProductRecommendation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.productName = _data["productName"];
            this.productLineName = _data["productLineName"];
            this.setName = _data["setName"];
            this.productUrlName = _data["productUrlName"];
            this.productLineUrlName = _data["productLineUrlName"];
            this.setUrlName = _data["setUrlName"];
            this.lowestPrice = _data["lowestPrice"];
            this.lowestPriceWithShipping = _data["lowestPriceWithShipping"];
            this.resultId = _data["resultId"];
        }
    }

    static fromJS(data: any): ProductRecommendation {
        data = typeof data === 'object' ? data : {};
        let result = new ProductRecommendation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["productName"] = this.productName;
        data["productLineName"] = this.productLineName;
        data["setName"] = this.setName;
        data["productUrlName"] = this.productUrlName;
        data["productLineUrlName"] = this.productLineUrlName;
        data["setUrlName"] = this.setUrlName;
        data["lowestPrice"] = this.lowestPrice;
        data["lowestPriceWithShipping"] = this.lowestPriceWithShipping;
        data["resultId"] = this.resultId;
        return data;
    }
}

export interface IProductRecommendation {
    productId?: number;
    productName?: string | undefined;
    productLineName?: string | undefined;
    setName?: string | undefined;
    productUrlName?: string | undefined;
    productLineUrlName?: string | undefined;
    setUrlName?: string | undefined;
    lowestPrice?: number | undefined;
    lowestPriceWithShipping?: number | undefined;
    resultId?: string | undefined;
}

export class ProductRecommendationApiResult implements IProductRecommendationApiResult {
    errors?: ApiError[] | undefined;
    results?: ProductRecommendation[] | undefined;
    result?: ProductRecommendation;

    constructor(data?: IProductRecommendationApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ProductRecommendation.fromJS(item));
            }
            this.result = _data["result"] ? ProductRecommendation.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ProductRecommendationApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new ProductRecommendationApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IProductRecommendationApiResult {
    errors?: ApiError[] | undefined;
    results?: ProductRecommendation[] | undefined;
    result?: ProductRecommendation;
}

export class SearchProduct implements ISearchProduct {
    customListings?: number;
    shippingCategoryId?: number | undefined;
    duplicate?: boolean;
    productLineUrlName?: string | undefined;
    productTypeName?: string | undefined;
    productUrlName?: string | undefined;
    productTypeId?: number;
    rarityName?: string | undefined;
    sealed?: boolean;
    marketPrice?: number | undefined;
    customAttributes?: { [key: string]: any; } | undefined;
    lowestPriceWithShipping?: number | undefined;
    productName?: string | undefined;
    setId?: number;
    setCode?: string | undefined;
    productId?: number;
    imageCount?: number | undefined;
    score?: number;
    setName?: string | undefined;
    sellers?: number | undefined;
    foilOnly?: boolean | undefined;
    setUrlName?: string | undefined;
    sellerListable?: boolean;
    productLineId?: number;
    productStatusId?: number;
    productLineName?: string | undefined;
    maxFulfillableQuantity?: number | undefined;
    normalOnly?: boolean | undefined;
    listings?: number;
    lowestPrice?: number | undefined;
    medianPrice?: number | undefined;
    /** Formatted Custom Attributes to display on the product details page. */
    formattedAttributes?: { [key: string]: any; } | undefined;
    skus?: SkuInfo[] | undefined;

    constructor(data?: ISearchProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.customListings = _data["customListings"];
            this.shippingCategoryId = _data["shippingCategoryId"];
            this.duplicate = _data["duplicate"];
            this.productLineUrlName = _data["productLineUrlName"];
            this.productTypeName = _data["productTypeName"];
            this.productUrlName = _data["productUrlName"];
            this.productTypeId = _data["productTypeId"];
            this.rarityName = _data["rarityName"];
            this.sealed = _data["sealed"];
            this.marketPrice = _data["marketPrice"];
            if (_data["customAttributes"]) {
                this.customAttributes = {} as any;
                for (let key in _data["customAttributes"]) {
                    if (_data["customAttributes"].hasOwnProperty(key))
                        (<any>this.customAttributes)![key] = _data["customAttributes"][key];
                }
            }
            this.lowestPriceWithShipping = _data["lowestPriceWithShipping"];
            this.productName = _data["productName"];
            this.setId = _data["setId"];
            this.setCode = _data["setCode"];
            this.productId = _data["productId"];
            this.imageCount = _data["imageCount"];
            this.score = _data["score"];
            this.setName = _data["setName"];
            this.sellers = _data["sellers"];
            this.foilOnly = _data["foilOnly"];
            this.setUrlName = _data["setUrlName"];
            this.sellerListable = _data["sellerListable"];
            this.productLineId = _data["productLineId"];
            this.productStatusId = _data["productStatusId"];
            this.productLineName = _data["productLineName"];
            this.maxFulfillableQuantity = _data["maxFulfillableQuantity"];
            this.normalOnly = _data["normalOnly"];
            this.listings = _data["listings"];
            this.lowestPrice = _data["lowestPrice"];
            this.medianPrice = _data["medianPrice"];
            if (_data["formattedAttributes"]) {
                this.formattedAttributes = {} as any;
                for (let key in _data["formattedAttributes"]) {
                    if (_data["formattedAttributes"].hasOwnProperty(key))
                        (<any>this.formattedAttributes)![key] = _data["formattedAttributes"][key];
                }
            }
            if (Array.isArray(_data["skus"])) {
                this.skus = [] as any;
                for (let item of _data["skus"])
                    this.skus!.push(SkuInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SearchProduct {
        data = typeof data === 'object' ? data : {};
        let result = new SearchProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customListings"] = this.customListings;
        data["shippingCategoryId"] = this.shippingCategoryId;
        data["duplicate"] = this.duplicate;
        data["productLineUrlName"] = this.productLineUrlName;
        data["productTypeName"] = this.productTypeName;
        data["productUrlName"] = this.productUrlName;
        data["productTypeId"] = this.productTypeId;
        data["rarityName"] = this.rarityName;
        data["sealed"] = this.sealed;
        data["marketPrice"] = this.marketPrice;
        if (this.customAttributes) {
            data["customAttributes"] = {};
            for (let key in this.customAttributes) {
                if (this.customAttributes.hasOwnProperty(key))
                    (<any>data["customAttributes"])[key] = (<any>this.customAttributes)[key];
            }
        }
        data["lowestPriceWithShipping"] = this.lowestPriceWithShipping;
        data["productName"] = this.productName;
        data["setId"] = this.setId;
        data["setCode"] = this.setCode;
        data["productId"] = this.productId;
        data["imageCount"] = this.imageCount;
        data["score"] = this.score;
        data["setName"] = this.setName;
        data["sellers"] = this.sellers;
        data["foilOnly"] = this.foilOnly;
        data["setUrlName"] = this.setUrlName;
        data["sellerListable"] = this.sellerListable;
        data["productLineId"] = this.productLineId;
        data["productStatusId"] = this.productStatusId;
        data["productLineName"] = this.productLineName;
        data["maxFulfillableQuantity"] = this.maxFulfillableQuantity;
        data["normalOnly"] = this.normalOnly;
        data["listings"] = this.listings;
        data["lowestPrice"] = this.lowestPrice;
        data["medianPrice"] = this.medianPrice;
        if (this.formattedAttributes) {
            data["formattedAttributes"] = {};
            for (let key in this.formattedAttributes) {
                if (this.formattedAttributes.hasOwnProperty(key))
                    (<any>data["formattedAttributes"])[key] = (<any>this.formattedAttributes)[key];
            }
        }
        if (Array.isArray(this.skus)) {
            data["skus"] = [];
            for (let item of this.skus)
                data["skus"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISearchProduct {
    customListings?: number;
    shippingCategoryId?: number | undefined;
    duplicate?: boolean;
    productLineUrlName?: string | undefined;
    productTypeName?: string | undefined;
    productUrlName?: string | undefined;
    productTypeId?: number;
    rarityName?: string | undefined;
    sealed?: boolean;
    marketPrice?: number | undefined;
    customAttributes?: { [key: string]: any; } | undefined;
    lowestPriceWithShipping?: number | undefined;
    productName?: string | undefined;
    setId?: number;
    setCode?: string | undefined;
    productId?: number;
    imageCount?: number | undefined;
    score?: number;
    setName?: string | undefined;
    sellers?: number | undefined;
    foilOnly?: boolean | undefined;
    setUrlName?: string | undefined;
    sellerListable?: boolean;
    productLineId?: number;
    productStatusId?: number;
    productLineName?: string | undefined;
    maxFulfillableQuantity?: number | undefined;
    normalOnly?: boolean | undefined;
    listings?: number;
    lowestPrice?: number | undefined;
    medianPrice?: number | undefined;
    /** Formatted Custom Attributes to display on the product details page. */
    formattedAttributes?: { [key: string]: any; } | undefined;
    skus?: SkuInfo[] | undefined;
}

export class SearchProductApiResult implements ISearchProductApiResult {
    errors?: ApiError[] | undefined;
    results?: SearchProduct[] | undefined;
    result?: SearchProduct;

    constructor(data?: ISearchProductApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(SearchProduct.fromJS(item));
            }
            this.result = _data["result"] ? SearchProduct.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SearchProductApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new SearchProductApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISearchProductApiResult {
    errors?: ApiError[] | undefined;
    results?: SearchProduct[] | undefined;
    result?: SearchProduct;
}

export class SkuInfo implements ISkuInfo {
    sku?: number;
    condition?: string | undefined;
    variant?: string | undefined;
    language?: string | undefined;

    constructor(data?: ISkuInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sku = _data["sku"];
            this.condition = _data["condition"];
            this.variant = _data["variant"];
            this.language = _data["language"];
        }
    }

    static fromJS(data: any): SkuInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SkuInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sku"] = this.sku;
        data["condition"] = this.condition;
        data["variant"] = this.variant;
        data["language"] = this.language;
        return data;
    }
}

export interface ISkuInfo {
    sku?: number;
    condition?: string | undefined;
    variant?: string | undefined;
    language?: string | undefined;
}

/** Possible variant for a category */
export class Variant implements IVariant {
    /** Id of the variant */
    id?: number;
    /** Name of the variant */
    name?: string | undefined;
    /** Number used to order results */
    displayOrder?: number;

    constructor(data?: IVariant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.displayOrder = _data["displayOrder"];
        }
    }

    static fromJS(data: any): Variant {
        data = typeof data === 'object' ? data : {};
        let result = new Variant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayOrder"] = this.displayOrder;
        return data;
    }
}

/** Possible variant for a category */
export interface IVariant {
    /** Id of the variant */
    id?: number;
    /** Name of the variant */
    name?: string | undefined;
    /** Number used to order results */
    displayOrder?: number;
}

export class DirectQuantitiesAtPriceRequest implements IDirectQuantitiesAtPriceRequest {
    readonly items?: SkuPrice[] | undefined;
    readonly nonDirectSellersInCart?: number[] | undefined;

    constructor(data?: IDirectQuantitiesAtPriceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                (<any>this).items = [] as any;
                for (let item of _data["items"])
                    (<any>this).items!.push(SkuPrice.fromJS(item));
            }
            if (Array.isArray(_data["nonDirectSellersInCart"])) {
                (<any>this).nonDirectSellersInCart = [] as any;
                for (let item of _data["nonDirectSellersInCart"])
                    (<any>this).nonDirectSellersInCart!.push(item);
            }
        }
    }

    static fromJS(data: any): DirectQuantitiesAtPriceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DirectQuantitiesAtPriceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.nonDirectSellersInCart)) {
            data["nonDirectSellersInCart"] = [];
            for (let item of this.nonDirectSellersInCart)
                data["nonDirectSellersInCart"].push(item);
        }
        return data;
    }
}

export interface IDirectQuantitiesAtPriceRequest {
    items?: SkuPrice[] | undefined;
    nonDirectSellersInCart?: number[] | undefined;
}

export class DirectQuantityAtPrice implements IDirectQuantityAtPrice {
    sku?: number;
    price?: number;
    directInventoryAvailable?: number;
    readonly sellerQuantities?: SellerQuantity[] | undefined;

    constructor(data?: IDirectQuantityAtPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sku = _data["sku"];
            this.price = _data["price"];
            this.directInventoryAvailable = _data["directInventoryAvailable"];
            if (Array.isArray(_data["sellerQuantities"])) {
                (<any>this).sellerQuantities = [] as any;
                for (let item of _data["sellerQuantities"])
                    (<any>this).sellerQuantities!.push(SellerQuantity.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DirectQuantityAtPrice {
        data = typeof data === 'object' ? data : {};
        let result = new DirectQuantityAtPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sku"] = this.sku;
        data["price"] = this.price;
        data["directInventoryAvailable"] = this.directInventoryAvailable;
        if (Array.isArray(this.sellerQuantities)) {
            data["sellerQuantities"] = [];
            for (let item of this.sellerQuantities)
                data["sellerQuantities"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDirectQuantityAtPrice {
    sku?: number;
    price?: number;
    directInventoryAvailable?: number;
    sellerQuantities?: SellerQuantity[] | undefined;
}

export class DirectQuantityAtPriceListApiResult implements IDirectQuantityAtPriceListApiResult {
    errors?: ApiError[] | undefined;
    results?: DirectQuantityAtPrice[][] | undefined;
    result?: DirectQuantityAtPrice[] | undefined;

    constructor(data?: IDirectQuantityAtPriceListApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(item);
            }
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(DirectQuantityAtPrice.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DirectQuantityAtPriceListApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new DirectQuantityAtPriceListApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item);
        }
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDirectQuantityAtPriceListApiResult {
    errors?: ApiError[] | undefined;
    results?: DirectQuantityAtPrice[][] | undefined;
    result?: DirectQuantityAtPrice[] | undefined;
}

export class ProductLine implements IProductLine {
    productLineId?: number;
    productLineName?: string | undefined;
    productLineUrlName?: string | undefined;
    isDirect?: boolean;

    constructor(data?: IProductLine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineId = _data["productLineId"];
            this.productLineName = _data["productLineName"];
            this.productLineUrlName = _data["productLineUrlName"];
            this.isDirect = _data["isDirect"];
        }
    }

    static fromJS(data: any): ProductLine {
        data = typeof data === 'object' ? data : {};
        let result = new ProductLine();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productLineId"] = this.productLineId;
        data["productLineName"] = this.productLineName;
        data["productLineUrlName"] = this.productLineUrlName;
        data["isDirect"] = this.isDirect;
        return data;
    }
}

export interface IProductLine {
    productLineId?: number;
    productLineName?: string | undefined;
    productLineUrlName?: string | undefined;
    isDirect?: boolean;
}

export class SellerQuantity implements ISellerQuantity {
    sellerId?: number;
    quantity?: number;

    constructor(data?: ISellerQuantity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sellerId = _data["sellerId"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): SellerQuantity {
        data = typeof data === 'object' ? data : {};
        let result = new SellerQuantity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sellerId"] = this.sellerId;
        data["quantity"] = this.quantity;
        return data;
    }
}

export interface ISellerQuantity {
    sellerId?: number;
    quantity?: number;
}

export class SkuPrice implements ISkuPrice {
    sku?: number;
    price?: number;
    productId?: number | undefined;

    constructor(data?: ISkuPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sku = _data["sku"];
            this.price = _data["price"];
            this.productId = _data["productId"];
        }
    }

    static fromJS(data: any): SkuPrice {
        data = typeof data === 'object' ? data : {};
        let result = new SkuPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sku"] = this.sku;
        data["price"] = this.price;
        data["productId"] = this.productId;
        return data;
    }
}

export interface ISkuPrice {
    sku?: number;
    price?: number;
    productId?: number | undefined;
}

export class ActionResult implements IActionResult {

    constructor(data?: IActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new ActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IActionResult {
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class ApiError implements IApiError {
    code?: string | undefined;
    message?: string | undefined;

    constructor(data?: IApiError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ApiError {
        data = typeof data === 'object' ? data : {};
        let result = new ApiError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        return data;
    }
}

export interface IApiError {
    code?: string | undefined;
    message?: string | undefined;
}

}