//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming



export class PayPalCheckoutData implements IPayPalCheckoutData {
    nonce?: string | undefined;
    /** "OrderId" from Paypal for ExpressToken column in Transaction table. */
    token?: string | undefined;
    email?: string | undefined;
    address?: AddressBook;
    billingAddress?: AddressBook;
    /** Unique id from dbo.User to identify owner, not to mix with different user's paypal data when switching between users. */
    externalUserId?: string | undefined;
    /** Expiration time for cookie. */
    expires?: Date;

    constructor(data?: IPayPalCheckoutData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nonce = _data["nonce"];
            this.token = _data["token"];
            this.email = _data["email"];
            this.address = _data["address"] ? AddressBook.fromJS(_data["address"]) : <any>undefined;
            this.billingAddress = _data["billingAddress"] ? AddressBook.fromJS(_data["billingAddress"]) : <any>undefined;
            this.externalUserId = _data["externalUserId"];
            this.expires = _data["expires"] ? new Date(_data["expires"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PayPalCheckoutData {
        data = typeof data === 'object' ? data : {};
        let result = new PayPalCheckoutData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nonce"] = this.nonce;
        data["token"] = this.token;
        data["email"] = this.email;
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["billingAddress"] = this.billingAddress ? this.billingAddress.toJSON() : <any>undefined;
        data["externalUserId"] = this.externalUserId;
        data["expires"] = this.expires ? this.expires.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPayPalCheckoutData {
    nonce?: string | undefined;
    /** "OrderId" from Paypal for ExpressToken column in Transaction table. */
    token?: string | undefined;
    email?: string | undefined;
    address?: AddressBook;
    billingAddress?: AddressBook;
    /** Unique id from dbo.User to identify owner, not to mix with different user's paypal data when switching between users. */
    externalUserId?: string | undefined;
    /** Expiration time for cookie. */
    expires?: Date;
}

/** An Entity Framework data model for the PDT.CatalogGroup table. */
export class CatalogGroup implements ICatalogGroup {
    /** Gets or sets the PDT.CatalogGroup.CatalogGroupId. */
    catalogGroupId?: number;
    /** Gets or sets the PDT.CatalogGroup.CatalogGroupName. */
    catalogGroupName?: string | undefined;
    /** Gets or sets the url-formatted version of CategoryName. */
    urlName?: string | undefined;

    constructor(data?: ICatalogGroup) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.catalogGroupId = _data["catalogGroupId"];
            this.catalogGroupName = _data["catalogGroupName"];
            this.urlName = _data["urlName"];
        }
    }

    static fromJS(data: any): CatalogGroup {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogGroup();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["catalogGroupId"] = this.catalogGroupId;
        data["catalogGroupName"] = this.catalogGroupName;
        data["urlName"] = this.urlName;
        return data;
    }
}

/** An Entity Framework data model for the PDT.CatalogGroup table. */
export interface ICatalogGroup {
    /** Gets or sets the PDT.CatalogGroup.CatalogGroupId. */
    catalogGroupId?: number;
    /** Gets or sets the PDT.CatalogGroup.CatalogGroupName. */
    catalogGroupName?: string | undefined;
    /** Gets or sets the url-formatted version of CategoryName. */
    urlName?: string | undefined;
}

export class CatalogGroupApiResult implements ICatalogGroupApiResult {
    errors?: ApiError[] | undefined;
    results?: CatalogGroup[] | undefined;
    result?: CatalogGroup;

    constructor(data?: ICatalogGroupApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(CatalogGroup.fromJS(item));
            }
            this.result = _data["result"] ? CatalogGroup.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CatalogGroupApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new CatalogGroupApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICatalogGroupApiResult {
    errors?: ApiError[] | undefined;
    results?: CatalogGroup[] | undefined;
    result?: CatalogGroup;
}

/** An object representing a category/ product line on the marketplace. */
export class Category implements ICategory {
    /** Gets or sets the PDT.Category.CategoryId. */
    categoryId?: number;
    /** Gets or sets the PDT.CategoryCatalogGroup.CatalogGroupId. */
    catalogGroupId?: number;
    /** Gets or sets the PDT.Category.CategoryName. */
    categoryName?: string | undefined;
    /** Gets or sets the PDT.Category.DisplayName. */
    displayName?: string | undefined;
    /** Gets or sets the url-formatted version of CategoryName. */
    urlName?: string | undefined;
    /** Gets or sets the PDT.Category.CategoryDescription. */
    categoryDescription?: string | undefined;
    /** Gets or sets the PDT.Category.CategoryPageTitle. */
    categoryPageTitle?: string | undefined;
    /** Gets or sets the PDT.Category.MPCanSearch. */
    mpCanSearch?: boolean;

    constructor(data?: ICategory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.categoryId = _data["categoryId"];
            this.catalogGroupId = _data["catalogGroupId"];
            this.categoryName = _data["categoryName"];
            this.displayName = _data["displayName"];
            this.urlName = _data["urlName"];
            this.categoryDescription = _data["categoryDescription"];
            this.categoryPageTitle = _data["categoryPageTitle"];
            this.mpCanSearch = _data["mpCanSearch"];
        }
    }

    static fromJS(data: any): Category {
        data = typeof data === 'object' ? data : {};
        let result = new Category();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryId"] = this.categoryId;
        data["catalogGroupId"] = this.catalogGroupId;
        data["categoryName"] = this.categoryName;
        data["displayName"] = this.displayName;
        data["urlName"] = this.urlName;
        data["categoryDescription"] = this.categoryDescription;
        data["categoryPageTitle"] = this.categoryPageTitle;
        data["mpCanSearch"] = this.mpCanSearch;
        return data;
    }
}

/** An object representing a category/ product line on the marketplace. */
export interface ICategory {
    /** Gets or sets the PDT.Category.CategoryId. */
    categoryId?: number;
    /** Gets or sets the PDT.CategoryCatalogGroup.CatalogGroupId. */
    catalogGroupId?: number;
    /** Gets or sets the PDT.Category.CategoryName. */
    categoryName?: string | undefined;
    /** Gets or sets the PDT.Category.DisplayName. */
    displayName?: string | undefined;
    /** Gets or sets the url-formatted version of CategoryName. */
    urlName?: string | undefined;
    /** Gets or sets the PDT.Category.CategoryDescription. */
    categoryDescription?: string | undefined;
    /** Gets or sets the PDT.Category.CategoryPageTitle. */
    categoryPageTitle?: string | undefined;
    /** Gets or sets the PDT.Category.MPCanSearch. */
    mpCanSearch?: boolean;
}

export class CategoryApiResult implements ICategoryApiResult {
    errors?: ApiError[] | undefined;
    results?: Category[] | undefined;
    result?: Category;

    constructor(data?: ICategoryApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(Category.fromJS(item));
            }
            this.result = _data["result"] ? Category.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CategoryApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new CategoryApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICategoryApiResult {
    errors?: ApiError[] | undefined;
    results?: Category[] | undefined;
    result?: Category;
}

/** An object representing a set name on the marketplace. */
export class SetName implements ISetName {
    /** Gets or sets the PDT.SetName.SetNameId. */
    setNameId?: number;
    /** Gets or sets the PDT.SetName.CategoryId. */
    categoryId?: number;
    /** Gets or sets the PDT.SetName.Name. */
    name?: string | undefined;
    /** Gets or sets the PDT.SetName.CleanSetName. */
    cleanSetName?: string | undefined;
    /** Gets or sets the url-formatted version of SetName. */
    urlName?: string | undefined;
    /** Gets or sets the PDT.SetName.Abbreviation. */
    abbreviation?: string | undefined;
    /** Gets or sets the PDT.SetName.ReleaseDate. */
    releaseDate?: Date | undefined;
    /** Gets or sets the PDT.SetName.Active. */
    active?: boolean;
    /** Gets or sets the PDT.SetDescription.SetDescription. */
    setDescription?: string | undefined;

    constructor(data?: ISetName) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.setNameId = _data["setNameId"];
            this.categoryId = _data["categoryId"];
            this.name = _data["name"];
            this.cleanSetName = _data["cleanSetName"];
            this.urlName = _data["urlName"];
            this.abbreviation = _data["abbreviation"];
            this.releaseDate = _data["releaseDate"] ? new Date(_data["releaseDate"].toString()) : <any>undefined;
            this.active = _data["active"];
            this.setDescription = _data["setDescription"];
        }
    }

    static fromJS(data: any): SetName {
        data = typeof data === 'object' ? data : {};
        let result = new SetName();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["setNameId"] = this.setNameId;
        data["categoryId"] = this.categoryId;
        data["name"] = this.name;
        data["cleanSetName"] = this.cleanSetName;
        data["urlName"] = this.urlName;
        data["abbreviation"] = this.abbreviation;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        data["active"] = this.active;
        data["setDescription"] = this.setDescription;
        return data;
    }
}

/** An object representing a set name on the marketplace. */
export interface ISetName {
    /** Gets or sets the PDT.SetName.SetNameId. */
    setNameId?: number;
    /** Gets or sets the PDT.SetName.CategoryId. */
    categoryId?: number;
    /** Gets or sets the PDT.SetName.Name. */
    name?: string | undefined;
    /** Gets or sets the PDT.SetName.CleanSetName. */
    cleanSetName?: string | undefined;
    /** Gets or sets the url-formatted version of SetName. */
    urlName?: string | undefined;
    /** Gets or sets the PDT.SetName.Abbreviation. */
    abbreviation?: string | undefined;
    /** Gets or sets the PDT.SetName.ReleaseDate. */
    releaseDate?: Date | undefined;
    /** Gets or sets the PDT.SetName.Active. */
    active?: boolean;
    /** Gets or sets the PDT.SetDescription.SetDescription. */
    setDescription?: string | undefined;
}

export class SetNameApiResult implements ISetNameApiResult {
    errors?: ApiError[] | undefined;
    results?: SetName[] | undefined;
    result?: SetName;

    constructor(data?: ISetNameApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(SetName.fromJS(item));
            }
            this.result = _data["result"] ? SetName.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SetNameApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new SetNameApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISetNameApiResult {
    errors?: ApiError[] | undefined;
    results?: SetName[] | undefined;
    result?: SetName;
}

export class AddressBook implements IAddressBook {
    addressBookId?: number;
    userId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    address1?: string | undefined;
    address2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipcode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    createdAt?: Date;
    isHidden?: boolean;
    lastUsedAt?: Date | undefined;
    easyPostShippingAddressId?: string | undefined;
    isVerifiedByEasyPost?: boolean;

    constructor(data?: IAddressBook) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addressBookId = _data["addressBookId"];
            this.userId = _data["userId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.address1 = _data["address1"];
            this.address2 = _data["address2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipcode = _data["zipcode"];
            this.country = _data["country"];
            this.phone = _data["phone"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.isHidden = _data["isHidden"];
            this.lastUsedAt = _data["lastUsedAt"] ? new Date(_data["lastUsedAt"].toString()) : <any>undefined;
            this.easyPostShippingAddressId = _data["easyPostShippingAddressId"];
            this.isVerifiedByEasyPost = _data["isVerifiedByEasyPost"];
        }
    }

    static fromJS(data: any): AddressBook {
        data = typeof data === 'object' ? data : {};
        let result = new AddressBook();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addressBookId"] = this.addressBookId;
        data["userId"] = this.userId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipcode"] = this.zipcode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["isHidden"] = this.isHidden;
        data["lastUsedAt"] = this.lastUsedAt ? this.lastUsedAt.toISOString() : <any>undefined;
        data["easyPostShippingAddressId"] = this.easyPostShippingAddressId;
        data["isVerifiedByEasyPost"] = this.isVerifiedByEasyPost;
        return data;
    }
}

export interface IAddressBook {
    addressBookId?: number;
    userId?: number;
    firstName?: string | undefined;
    lastName?: string | undefined;
    address1?: string | undefined;
    address2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipcode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
    createdAt?: Date;
    isHidden?: boolean;
    lastUsedAt?: Date | undefined;
    easyPostShippingAddressId?: string | undefined;
    isVerifiedByEasyPost?: boolean;
}

/** An Entity Framework data model for the dbo.CountryCode table. */
export class CountryCode implements ICountryCode {
    /** Gets or sets the Country Code. */
    code?: string | undefined;
    /** Gets or sets the Country Name. */
    countryName?: string | undefined;
    /** Gets or sets a value indicating whether this country is active within the system. */
    isActive?: number;
    /** Gets or sets a value indicating whether a country code is direct elligible */
    isDirect?: boolean;

    constructor(data?: ICountryCode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.countryName = _data["countryName"];
            this.isActive = _data["isActive"];
            this.isDirect = _data["isDirect"];
        }
    }

    static fromJS(data: any): CountryCode {
        data = typeof data === 'object' ? data : {};
        let result = new CountryCode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["countryName"] = this.countryName;
        data["isActive"] = this.isActive;
        data["isDirect"] = this.isDirect;
        return data;
    }
}

/** An Entity Framework data model for the dbo.CountryCode table. */
export interface ICountryCode {
    /** Gets or sets the Country Code. */
    code?: string | undefined;
    /** Gets or sets the Country Name. */
    countryName?: string | undefined;
    /** Gets or sets a value indicating whether this country is active within the system. */
    isActive?: number;
    /** Gets or sets a value indicating whether a country code is direct elligible */
    isDirect?: boolean;
}

export class CountryCodeApiResult implements ICountryCodeApiResult {
    errors?: ApiError[] | undefined;
    results?: CountryCode[] | undefined;
    result?: CountryCode;

    constructor(data?: ICountryCodeApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(CountryCode.fromJS(item));
            }
            this.result = _data["result"] ? CountryCode.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CountryCodeApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new CountryCodeApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICountryCodeApiResult {
    errors?: ApiError[] | undefined;
    results?: CountryCode[] | undefined;
    result?: CountryCode;
}

/** A class containing Direct information. */
export class DirectInfo implements IDirectInfo {
    /** Gets or sets a value indicating whether the user is eligible for TCG Direct. */
    isUserDirectEligible?: boolean;
    /** Gets or sets the Direct shipping threshold amount. */
    directShippingThreshold?: number | undefined;

    constructor(data?: IDirectInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isUserDirectEligible = _data["isUserDirectEligible"];
            this.directShippingThreshold = _data["directShippingThreshold"];
        }
    }

    static fromJS(data: any): DirectInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DirectInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isUserDirectEligible"] = this.isUserDirectEligible;
        data["directShippingThreshold"] = this.directShippingThreshold;
        return data;
    }
}

/** A class containing Direct information. */
export interface IDirectInfo {
    /** Gets or sets a value indicating whether the user is eligible for TCG Direct. */
    isUserDirectEligible?: boolean;
    /** Gets or sets the Direct shipping threshold amount. */
    directShippingThreshold?: number | undefined;
}

export class DirectInfoApiResult implements IDirectInfoApiResult {
    errors?: ApiError[] | undefined;
    results?: DirectInfo[] | undefined;
    result?: DirectInfo;

    constructor(data?: IDirectInfoApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(DirectInfo.fromJS(item));
            }
            this.result = _data["result"] ? DirectInfo.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DirectInfoApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new DirectInfoApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IDirectInfoApiResult {
    errors?: ApiError[] | undefined;
    results?: DirectInfo[] | undefined;
    result?: DirectInfo;
}

/** A class for listing the info about Gift Cards. */
export class GiftCardTemplate implements IGiftCardTemplate {
    /** Gets or sets the Id of this template design. */
    templateId?: number;
    /** Gets or sets the filename of the image used to display this gift card. */
    fileName?: string | undefined;
    /** Gets or sets the title used to describe this gift card. */
    displayName?: string | undefined;
    /** Gets or sets the order that this gift card template should appear in a list. */
    sortOrder?: number;
    /** Gets or sets a value indicating whether this template is active and able to be selected by the user. */
    isActive?: boolean;

    constructor(data?: IGiftCardTemplate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.templateId = _data["templateId"];
            this.fileName = _data["fileName"];
            this.displayName = _data["displayName"];
            this.sortOrder = _data["sortOrder"];
            this.isActive = _data["isActive"];
        }
    }

    static fromJS(data: any): GiftCardTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new GiftCardTemplate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["templateId"] = this.templateId;
        data["fileName"] = this.fileName;
        data["displayName"] = this.displayName;
        data["sortOrder"] = this.sortOrder;
        data["isActive"] = this.isActive;
        return data;
    }
}

/** A class for listing the info about Gift Cards. */
export interface IGiftCardTemplate {
    /** Gets or sets the Id of this template design. */
    templateId?: number;
    /** Gets or sets the filename of the image used to display this gift card. */
    fileName?: string | undefined;
    /** Gets or sets the title used to describe this gift card. */
    displayName?: string | undefined;
    /** Gets or sets the order that this gift card template should appear in a list. */
    sortOrder?: number;
    /** Gets or sets a value indicating whether this template is active and able to be selected by the user. */
    isActive?: boolean;
}

export class GiftCardTemplateApiResult implements IGiftCardTemplateApiResult {
    errors?: ApiError[] | undefined;
    results?: GiftCardTemplate[] | undefined;
    result?: GiftCardTemplate;

    constructor(data?: IGiftCardTemplateApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(GiftCardTemplate.fromJS(item));
            }
            this.result = _data["result"] ? GiftCardTemplate.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GiftCardTemplateApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new GiftCardTemplateApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGiftCardTemplateApiResult {
    errors?: ApiError[] | undefined;
    results?: GiftCardTemplate[] | undefined;
    result?: GiftCardTemplate;
}

/** An object representing the static content to display in the hero banner. */
export class HeroModel implements IHeroModel {
    /** Gets or sets the date and time that this content should go live. */
    publishDate?: Date;
    /** Gets or sets a value indicating whether the user is a subscriber. */
    isSubscriber?: boolean;
    /** Gets or sets the lead text for the hero banner. */
    lead?: string | undefined;
    /** Gets or sets the subheading text for the hero banner. */
    subheading?: string | undefined;
    /** Gets or sets the copy text for the hero banner. */
    content?: string | undefined;
    /** Gets or sets the text value for the hero banner button. */
    cta?: string | undefined;
    /** Gets or sets the url for the hero banner button. */
    link?: string | undefined;
    /** Gets or sets the alt text for the hero banner button. */
    altText?: string | undefined;
    /** Gets or sets the hero banner image. */
    bannerImage?: string | undefined;

    constructor(data?: IHeroModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.publishDate = _data["publishDate"] ? new Date(_data["publishDate"].toString()) : <any>undefined;
            this.isSubscriber = _data["isSubscriber"];
            this.lead = _data["lead"];
            this.subheading = _data["subheading"];
            this.content = _data["content"];
            this.cta = _data["cta"];
            this.link = _data["link"];
            this.altText = _data["altText"];
            this.bannerImage = _data["bannerImage"];
        }
    }

    static fromJS(data: any): HeroModel {
        data = typeof data === 'object' ? data : {};
        let result = new HeroModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publishDate"] = this.publishDate ? this.publishDate.toISOString() : <any>undefined;
        data["isSubscriber"] = this.isSubscriber;
        data["lead"] = this.lead;
        data["subheading"] = this.subheading;
        data["content"] = this.content;
        data["cta"] = this.cta;
        data["link"] = this.link;
        data["altText"] = this.altText;
        data["bannerImage"] = this.bannerImage;
        return data;
    }
}

/** An object representing the static content to display in the hero banner. */
export interface IHeroModel {
    /** Gets or sets the date and time that this content should go live. */
    publishDate?: Date;
    /** Gets or sets a value indicating whether the user is a subscriber. */
    isSubscriber?: boolean;
    /** Gets or sets the lead text for the hero banner. */
    lead?: string | undefined;
    /** Gets or sets the subheading text for the hero banner. */
    subheading?: string | undefined;
    /** Gets or sets the copy text for the hero banner. */
    content?: string | undefined;
    /** Gets or sets the text value for the hero banner button. */
    cta?: string | undefined;
    /** Gets or sets the url for the hero banner button. */
    link?: string | undefined;
    /** Gets or sets the alt text for the hero banner button. */
    altText?: string | undefined;
    /** Gets or sets the hero banner image. */
    bannerImage?: string | undefined;
}

/** Represents information about a TCGplayer Kickback. */
export class KickbackAlert implements IKickbackAlert {
    kickbackInfo?: KickbackInfo;
    /** Gets or sets the Help Url for Kickbacks. */
    helpUrl?: string | undefined;

    constructor(data?: IKickbackAlert) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kickbackInfo = _data["kickbackInfo"] ? KickbackInfo.fromJS(_data["kickbackInfo"]) : <any>undefined;
            this.helpUrl = _data["helpUrl"];
        }
    }

    static fromJS(data: any): KickbackAlert {
        data = typeof data === 'object' ? data : {};
        let result = new KickbackAlert();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kickbackInfo"] = this.kickbackInfo ? this.kickbackInfo.toJSON() : <any>undefined;
        data["helpUrl"] = this.helpUrl;
        return data;
    }
}

/** Represents information about a TCGplayer Kickback. */
export interface IKickbackAlert {
    kickbackInfo?: KickbackInfo;
    /** Gets or sets the Help Url for Kickbacks. */
    helpUrl?: string | undefined;
}

export class KickbackAlertApiResult implements IKickbackAlertApiResult {
    errors?: ApiError[] | undefined;
    results?: KickbackAlert[] | undefined;
    result?: KickbackAlert;

    constructor(data?: IKickbackAlertApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(KickbackAlert.fromJS(item));
            }
            this.result = _data["result"] ? KickbackAlert.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): KickbackAlertApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new KickbackAlertApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IKickbackAlertApiResult {
    errors?: ApiError[] | undefined;
    results?: KickbackAlert[] | undefined;
    result?: KickbackAlert;
}

/** An object representing the static content to display in the large promo banner. */
export class LargePromo implements ILargePromo {
    /** Gets or sets the date and time that this content should go live. */
    publishDate?: Date;
    /** Gets or sets a value indicating whether the user is a subscriber. */
    isSubscriber?: boolean;
    /** Gets or sets the link url for the large promo banner. */
    link?: string | undefined;
    /** Gets or sets the image for the large promo banner. */
    image?: string | undefined;
    /** Gets or sets the alt text for the large promo banner image. */
    alt?: string | undefined;

    constructor(data?: ILargePromo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.publishDate = _data["publishDate"] ? new Date(_data["publishDate"].toString()) : <any>undefined;
            this.isSubscriber = _data["isSubscriber"];
            this.link = _data["link"];
            this.image = _data["image"];
            this.alt = _data["alt"];
        }
    }

    static fromJS(data: any): LargePromo {
        data = typeof data === 'object' ? data : {};
        let result = new LargePromo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publishDate"] = this.publishDate ? this.publishDate.toISOString() : <any>undefined;
        data["isSubscriber"] = this.isSubscriber;
        data["link"] = this.link;
        data["image"] = this.image;
        data["alt"] = this.alt;
        return data;
    }
}

/** An object representing the static content to display in the large promo banner. */
export interface ILargePromo {
    /** Gets or sets the date and time that this content should go live. */
    publishDate?: Date;
    /** Gets or sets a value indicating whether the user is a subscriber. */
    isSubscriber?: boolean;
    /** Gets or sets the link url for the large promo banner. */
    link?: string | undefined;
    /** Gets or sets the image for the large promo banner. */
    image?: string | undefined;
    /** Gets or sets the alt text for the large promo banner image. */
    alt?: string | undefined;
}

/** An object used for passing user credentials and recaptcha data */
export class CreatePasswordData implements ICreatePasswordData {
    /** Gets or sets the value for the user's new password */
    newPassword?: string | undefined;
    /** Gets or sets the user's change request key */
    changePasswordRequestKey?: string | undefined;

    constructor(data?: ICreatePasswordData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.newPassword = _data["newPassword"];
            this.changePasswordRequestKey = _data["changePasswordRequestKey"];
        }
    }

    static fromJS(data: any): CreatePasswordData {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePasswordData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["newPassword"] = this.newPassword;
        data["changePasswordRequestKey"] = this.changePasswordRequestKey;
        return data;
    }
}

/** An object used for passing user credentials and recaptcha data */
export interface ICreatePasswordData {
    /** Gets or sets the value for the user's new password */
    newPassword?: string | undefined;
    /** Gets or sets the user's change request key */
    changePasswordRequestKey?: string | undefined;
}

/** An object used for passing user credentials */
export class Credentials implements ICredentials {
    /** Gets or sets the username. */
    username?: string | undefined;
    /** Gets or sets the password. */
    password?: string | undefined;
    /** Gets or sets the email address. */
    email?: string | undefined;
    /** Gets or sets a value indicating whether the credentials are for a guest user. */
    isGuest?: boolean;
    /** Gets or sets token to be used to validate the captcha */
    captchaToken?: string | undefined;

    constructor(data?: ICredentials) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.isGuest = _data["isGuest"];
            this.captchaToken = _data["captchaToken"];
        }
    }

    static fromJS(data: any): Credentials {
        data = typeof data === 'object' ? data : {};
        let result = new Credentials();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["isGuest"] = this.isGuest;
        data["captchaToken"] = this.captchaToken;
        return data;
    }
}

/** An object used for passing user credentials */
export interface ICredentials {
    /** Gets or sets the username. */
    username?: string | undefined;
    /** Gets or sets the password. */
    password?: string | undefined;
    /** Gets or sets the email address. */
    email?: string | undefined;
    /** Gets or sets a value indicating whether the credentials are for a guest user. */
    isGuest?: boolean;
    /** Gets or sets token to be used to validate the captcha */
    captchaToken?: string | undefined;
}

/** Does a thing */
export class ForgotPasswordData implements IForgotPasswordData {
    /** Gets or sets For a thing */
    emailAddress?: string | undefined;
    /** Gets or sets With a thing */
    uniqueKey?: string | undefined;

    constructor(data?: IForgotPasswordData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.uniqueKey = _data["uniqueKey"];
        }
    }

    static fromJS(data: any): ForgotPasswordData {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["uniqueKey"] = this.uniqueKey;
        return data;
    }
}

/** Does a thing */
export interface IForgotPasswordData {
    /** Gets or sets For a thing */
    emailAddress?: string | undefined;
    /** Gets or sets With a thing */
    uniqueKey?: string | undefined;
}

export class ForgotPasswordDataApiResult implements IForgotPasswordDataApiResult {
    errors?: ApiError[] | undefined;
    results?: ForgotPasswordData[] | undefined;
    result?: ForgotPasswordData;

    constructor(data?: IForgotPasswordDataApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(ForgotPasswordData.fromJS(item));
            }
            this.result = _data["result"] ? ForgotPasswordData.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ForgotPasswordDataApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new ForgotPasswordDataApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IForgotPasswordDataApiResult {
    errors?: ApiError[] | undefined;
    results?: ForgotPasswordData[] | undefined;
    result?: ForgotPasswordData;
}

/** An object for passing the change password request id */
export class ResendActivateAccountData implements IResendActivateAccountData {
    /** Gets or sets the value for the change password request id */
    requestId?: string | undefined;

    constructor(data?: IResendActivateAccountData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.requestId = _data["requestId"];
        }
    }

    static fromJS(data: any): ResendActivateAccountData {
        data = typeof data === 'object' ? data : {};
        let result = new ResendActivateAccountData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["requestId"] = this.requestId;
        return data;
    }
}

/** An object for passing the change password request id */
export interface IResendActivateAccountData {
    /** Gets or sets the value for the change password request id */
    requestId?: string | undefined;
}

/** An object used for passing verification credentials */
export class VerificationData implements IVerificationData {
    /** Gets or sets One Time Password (6-digit code) */
    oneTimePassword?: string | undefined;
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets password */
    password?: string | undefined;

    constructor(data?: IVerificationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oneTimePassword = _data["oneTimePassword"];
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): VerificationData {
        data = typeof data === 'object' ? data : {};
        let result = new VerificationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oneTimePassword"] = this.oneTimePassword;
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

/** An object used for passing verification credentials */
export interface IVerificationData {
    /** Gets or sets One Time Password (6-digit code) */
    oneTimePassword?: string | undefined;
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets password */
    password?: string | undefined;
}

/** A class that contains information about a condition. */
export class MassEntryCondition implements IMassEntryCondition {
    /** Gets or sets the Id of the condition. */
    superConditionId?: number;
    /** Gets or sets the name of the condition. */
    name?: string | undefined;

    constructor(data?: IMassEntryCondition) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.superConditionId = _data["superConditionId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): MassEntryCondition {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryCondition();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["superConditionId"] = this.superConditionId;
        data["name"] = this.name;
        return data;
    }
}

/** A class that contains information about a condition. */
export interface IMassEntryCondition {
    /** Gets or sets the Id of the condition. */
    superConditionId?: number;
    /** Gets or sets the name of the condition. */
    name?: string | undefined;
}

export class MassEntryConditionApiResult implements IMassEntryConditionApiResult {
    errors?: ApiError[] | undefined;
    results?: MassEntryCondition[] | undefined;
    result?: MassEntryCondition;

    constructor(data?: IMassEntryConditionApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(MassEntryCondition.fromJS(item));
            }
            this.result = _data["result"] ? MassEntryCondition.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MassEntryConditionApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryConditionApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMassEntryConditionApiResult {
    errors?: ApiError[] | undefined;
    results?: MassEntryCondition[] | undefined;
    result?: MassEntryCondition;
}

export class MassEntryConditionApiResultActionResult implements IMassEntryConditionApiResultActionResult {
    result?: ActionResult;
    value?: MassEntryConditionApiResult;

    constructor(data?: IMassEntryConditionApiResultActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"] ? MassEntryConditionApiResult.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MassEntryConditionApiResultActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryConditionApiResultActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMassEntryConditionApiResultActionResult {
    result?: ActionResult;
    value?: MassEntryConditionApiResult;
}

/** A class containig printing information. */
export class MassEntryPrinting implements IMassEntryPrinting {
    /** Gets or sets the Printing Id. */
    printingId?: number;
    /** Gets or sets the printing name. */
    name?: string | undefined;

    constructor(data?: IMassEntryPrinting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.printingId = _data["printingId"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): MassEntryPrinting {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryPrinting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["printingId"] = this.printingId;
        data["name"] = this.name;
        return data;
    }
}

/** A class containig printing information. */
export interface IMassEntryPrinting {
    /** Gets or sets the Printing Id. */
    printingId?: number;
    /** Gets or sets the printing name. */
    name?: string | undefined;
}

export class MassEntryPrintingApiResult implements IMassEntryPrintingApiResult {
    errors?: ApiError[] | undefined;
    results?: MassEntryPrinting[] | undefined;
    result?: MassEntryPrinting;

    constructor(data?: IMassEntryPrintingApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(MassEntryPrinting.fromJS(item));
            }
            this.result = _data["result"] ? MassEntryPrinting.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MassEntryPrintingApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryPrintingApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMassEntryPrintingApiResult {
    errors?: ApiError[] | undefined;
    results?: MassEntryPrinting[] | undefined;
    result?: MassEntryPrinting;
}

export class MassEntryPrintingApiResultActionResult implements IMassEntryPrintingApiResultActionResult {
    result?: ActionResult;
    value?: MassEntryPrintingApiResult;

    constructor(data?: IMassEntryPrintingApiResultActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"] ? MassEntryPrintingApiResult.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MassEntryPrintingApiResultActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryPrintingApiResultActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMassEntryPrintingApiResultActionResult {
    result?: ActionResult;
    value?: MassEntryPrintingApiResult;
}

/** A model for holding mass entry card information. */
export class MassEntryProduct implements IMassEntryProduct {
    /** Gets or sets the name of the card. */
    cardName?: string | undefined;
    /** Gets or sets the quantity of the card. */
    quantity?: number;

    constructor(data?: IMassEntryProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cardName = _data["cardName"];
            this.quantity = _data["quantity"];
        }
    }

    static fromJS(data: any): MassEntryProduct {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cardName"] = this.cardName;
        data["quantity"] = this.quantity;
        return data;
    }
}

/** A model for holding mass entry card information. */
export interface IMassEntryProduct {
    /** Gets or sets the name of the card. */
    cardName?: string | undefined;
    /** Gets or sets the quantity of the card. */
    quantity?: number;
}

export class MassEntryProductApiResult implements IMassEntryProductApiResult {
    errors?: ApiError[] | undefined;
    results?: MassEntryProduct[] | undefined;
    result?: MassEntryProduct;

    constructor(data?: IMassEntryProductApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(MassEntryProduct.fromJS(item));
            }
            this.result = _data["result"] ? MassEntryProduct.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MassEntryProductApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryProductApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMassEntryProductApiResult {
    errors?: ApiError[] | undefined;
    results?: MassEntryProduct[] | undefined;
    result?: MassEntryProduct;
}

export class MassEntryProductApiResultActionResult implements IMassEntryProductApiResultActionResult {
    result?: ActionResult;
    value?: MassEntryProductApiResult;

    constructor(data?: IMassEntryProductApiResultActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"] ? MassEntryProductApiResult.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MassEntryProductApiResultActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryProductApiResultActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMassEntryProductApiResultActionResult {
    result?: ActionResult;
    value?: MassEntryProductApiResult;
}

/** A class containig product line (category) information. */
export class MassEntryProductLine implements IMassEntryProductLine {
    /** Gets or sets the ProductLineId (CategoryId). */
    productLineId?: number;
    /** Gets or sets the name of the product line. */
    name?: string | undefined;
    /** Gets or sets the display name of the product line. */
    displayName?: string | undefined;

    constructor(data?: IMassEntryProductLine) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productLineId = _data["productLineId"];
            this.name = _data["name"];
            this.displayName = _data["displayName"];
        }
    }

    static fromJS(data: any): MassEntryProductLine {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryProductLine();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productLineId"] = this.productLineId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        return data;
    }
}

/** A class containig product line (category) information. */
export interface IMassEntryProductLine {
    /** Gets or sets the ProductLineId (CategoryId). */
    productLineId?: number;
    /** Gets or sets the name of the product line. */
    name?: string | undefined;
    /** Gets or sets the display name of the product line. */
    displayName?: string | undefined;
}

export class MassEntryProductLineApiResult implements IMassEntryProductLineApiResult {
    errors?: ApiError[] | undefined;
    results?: MassEntryProductLine[] | undefined;
    result?: MassEntryProductLine;

    constructor(data?: IMassEntryProductLineApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(MassEntryProductLine.fromJS(item));
            }
            this.result = _data["result"] ? MassEntryProductLine.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MassEntryProductLineApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryProductLineApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMassEntryProductLineApiResult {
    errors?: ApiError[] | undefined;
    results?: MassEntryProductLine[] | undefined;
    result?: MassEntryProductLine;
}

export class MassEntryProductLineApiResultActionResult implements IMassEntryProductLineApiResultActionResult {
    result?: ActionResult;
    value?: MassEntryProductLineApiResult;

    constructor(data?: IMassEntryProductLineApiResultActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"] ? MassEntryProductLineApiResult.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MassEntryProductLineApiResultActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntryProductLineApiResultActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMassEntryProductLineApiResultActionResult {
    result?: ActionResult;
    value?: MassEntryProductLineApiResult;
}

/** A model for holding mass entry set information. */
export class MassEntrySet implements IMassEntrySet {
    /** Gets or sets the name of the set. */
    name?: string | undefined;
    /** Gets or sets the code (abbreviation) of the set. */
    code?: string | undefined;

    constructor(data?: IMassEntrySet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): MassEntrySet {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntrySet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["code"] = this.code;
        return data;
    }
}

/** A model for holding mass entry set information. */
export interface IMassEntrySet {
    /** Gets or sets the name of the set. */
    name?: string | undefined;
    /** Gets or sets the code (abbreviation) of the set. */
    code?: string | undefined;
}

export class MassEntrySetApiResult implements IMassEntrySetApiResult {
    errors?: ApiError[] | undefined;
    results?: MassEntrySet[] | undefined;
    result?: MassEntrySet;

    constructor(data?: IMassEntrySetApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(MassEntrySet.fromJS(item));
            }
            this.result = _data["result"] ? MassEntrySet.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MassEntrySetApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntrySetApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMassEntrySetApiResult {
    errors?: ApiError[] | undefined;
    results?: MassEntrySet[] | undefined;
    result?: MassEntrySet;
}

export class MassEntrySetApiResultActionResult implements IMassEntrySetApiResultActionResult {
    result?: ActionResult;
    value?: MassEntrySetApiResult;

    constructor(data?: IMassEntrySetApiResultActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"] ? MassEntrySetApiResult.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MassEntrySetApiResultActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new MassEntrySetApiResultActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMassEntrySetApiResultActionResult {
    result?: ActionResult;
    value?: MassEntrySetApiResult;
}

/** Price points for TCG Market Price, Buylist Market Price, and the Listed Median. */
export class MarketplacePricePoints implements IMarketplacePricePoints {
    /** This price point is compiled from recent sales completed on TCGplayer.com */
    normalMarketPrice?: number | undefined;
    /** This price point is compiled from recent sales of foil cards completed on TCGplayer.com */
    foilMarketPrice?: number | undefined;
    /** This price point is based on recently processed and completed purchases of cards through the TCGplayer Buylist */
    normalBuylistMarketPrice?: number | undefined;
    /** This price point is based on recently processed and completed purchases of foil cards through the TCGplayer Buylist */
    foilBuylistMarketPrice?: number | undefined;
    /** This is the median from all listed prices for a product based on listed prices only */
    normalMedianPrice?: number | undefined;
    /** This is the median from all listed prices for a foil version of this product based on listed prices only */
    foilMedianPrice?: number | undefined;

    constructor(data?: IMarketplacePricePoints) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.normalMarketPrice = _data["normalMarketPrice"];
            this.foilMarketPrice = _data["foilMarketPrice"];
            this.normalBuylistMarketPrice = _data["normalBuylistMarketPrice"];
            this.foilBuylistMarketPrice = _data["foilBuylistMarketPrice"];
            this.normalMedianPrice = _data["normalMedianPrice"];
            this.foilMedianPrice = _data["foilMedianPrice"];
        }
    }

    static fromJS(data: any): MarketplacePricePoints {
        data = typeof data === 'object' ? data : {};
        let result = new MarketplacePricePoints();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["normalMarketPrice"] = this.normalMarketPrice;
        data["foilMarketPrice"] = this.foilMarketPrice;
        data["normalBuylistMarketPrice"] = this.normalBuylistMarketPrice;
        data["foilBuylistMarketPrice"] = this.foilBuylistMarketPrice;
        data["normalMedianPrice"] = this.normalMedianPrice;
        data["foilMedianPrice"] = this.foilMedianPrice;
        return data;
    }
}

/** Price points for TCG Market Price, Buylist Market Price, and the Listed Median. */
export interface IMarketplacePricePoints {
    /** This price point is compiled from recent sales completed on TCGplayer.com */
    normalMarketPrice?: number | undefined;
    /** This price point is compiled from recent sales of foil cards completed on TCGplayer.com */
    foilMarketPrice?: number | undefined;
    /** This price point is based on recently processed and completed purchases of cards through the TCGplayer Buylist */
    normalBuylistMarketPrice?: number | undefined;
    /** This price point is based on recently processed and completed purchases of foil cards through the TCGplayer Buylist */
    foilBuylistMarketPrice?: number | undefined;
    /** This is the median from all listed prices for a product based on listed prices only */
    normalMedianPrice?: number | undefined;
    /** This is the median from all listed prices for a foil version of this product based on listed prices only */
    foilMedianPrice?: number | undefined;
}

export class MarketplacePricePointsApiResult implements IMarketplacePricePointsApiResult {
    errors?: ApiError[] | undefined;
    results?: MarketplacePricePoints[] | undefined;
    result?: MarketplacePricePoints;

    constructor(data?: IMarketplacePricePointsApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(MarketplacePricePoints.fromJS(item));
            }
            this.result = _data["result"] ? MarketplacePricePoints.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MarketplacePricePointsApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new MarketplacePricePointsApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMarketplacePricePointsApiResult {
    errors?: ApiError[] | undefined;
    results?: MarketplacePricePoints[] | undefined;
    result?: MarketplacePricePoints;
}

/** Request body object for sales history filters. */
export class SalesHistoryFilters implements ISalesHistoryFilters {
    /** List of IDs for condition. */
    conditions?: number[] | undefined;
    /** List of IDs for languages. */
    languages?: number[] | undefined;
    /** List of IDs for variants. */
    variants?: number[] | undefined;
    /** String to match against the enum for listing types. I.E. "listos". */
    listingType?: string | undefined;
    /** The number of items to skip over as a form of pagination. */
    offset?: number | undefined;
    /** The maxinum number of items to retrieve. */
    limit?: number | undefined;
    /** This is a placeholder for the future. It will help keep the sales history in sync. */
    time?: number | undefined;

    constructor(data?: ISalesHistoryFilters) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["conditions"])) {
                this.conditions = [] as any;
                for (let item of _data["conditions"])
                    this.conditions!.push(item);
            }
            if (Array.isArray(_data["languages"])) {
                this.languages = [] as any;
                for (let item of _data["languages"])
                    this.languages!.push(item);
            }
            if (Array.isArray(_data["variants"])) {
                this.variants = [] as any;
                for (let item of _data["variants"])
                    this.variants!.push(item);
            }
            this.listingType = _data["listingType"];
            this.offset = _data["offset"];
            this.limit = _data["limit"];
            this.time = _data["time"];
        }
    }

    static fromJS(data: any): SalesHistoryFilters {
        data = typeof data === 'object' ? data : {};
        let result = new SalesHistoryFilters();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.conditions)) {
            data["conditions"] = [];
            for (let item of this.conditions)
                data["conditions"].push(item);
        }
        if (Array.isArray(this.languages)) {
            data["languages"] = [];
            for (let item of this.languages)
                data["languages"].push(item);
        }
        if (Array.isArray(this.variants)) {
            data["variants"] = [];
            for (let item of this.variants)
                data["variants"].push(item);
        }
        data["listingType"] = this.listingType;
        data["offset"] = this.offset;
        data["limit"] = this.limit;
        data["time"] = this.time;
        return data;
    }
}

/** Request body object for sales history filters. */
export interface ISalesHistoryFilters {
    /** List of IDs for condition. */
    conditions?: number[] | undefined;
    /** List of IDs for languages. */
    languages?: number[] | undefined;
    /** List of IDs for variants. */
    variants?: number[] | undefined;
    /** String to match against the enum for listing types. I.E. "listos". */
    listingType?: string | undefined;
    /** The number of items to skip over as a form of pagination. */
    offset?: number | undefined;
    /** The maxinum number of items to retrieve. */
    limit?: number | undefined;
    /** This is a placeholder for the future. It will help keep the sales history in sync. */
    time?: number | undefined;
}

/** Contents of the problem reported by the user */
export class TicketContents implements ITicketContents {
    /** This is the UserId of the user reporting the problem (null if user is not logged in) */
    userId?: number | undefined;
    /** This is the type of problem the user is reporting */
    type?: number;
    /** This is any additional comments the user included when reporting the problem */
    comments?: string | undefined;
    /** This is the page the request is coming from */
    originator?: string | undefined;
    /** Encrypted keo of the custom listing */
    customListingKey?: string | undefined;

    constructor(data?: ITicketContents) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.type = _data["type"];
            this.comments = _data["comments"];
            this.originator = _data["originator"];
            this.customListingKey = _data["customListingKey"];
        }
    }

    static fromJS(data: any): TicketContents {
        data = typeof data === 'object' ? data : {};
        let result = new TicketContents();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["type"] = this.type;
        data["comments"] = this.comments;
        data["originator"] = this.originator;
        data["customListingKey"] = this.customListingKey;
        return data;
    }
}

/** Contents of the problem reported by the user */
export interface ITicketContents {
    /** This is the UserId of the user reporting the problem (null if user is not logged in) */
    userId?: number | undefined;
    /** This is the type of problem the user is reporting */
    type?: number;
    /** This is any additional comments the user included when reporting the problem */
    comments?: string | undefined;
    /** This is the page the request is coming from */
    originator?: string | undefined;
    /** Encrypted keo of the custom listing */
    customListingKey?: string | undefined;
}

/** Response of the problem reported by the user */
export class TicketResponse implements ITicketResponse {
    /** This is result of trying to report the problem */
    success?: boolean;
    /** This is the message from trying to report the problem */
    message?: string | undefined;

    constructor(data?: ITicketResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.success = _data["success"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): TicketResponse {
        data = typeof data === 'object' ? data : {};
        let result = new TicketResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        data["message"] = this.message;
        return data;
    }
}

/** Response of the problem reported by the user */
export interface ITicketResponse {
    /** This is result of trying to report the problem */
    success?: boolean;
    /** This is the message from trying to report the problem */
    message?: string | undefined;
}

export class TicketResponseApiResult implements ITicketResponseApiResult {
    errors?: ApiError[] | undefined;
    results?: TicketResponse[] | undefined;
    result?: TicketResponse;

    constructor(data?: ITicketResponseApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(TicketResponse.fromJS(item));
            }
            this.result = _data["result"] ? TicketResponse.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TicketResponseApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new TicketResponseApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITicketResponseApiResult {
    errors?: ApiError[] | undefined;
    results?: TicketResponse[] | undefined;
    result?: TicketResponse;
}

/** An object representing the static content to display in the slim promo banner. */
export class PromoBanner implements IPromoBanner {
    /** Gets or sets the date and time that this content should go live. */
    publishDate?: Date;
    /** Gets or sets a value indicating whether the user is a subscriber. */
    isSubscriber?: boolean;
    /** Gets or sets the copy text for the slim promo banner. */
    copy?: string | undefined;
    /** Gets or sets the copy url for the slim promo banner. */
    copyUrl?: string | undefined;
    /** Gets or sets the link url for the slim promo banner. */
    linkUrl?: string | undefined;
    /** Gets or sets the link text for the slim promo banner. */
    linkText?: string | undefined;
    /** Gets or sets the theme for the slim promo banner. */
    theme?: string | undefined;
    /** Gets or sets the text alignment for the slim promo banner. */
    textAlign?: string | undefined;
    /** Gets or sets the text size for the slim promo banner. */
    textSize?: string | undefined;

    constructor(data?: IPromoBanner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.publishDate = _data["publishDate"] ? new Date(_data["publishDate"].toString()) : <any>undefined;
            this.isSubscriber = _data["isSubscriber"];
            this.copy = _data["copy"];
            this.copyUrl = _data["copyUrl"];
            this.linkUrl = _data["linkUrl"];
            this.linkText = _data["linkText"];
            this.theme = _data["theme"];
            this.textAlign = _data["textAlign"];
            this.textSize = _data["textSize"];
        }
    }

    static fromJS(data: any): PromoBanner {
        data = typeof data === 'object' ? data : {};
        let result = new PromoBanner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["publishDate"] = this.publishDate ? this.publishDate.toISOString() : <any>undefined;
        data["isSubscriber"] = this.isSubscriber;
        data["copy"] = this.copy;
        data["copyUrl"] = this.copyUrl;
        data["linkUrl"] = this.linkUrl;
        data["linkText"] = this.linkText;
        data["theme"] = this.theme;
        data["textAlign"] = this.textAlign;
        data["textSize"] = this.textSize;
        return data;
    }
}

/** An object representing the static content to display in the slim promo banner. */
export interface IPromoBanner {
    /** Gets or sets the date and time that this content should go live. */
    publishDate?: Date;
    /** Gets or sets a value indicating whether the user is a subscriber. */
    isSubscriber?: boolean;
    /** Gets or sets the copy text for the slim promo banner. */
    copy?: string | undefined;
    /** Gets or sets the copy url for the slim promo banner. */
    copyUrl?: string | undefined;
    /** Gets or sets the link url for the slim promo banner. */
    linkUrl?: string | undefined;
    /** Gets or sets the link text for the slim promo banner. */
    linkText?: string | undefined;
    /** Gets or sets the theme for the slim promo banner. */
    theme?: string | undefined;
    /** Gets or sets the text alignment for the slim promo banner. */
    textAlign?: string | undefined;
    /** Gets or sets the text size for the slim promo banner. */
    textSize?: string | undefined;
}

/** Relevant seller information with shipping options */
export class SellerDetails implements ISellerDetails {
    /** The unique ID of this seller */
    sellerId?: number;
    /** The unique key for this seller */
    sellerKey?: string | undefined;
    /** The publicly visible name of the store */
    displayName?: string | undefined;
    /** A value indicating whether this sellers is part of the TCGplayer Direct program */
    isDirect?: boolean;
    /** A value indicating whether this seller is gold star rated */
    isGoldStar?: boolean;
    /** A value indicating whether this seller is a certified hobby shop */
    isCertifiedHobbyShop?: boolean;
    /** The 90-day feedback rating for this seller as a percentage */
    rating?: number;
    /** The total sales volume for this seller */
    completedSalesRank?: string | undefined;
    /** List of Seller shipping options */
    sellerShippingOptions?: SellerShippingOption[] | undefined;

    constructor(data?: ISellerDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sellerId = _data["sellerId"];
            this.sellerKey = _data["sellerKey"];
            this.displayName = _data["displayName"];
            this.isDirect = _data["isDirect"];
            this.isGoldStar = _data["isGoldStar"];
            this.isCertifiedHobbyShop = _data["isCertifiedHobbyShop"];
            this.rating = _data["rating"];
            this.completedSalesRank = _data["completedSalesRank"];
            if (Array.isArray(_data["sellerShippingOptions"])) {
                this.sellerShippingOptions = [] as any;
                for (let item of _data["sellerShippingOptions"])
                    this.sellerShippingOptions!.push(SellerShippingOption.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SellerDetails {
        data = typeof data === 'object' ? data : {};
        let result = new SellerDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sellerId"] = this.sellerId;
        data["sellerKey"] = this.sellerKey;
        data["displayName"] = this.displayName;
        data["isDirect"] = this.isDirect;
        data["isGoldStar"] = this.isGoldStar;
        data["isCertifiedHobbyShop"] = this.isCertifiedHobbyShop;
        data["rating"] = this.rating;
        data["completedSalesRank"] = this.completedSalesRank;
        if (Array.isArray(this.sellerShippingOptions)) {
            data["sellerShippingOptions"] = [];
            for (let item of this.sellerShippingOptions)
                data["sellerShippingOptions"].push(item.toJSON());
        }
        return data;
    }
}

/** Relevant seller information with shipping options */
export interface ISellerDetails {
    /** The unique ID of this seller */
    sellerId?: number;
    /** The unique key for this seller */
    sellerKey?: string | undefined;
    /** The publicly visible name of the store */
    displayName?: string | undefined;
    /** A value indicating whether this sellers is part of the TCGplayer Direct program */
    isDirect?: boolean;
    /** A value indicating whether this seller is gold star rated */
    isGoldStar?: boolean;
    /** A value indicating whether this seller is a certified hobby shop */
    isCertifiedHobbyShop?: boolean;
    /** The 90-day feedback rating for this seller as a percentage */
    rating?: number;
    /** The total sales volume for this seller */
    completedSalesRank?: string | undefined;
    /** List of Seller shipping options */
    sellerShippingOptions?: SellerShippingOption[] | undefined;
}

export class SellerDetailsListApiResult implements ISellerDetailsListApiResult {
    errors?: ApiError[] | undefined;
    results?: SellerDetails[][] | undefined;
    result?: SellerDetails[] | undefined;

    constructor(data?: ISellerDetailsListApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(item);
            }
            if (Array.isArray(_data["result"])) {
                this.result = [] as any;
                for (let item of _data["result"])
                    this.result!.push(SellerDetails.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SellerDetailsListApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new SellerDetailsListApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item);
        }
        if (Array.isArray(this.result)) {
            data["result"] = [];
            for (let item of this.result)
                data["result"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISellerDetailsListApiResult {
    errors?: ApiError[] | undefined;
    results?: SellerDetails[][] | undefined;
    result?: SellerDetails[] | undefined;
}

/** An object representing a seller on the marketplace. */
export class SellerInfo implements ISellerInfo {
    /** Gets or sets the unique ID of this seller. */
    sellerId?: number;
    /** Gets or sets the publicly visible name of the store. */
    displayName?: string | undefined;
    /** Gets or sets the unique key for this seller. */
    sellerKey?: string | undefined;
    /** Gets or sets if the seller is live. */
    isLive?: boolean;
    /** Gets or sets a value indicating whether this sellers is part of the TCGplayer Direct program. */
    isDirect?: boolean;
    /** Gets or sets a value indicating whether this seller is gold star rated. */
    isGoldStar?: boolean;
    /** Gets or sets a value indicating whether this seller is a certified hobby shop. */
    isCertifiedHobbyShop?: boolean;
    /** Gets or sets the 90-day feedback rating for this seller as a percentage. */
    rating?: number;
    /** Gets or sets the total sales volumn for this seller. */
    completedSalesRank?: string | undefined;

    constructor(data?: ISellerInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sellerId = _data["sellerId"];
            this.displayName = _data["displayName"];
            this.sellerKey = _data["sellerKey"];
            this.isLive = _data["isLive"];
            this.isDirect = _data["isDirect"];
            this.isGoldStar = _data["isGoldStar"];
            this.isCertifiedHobbyShop = _data["isCertifiedHobbyShop"];
            this.rating = _data["rating"];
            this.completedSalesRank = _data["completedSalesRank"];
        }
    }

    static fromJS(data: any): SellerInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SellerInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sellerId"] = this.sellerId;
        data["displayName"] = this.displayName;
        data["sellerKey"] = this.sellerKey;
        data["isLive"] = this.isLive;
        data["isDirect"] = this.isDirect;
        data["isGoldStar"] = this.isGoldStar;
        data["isCertifiedHobbyShop"] = this.isCertifiedHobbyShop;
        data["rating"] = this.rating;
        data["completedSalesRank"] = this.completedSalesRank;
        return data;
    }
}

/** An object representing a seller on the marketplace. */
export interface ISellerInfo {
    /** Gets or sets the unique ID of this seller. */
    sellerId?: number;
    /** Gets or sets the publicly visible name of the store. */
    displayName?: string | undefined;
    /** Gets or sets the unique key for this seller. */
    sellerKey?: string | undefined;
    /** Gets or sets if the seller is live. */
    isLive?: boolean;
    /** Gets or sets a value indicating whether this sellers is part of the TCGplayer Direct program. */
    isDirect?: boolean;
    /** Gets or sets a value indicating whether this seller is gold star rated. */
    isGoldStar?: boolean;
    /** Gets or sets a value indicating whether this seller is a certified hobby shop. */
    isCertifiedHobbyShop?: boolean;
    /** Gets or sets the 90-day feedback rating for this seller as a percentage. */
    rating?: number;
    /** Gets or sets the total sales volumn for this seller. */
    completedSalesRank?: string | undefined;
}

export class SellerInfoApiResult implements ISellerInfoApiResult {
    errors?: ApiError[] | undefined;
    results?: SellerInfo[] | undefined;
    result?: SellerInfo;

    constructor(data?: ISellerInfoApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(SellerInfo.fromJS(item));
            }
            this.result = _data["result"] ? SellerInfo.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SellerInfoApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new SellerInfoApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISellerInfoApiResult {
    errors?: ApiError[] | undefined;
    results?: SellerInfo[] | undefined;
    result?: SellerInfo;
}

/** Seller Shipping Option info */
export class SellerShippingOption implements ISellerShippingOption {
    /** The identifier for this shipping option */
    shippingMethodCode?: string | undefined;
    /** The name portion of the Description */
    name?: string | undefined;
    /** The timeframe portion of the Description */
    timeFrame?: string | undefined;
    /** The display text for this option */
    description?: string | undefined;
    /** The price at which the shipping changes to “over threshold” */
    thresholdPrice?: number;
    /** The shipping price for subtotals less than threshold price */
    shippingPriceUnderThreshold?: number;
    /** The shipping price for subtotals >= threshold price (may be $0.00 for free shipping) */
    shippingPriceOverThreshold?: number;

    constructor(data?: ISellerShippingOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.shippingMethodCode = _data["shippingMethodCode"];
            this.name = _data["name"];
            this.timeFrame = _data["timeFrame"];
            this.description = _data["description"];
            this.thresholdPrice = _data["thresholdPrice"];
            this.shippingPriceUnderThreshold = _data["shippingPriceUnderThreshold"];
            this.shippingPriceOverThreshold = _data["shippingPriceOverThreshold"];
        }
    }

    static fromJS(data: any): SellerShippingOption {
        data = typeof data === 'object' ? data : {};
        let result = new SellerShippingOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shippingMethodCode"] = this.shippingMethodCode;
        data["name"] = this.name;
        data["timeFrame"] = this.timeFrame;
        data["description"] = this.description;
        data["thresholdPrice"] = this.thresholdPrice;
        data["shippingPriceUnderThreshold"] = this.shippingPriceUnderThreshold;
        data["shippingPriceOverThreshold"] = this.shippingPriceOverThreshold;
        return data;
    }
}

/** Seller Shipping Option info */
export interface ISellerShippingOption {
    /** The identifier for this shipping option */
    shippingMethodCode?: string | undefined;
    /** The name portion of the Description */
    name?: string | undefined;
    /** The timeframe portion of the Description */
    timeFrame?: string | undefined;
    /** The display text for this option */
    description?: string | undefined;
    /** The price at which the shipping changes to “over threshold” */
    thresholdPrice?: number;
    /** The shipping price for subtotals less than threshold price */
    shippingPriceUnderThreshold?: number;
    /** The shipping price for subtotals >= threshold price (may be $0.00 for free shipping) */
    shippingPriceOverThreshold?: number;
}

/** Info about the seller that is shipping the package */
export class SellerToShip implements ISellerToShip {
    /** The id of the seller that is shipping a package */
    sellerId?: number;
    /** the maximum value of [dbo].[ShippingCategory].[ShippingCategoryId] for all the products being shipped
(from [PDT].[Product].[ShippingCategoryId]) */
    largestShippingCategoryId?: number;

    constructor(data?: ISellerToShip) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sellerId = _data["sellerId"];
            this.largestShippingCategoryId = _data["largestShippingCategoryId"];
        }
    }

    static fromJS(data: any): SellerToShip {
        data = typeof data === 'object' ? data : {};
        let result = new SellerToShip();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sellerId"] = this.sellerId;
        data["largestShippingCategoryId"] = this.largestShippingCategoryId;
        return data;
    }
}

/** Info about the seller that is shipping the package */
export interface ISellerToShip {
    /** The id of the seller that is shipping a package */
    sellerId?: number;
    /** the maximum value of [dbo].[ShippingCategory].[ShippingCategoryId] for all the products being shipped
(from [PDT].[Product].[ShippingCategoryId]) */
    largestShippingCategoryId?: number;
}

/** An object representing information about a specific user in the marketplace. */
export class UserInfo implements IUserInfo {
    /** Gets or sets the UserName that this User uses for login. */
    userName?: string | undefined;
    /** Gets or sets the dbo.User.UserId associated with this User. If set to 0
it means the user is not logged in and no info is available. */
    userId?: number;
    /** Gets or sets the dbo.User.ProviderUserKey for this User. */
    userKey?: string;
    /** Gets or sets a value indicating whether this user has an active Subscription. */
    isSubscriber?: boolean;
    lastUsedShippingAddress?: UserAddress;
    /** Gets or sets the Shipping Country used in the current session for the User. */
    shippingCountry?: string | undefined;
    /** Gets or sets the date when the account was created. */
    createdAt?: Date | undefined;
    /** Gets or sets the dbo.User.ExternalUserId. */
    externalUserId?: string;
    /** Gets or sets if user is guest. */
    isGuest?: boolean | undefined;
    /** Gets or sets a value indicating whether this user has validated their email address. */
    isValidated?: boolean;
    /** Gets or sets the user's current cart key. */
    cartKey?: string | undefined;
    /** Gets or sets the user's save for later key. */
    saveForLaterKey?: string | undefined;
    /** Gets or sets the user's product line affinity. */
    productLineAffinity?: string | undefined;
    /** Gets the user's Segment traits. */
    traits?: { [key: string]: any; } | undefined;
    /** Gets or sets the user's seller keys. */
    sellerKeys?: string[] | undefined;

    constructor(data?: IUserInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.userId = _data["userId"];
            this.userKey = _data["userKey"];
            this.isSubscriber = _data["isSubscriber"];
            this.lastUsedShippingAddress = _data["lastUsedShippingAddress"] ? UserAddress.fromJS(_data["lastUsedShippingAddress"]) : <any>undefined;
            this.shippingCountry = _data["shippingCountry"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.externalUserId = _data["externalUserId"];
            this.isGuest = _data["isGuest"];
            this.isValidated = _data["isValidated"];
            this.cartKey = _data["cartKey"];
            this.saveForLaterKey = _data["saveForLaterKey"];
            this.productLineAffinity = _data["productLineAffinity"];
            if (_data["traits"]) {
                this.traits = {} as any;
                for (let key in _data["traits"]) {
                    if (_data["traits"].hasOwnProperty(key))
                        (<any>this.traits)![key] = _data["traits"][key];
                }
            }
            if (Array.isArray(_data["sellerKeys"])) {
                this.sellerKeys = [] as any;
                for (let item of _data["sellerKeys"])
                    this.sellerKeys!.push(item);
            }
        }
    }

    static fromJS(data: any): UserInfo {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["userId"] = this.userId;
        data["userKey"] = this.userKey;
        data["isSubscriber"] = this.isSubscriber;
        data["lastUsedShippingAddress"] = this.lastUsedShippingAddress ? this.lastUsedShippingAddress.toJSON() : <any>undefined;
        data["shippingCountry"] = this.shippingCountry;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["externalUserId"] = this.externalUserId;
        data["isGuest"] = this.isGuest;
        data["isValidated"] = this.isValidated;
        data["cartKey"] = this.cartKey;
        data["saveForLaterKey"] = this.saveForLaterKey;
        data["productLineAffinity"] = this.productLineAffinity;
        if (this.traits) {
            data["traits"] = {};
            for (let key in this.traits) {
                if (this.traits.hasOwnProperty(key))
                    (<any>data["traits"])[key] = (<any>this.traits)[key];
            }
        }
        if (Array.isArray(this.sellerKeys)) {
            data["sellerKeys"] = [];
            for (let item of this.sellerKeys)
                data["sellerKeys"].push(item);
        }
        return data;
    }
}

/** An object representing information about a specific user in the marketplace. */
export interface IUserInfo {
    /** Gets or sets the UserName that this User uses for login. */
    userName?: string | undefined;
    /** Gets or sets the dbo.User.UserId associated with this User. If set to 0
it means the user is not logged in and no info is available. */
    userId?: number;
    /** Gets or sets the dbo.User.ProviderUserKey for this User. */
    userKey?: string;
    /** Gets or sets a value indicating whether this user has an active Subscription. */
    isSubscriber?: boolean;
    lastUsedShippingAddress?: UserAddress;
    /** Gets or sets the Shipping Country used in the current session for the User. */
    shippingCountry?: string | undefined;
    /** Gets or sets the date when the account was created. */
    createdAt?: Date | undefined;
    /** Gets or sets the dbo.User.ExternalUserId. */
    externalUserId?: string;
    /** Gets or sets if user is guest. */
    isGuest?: boolean | undefined;
    /** Gets or sets a value indicating whether this user has validated their email address. */
    isValidated?: boolean;
    /** Gets or sets the user's current cart key. */
    cartKey?: string | undefined;
    /** Gets or sets the user's save for later key. */
    saveForLaterKey?: string | undefined;
    /** Gets or sets the user's product line affinity. */
    productLineAffinity?: string | undefined;
    /** Gets the user's Segment traits. */
    traits?: { [key: string]: any; } | undefined;
    /** Gets or sets the user's seller keys. */
    sellerKeys?: string[] | undefined;
}

export class UserInfoApiResult implements IUserInfoApiResult {
    errors?: ApiError[] | undefined;
    results?: UserInfo[] | undefined;
    result?: UserInfo;

    constructor(data?: IUserInfoApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(UserInfo.fromJS(item));
            }
            this.result = _data["result"] ? UserInfo.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UserInfoApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUserInfoApiResult {
    errors?: ApiError[] | undefined;
    results?: UserInfo[] | undefined;
    result?: UserInfo;
}

/** A class containing request data necessary to create a guest user. */
export class CreateGuestRequest implements ICreateGuestRequest {
    /** Gets or sets the email address. */
    emailAddress?: string | undefined;
    /** Gets or sets the captcha token. */
    captchaToken?: string | undefined;
    /** Gets or sets token to be used when validating user has accepted the Terms of Service */
    termsOfServiceAccepted?: boolean;
    /** Gets or sets the Cart key associated with the guest user's cart. */
    cartKey?: string | undefined;

    constructor(data?: ICreateGuestRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emailAddress = _data["emailAddress"];
            this.captchaToken = _data["captchaToken"];
            this.termsOfServiceAccepted = _data["termsOfServiceAccepted"];
            this.cartKey = _data["cartKey"];
        }
    }

    static fromJS(data: any): CreateGuestRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateGuestRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        data["captchaToken"] = this.captchaToken;
        data["termsOfServiceAccepted"] = this.termsOfServiceAccepted;
        data["cartKey"] = this.cartKey;
        return data;
    }
}

/** A class containing request data necessary to create a guest user. */
export interface ICreateGuestRequest {
    /** Gets or sets the email address. */
    emailAddress?: string | undefined;
    /** Gets or sets the captcha token. */
    captchaToken?: string | undefined;
    /** Gets or sets token to be used when validating user has accepted the Terms of Service */
    termsOfServiceAccepted?: boolean;
    /** Gets or sets the Cart key associated with the guest user's cart. */
    cartKey?: string | undefined;
}

/** Contents of the One Time Password CX request submitted by the user */
export class OtpCxRequest implements IOtpCxRequest {
    /** This is the Name the user entered in the form. */
    name?: string | undefined;
    /** This is the shipping address the user entered in the form. */
    shippingAddress?: string | undefined;
    /** This is the billing address the user entered in the form. */
    billingAddress?: string | undefined;
    /** This is the phone number the user entered in the form. */
    phoneNumber?: string | undefined;
    /** This is Username the user originally tried to log in with. */
    username?: string | undefined;

    constructor(data?: IOtpCxRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.shippingAddress = _data["shippingAddress"];
            this.billingAddress = _data["billingAddress"];
            this.phoneNumber = _data["phoneNumber"];
            this.username = _data["username"];
        }
    }

    static fromJS(data: any): OtpCxRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OtpCxRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["shippingAddress"] = this.shippingAddress;
        data["billingAddress"] = this.billingAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["username"] = this.username;
        return data;
    }
}

/** Contents of the One Time Password CX request submitted by the user */
export interface IOtpCxRequest {
    /** This is the Name the user entered in the form. */
    name?: string | undefined;
    /** This is the shipping address the user entered in the form. */
    shippingAddress?: string | undefined;
    /** This is the billing address the user entered in the form. */
    billingAddress?: string | undefined;
    /** This is the phone number the user entered in the form. */
    phoneNumber?: string | undefined;
    /** This is Username the user originally tried to log in with. */
    username?: string | undefined;
}

/** A class containing request data necessary to upgrade a guest account to a user. */
export class UpgradeGuestRequest implements IUpgradeGuestRequest {
    /** Gets or sets the key associated with the ChangePasswordRequest entry. */
    key?: string | undefined;
    /** Gets or sets the email associated with the Guest user. */
    email?: string | undefined;
    /** Gets or sets the password to be used to create the user account. */
    password?: string | undefined;
    /** Gets or sets the Cart key associated with the guest user's cart. */
    cartKey?: string | undefined;

    constructor(data?: IUpgradeGuestRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.email = _data["email"];
            this.password = _data["password"];
            this.cartKey = _data["cartKey"];
        }
    }

    static fromJS(data: any): UpgradeGuestRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpgradeGuestRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["email"] = this.email;
        data["password"] = this.password;
        data["cartKey"] = this.cartKey;
        return data;
    }
}

/** A class containing request data necessary to upgrade a guest account to a user. */
export interface IUpgradeGuestRequest {
    /** Gets or sets the key associated with the ChangePasswordRequest entry. */
    key?: string | undefined;
    /** Gets or sets the email associated with the Guest user. */
    email?: string | undefined;
    /** Gets or sets the password to be used to create the user account. */
    password?: string | undefined;
    /** Gets or sets the Cart key associated with the guest user's cart. */
    cartKey?: string | undefined;
}

export class UserAddress implements IUserAddress {
    firstName?: string | undefined;
    lastName?: string | undefined;
    address1?: string | undefined;
    address2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipcode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;

    constructor(data?: IUserAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.address1 = _data["address1"];
            this.address2 = _data["address2"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.zipcode = _data["zipcode"];
            this.country = _data["country"];
            this.phone = _data["phone"];
        }
    }

    static fromJS(data: any): UserAddress {
        data = typeof data === 'object' ? data : {};
        let result = new UserAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["address1"] = this.address1;
        data["address2"] = this.address2;
        data["city"] = this.city;
        data["state"] = this.state;
        data["zipcode"] = this.zipcode;
        data["country"] = this.country;
        data["phone"] = this.phone;
        return data;
    }
}

export interface IUserAddress {
    firstName?: string | undefined;
    lastName?: string | undefined;
    address1?: string | undefined;
    address2?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zipcode?: string | undefined;
    country?: string | undefined;
    phone?: string | undefined;
}

/** An object representing static content to display on the home page. */
export class WwwContent implements IWwwContent {
    hero?: HeroModel;
    promoBanner?: PromoBanner;
    largePromo?: LargePromo;

    constructor(data?: IWwwContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hero = _data["hero"] ? HeroModel.fromJS(_data["hero"]) : <any>undefined;
            this.promoBanner = _data["promoBanner"] ? PromoBanner.fromJS(_data["promoBanner"]) : <any>undefined;
            this.largePromo = _data["largePromo"] ? LargePromo.fromJS(_data["largePromo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WwwContent {
        data = typeof data === 'object' ? data : {};
        let result = new WwwContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hero"] = this.hero ? this.hero.toJSON() : <any>undefined;
        data["promoBanner"] = this.promoBanner ? this.promoBanner.toJSON() : <any>undefined;
        data["largePromo"] = this.largePromo ? this.largePromo.toJSON() : <any>undefined;
        return data;
    }
}

/** An object representing static content to display on the home page. */
export interface IWwwContent {
    hero?: HeroModel;
    promoBanner?: PromoBanner;
    largePromo?: LargePromo;
}

export class WwwContentApiResult implements IWwwContentApiResult {
    errors?: ApiError[] | undefined;
    results?: WwwContent[] | undefined;
    result?: WwwContent;

    constructor(data?: IWwwContentApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(WwwContent.fromJS(item));
            }
            this.result = _data["result"] ? WwwContent.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WwwContentApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new WwwContentApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWwwContentApiResult {
    errors?: ApiError[] | undefined;
    results?: WwwContent[] | undefined;
    result?: WwwContent;
}

export class ActionResult implements IActionResult {

    constructor(data?: IActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new ActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IActionResult {
}

export class BadRequestResult implements IBadRequestResult {
    statusCode?: number;

    constructor(data?: IBadRequestResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): BadRequestResult {
        data = typeof data === 'object' ? data : {};
        let result = new BadRequestResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IBadRequestResult {
    statusCode?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class BooleanApiResult implements IBooleanApiResult {
    errors?: ApiError[] | undefined;
    results?: boolean[] | undefined;
    result?: boolean;

    constructor(data?: IBooleanApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(item);
            }
            this.result = _data["result"];
        }
    }

    static fromJS(data: any): BooleanApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item);
        }
        data["result"] = this.result;
        return data;
    }
}

export interface IBooleanApiResult {
    errors?: ApiError[] | undefined;
    results?: boolean[] | undefined;
    result?: boolean;
}

export class BooleanApiResultActionResult implements IBooleanApiResultActionResult {
    result?: ActionResult;
    value?: BooleanApiResult;

    constructor(data?: IBooleanApiResultActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.result = _data["result"] ? ActionResult.fromJS(_data["result"]) : <any>undefined;
            this.value = _data["value"] ? BooleanApiResult.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BooleanApiResultActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanApiResultActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IBooleanApiResultActionResult {
    result?: ActionResult;
    value?: BooleanApiResult;
}

export class EligibleKickbackProduct implements IEligibleKickbackProduct {
    productTypeId?: number;
    productLineId?: number;
    amount?: number;
    isDirect?: boolean;

    constructor(data?: IEligibleKickbackProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productTypeId = _data["productTypeId"];
            this.productLineId = _data["productLineId"];
            this.amount = _data["amount"];
            this.isDirect = _data["isDirect"];
        }
    }

    static fromJS(data: any): EligibleKickbackProduct {
        data = typeof data === 'object' ? data : {};
        let result = new EligibleKickbackProduct();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productTypeId"] = this.productTypeId;
        data["productLineId"] = this.productLineId;
        data["amount"] = this.amount;
        data["isDirect"] = this.isDirect;
        return data;
    }
}

export interface IEligibleKickbackProduct {
    productTypeId?: number;
    productLineId?: number;
    amount?: number;
    isDirect?: boolean;
}

export class EligibleKickbackSummary implements IEligibleKickbackSummary {
    kickBackId?: number;
    name?: string | undefined;
    percent?: number;
    amount?: number;
    isSubscriberOnly?: boolean;

    constructor(data?: IEligibleKickbackSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kickBackId = _data["kickBackId"];
            this.name = _data["name"];
            this.percent = _data["percent"];
            this.amount = _data["amount"];
            this.isSubscriberOnly = _data["isSubscriberOnly"];
        }
    }

    static fromJS(data: any): EligibleKickbackSummary {
        data = typeof data === 'object' ? data : {};
        let result = new EligibleKickbackSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kickBackId"] = this.kickBackId;
        data["name"] = this.name;
        data["percent"] = this.percent;
        data["amount"] = this.amount;
        data["isSubscriberOnly"] = this.isSubscriberOnly;
        return data;
    }
}

export interface IEligibleKickbackSummary {
    kickBackId?: number;
    name?: string | undefined;
    percent?: number;
    amount?: number;
    isSubscriberOnly?: boolean;
}

export class KickbackInfo implements IKickbackInfo {
    userId?: number;
    kickbackId?: number | undefined;
    executed?: boolean;
    name?: string | undefined;
    description?: string | undefined;
    directOnly?: boolean;
    subscriberOnly?: boolean;
    kickbackType?: string | undefined;
    kickbackProductTypes?: string[] | undefined;
    kickbackProductTypeIds?: number[] | undefined;
    productTypeIds?: number[] | undefined;
    kickbackProductLines?: string[] | undefined;
    kickbackProductLineIds?: number[] | undefined;
    startDate?: string | undefined;
    startTime?: string | undefined;
    startBuffer?: number | undefined;
    endDate?: string | undefined;
    endTime?: string | undefined;
    endBuffer?: number | undefined;
    kickbackPercent?: number | undefined;
    note?: string | undefined;
    maxKickbackAmt?: number;

    constructor(data?: IKickbackInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.kickbackId = _data["kickbackId"];
            this.executed = _data["executed"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.directOnly = _data["directOnly"];
            this.subscriberOnly = _data["subscriberOnly"];
            this.kickbackType = _data["kickbackType"];
            if (Array.isArray(_data["kickbackProductTypes"])) {
                this.kickbackProductTypes = [] as any;
                for (let item of _data["kickbackProductTypes"])
                    this.kickbackProductTypes!.push(item);
            }
            if (Array.isArray(_data["kickbackProductTypeIds"])) {
                this.kickbackProductTypeIds = [] as any;
                for (let item of _data["kickbackProductTypeIds"])
                    this.kickbackProductTypeIds!.push(item);
            }
            if (Array.isArray(_data["productTypeIds"])) {
                this.productTypeIds = [] as any;
                for (let item of _data["productTypeIds"])
                    this.productTypeIds!.push(item);
            }
            if (Array.isArray(_data["kickbackProductLines"])) {
                this.kickbackProductLines = [] as any;
                for (let item of _data["kickbackProductLines"])
                    this.kickbackProductLines!.push(item);
            }
            if (Array.isArray(_data["kickbackProductLineIds"])) {
                this.kickbackProductLineIds = [] as any;
                for (let item of _data["kickbackProductLineIds"])
                    this.kickbackProductLineIds!.push(item);
            }
            this.startDate = _data["startDate"];
            this.startTime = _data["startTime"];
            this.startBuffer = _data["startBuffer"];
            this.endDate = _data["endDate"];
            this.endTime = _data["endTime"];
            this.endBuffer = _data["endBuffer"];
            this.kickbackPercent = _data["kickbackPercent"];
            this.note = _data["note"];
            this.maxKickbackAmt = _data["maxKickbackAmt"];
        }
    }

    static fromJS(data: any): KickbackInfo {
        data = typeof data === 'object' ? data : {};
        let result = new KickbackInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["kickbackId"] = this.kickbackId;
        data["executed"] = this.executed;
        data["name"] = this.name;
        data["description"] = this.description;
        data["directOnly"] = this.directOnly;
        data["subscriberOnly"] = this.subscriberOnly;
        data["kickbackType"] = this.kickbackType;
        if (Array.isArray(this.kickbackProductTypes)) {
            data["kickbackProductTypes"] = [];
            for (let item of this.kickbackProductTypes)
                data["kickbackProductTypes"].push(item);
        }
        if (Array.isArray(this.kickbackProductTypeIds)) {
            data["kickbackProductTypeIds"] = [];
            for (let item of this.kickbackProductTypeIds)
                data["kickbackProductTypeIds"].push(item);
        }
        if (Array.isArray(this.productTypeIds)) {
            data["productTypeIds"] = [];
            for (let item of this.productTypeIds)
                data["productTypeIds"].push(item);
        }
        if (Array.isArray(this.kickbackProductLines)) {
            data["kickbackProductLines"] = [];
            for (let item of this.kickbackProductLines)
                data["kickbackProductLines"].push(item);
        }
        if (Array.isArray(this.kickbackProductLineIds)) {
            data["kickbackProductLineIds"] = [];
            for (let item of this.kickbackProductLineIds)
                data["kickbackProductLineIds"].push(item);
        }
        data["startDate"] = this.startDate;
        data["startTime"] = this.startTime;
        data["startBuffer"] = this.startBuffer;
        data["endDate"] = this.endDate;
        data["endTime"] = this.endTime;
        data["endBuffer"] = this.endBuffer;
        data["kickbackPercent"] = this.kickbackPercent;
        data["note"] = this.note;
        data["maxKickbackAmt"] = this.maxKickbackAmt;
        return data;
    }
}

export interface IKickbackInfo {
    userId?: number;
    kickbackId?: number | undefined;
    executed?: boolean;
    name?: string | undefined;
    description?: string | undefined;
    directOnly?: boolean;
    subscriberOnly?: boolean;
    kickbackType?: string | undefined;
    kickbackProductTypes?: string[] | undefined;
    kickbackProductTypeIds?: number[] | undefined;
    productTypeIds?: number[] | undefined;
    kickbackProductLines?: string[] | undefined;
    kickbackProductLineIds?: number[] | undefined;
    startDate?: string | undefined;
    startTime?: string | undefined;
    startBuffer?: number | undefined;
    endDate?: string | undefined;
    endTime?: string | undefined;
    endBuffer?: number | undefined;
    kickbackPercent?: number | undefined;
    note?: string | undefined;
    maxKickbackAmt?: number;
}

export class ApiError implements IApiError {
    code?: string | undefined;
    message?: string | undefined;

    constructor(data?: IApiError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): ApiError {
        data = typeof data === 'object' ? data : {};
        let result = new ApiError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        return data;
    }
}

export interface IApiError {
    code?: string | undefined;
    message?: string | undefined;
}

export class SalesHistoryDocument implements ISalesHistoryDocument {
    condition?: string | undefined;
    variant?: string | undefined;
    language?: string | undefined;
    quantity?: number;
    title?: string | undefined;
    listingType?: string | undefined;
    customListingId?: string | undefined;
    purchasePrice?: number;
    shippingPrice?: number;
    orderDate?: Date;

    constructor(data?: ISalesHistoryDocument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.condition = _data["condition"];
            this.variant = _data["variant"];
            this.language = _data["language"];
            this.quantity = _data["quantity"];
            this.title = _data["title"];
            this.listingType = _data["listingType"];
            this.customListingId = _data["customListingId"];
            this.purchasePrice = _data["purchasePrice"];
            this.shippingPrice = _data["shippingPrice"];
            this.orderDate = _data["orderDate"] ? new Date(_data["orderDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SalesHistoryDocument {
        data = typeof data === 'object' ? data : {};
        let result = new SalesHistoryDocument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["condition"] = this.condition;
        data["variant"] = this.variant;
        data["language"] = this.language;
        data["quantity"] = this.quantity;
        data["title"] = this.title;
        data["listingType"] = this.listingType;
        data["customListingId"] = this.customListingId;
        data["purchasePrice"] = this.purchasePrice;
        data["shippingPrice"] = this.shippingPrice;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface ISalesHistoryDocument {
    condition?: string | undefined;
    variant?: string | undefined;
    language?: string | undefined;
    quantity?: number;
    title?: string | undefined;
    listingType?: string | undefined;
    customListingId?: string | undefined;
    purchasePrice?: number;
    shippingPrice?: number;
    orderDate?: Date;
}

export class SalesHistoryResponse implements ISalesHistoryResponse {
    previousPage?: string | undefined;
    nextPage?: string | undefined;
    resultCount?: number;
    totalResults?: number;
    data?: SalesHistoryDocument[] | undefined;

    constructor(data?: ISalesHistoryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.previousPage = _data["previousPage"];
            this.nextPage = _data["nextPage"];
            this.resultCount = _data["resultCount"];
            this.totalResults = _data["totalResults"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SalesHistoryDocument.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SalesHistoryResponse {
        data = typeof data === 'object' ? data : {};
        let result = new SalesHistoryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["previousPage"] = this.previousPage;
        data["nextPage"] = this.nextPage;
        data["resultCount"] = this.resultCount;
        data["totalResults"] = this.totalResults;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISalesHistoryResponse {
    previousPage?: string | undefined;
    nextPage?: string | undefined;
    resultCount?: number;
    totalResults?: number;
    data?: SalesHistoryDocument[] | undefined;
}

export class SalesHistoryResponseApiResult implements ISalesHistoryResponseApiResult {
    errors?: ApiError[] | undefined;
    results?: SalesHistoryResponse[] | undefined;
    result?: SalesHistoryResponse;

    constructor(data?: ISalesHistoryResponseApiResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["errors"])) {
                this.errors = [] as any;
                for (let item of _data["errors"])
                    this.errors!.push(ApiError.fromJS(item));
            }
            if (Array.isArray(_data["results"])) {
                this.results = [] as any;
                for (let item of _data["results"])
                    this.results!.push(SalesHistoryResponse.fromJS(item));
            }
            this.result = _data["result"] ? SalesHistoryResponse.fromJS(_data["result"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SalesHistoryResponseApiResult {
        data = typeof data === 'object' ? data : {};
        let result = new SalesHistoryResponseApiResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item.toJSON());
        }
        if (Array.isArray(this.results)) {
            data["results"] = [];
            for (let item of this.results)
                data["results"].push(item.toJSON());
        }
        data["result"] = this.result ? this.result.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISalesHistoryResponseApiResult {
    errors?: ApiError[] | undefined;
    results?: SalesHistoryResponse[] | undefined;
    result?: SalesHistoryResponse;
}

/** An object used for passing user credentials and recaptcha data */
export class SignInData implements ISignInData {
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets password */
    password?: string | undefined;
    /** Gets or sets token to be used to validate the captcha */
    captchaToken?: string | undefined;
    /** Gets or sets token to be used when validating user has accepted the Terms of Service */
    termsOfServiceAccepted?: boolean;
    /** Gets or sets antiforgery token to be used when validating user */
    antiforgeryToken?: string | undefined;
    /** Gets or sets whether this call is coming from the email validation page or not */
    validation?: boolean;
    /** Gets or sets the email validation key */
    key?: string | undefined;
    /** Gets or sets if this sign-in request is for revalidation. */
    isRevalidation?: boolean;
    /** Gets or sets if the revalidation should be remembered for longer than normal. */
    isLongTermRevalidation?: boolean;
    /** Gets or sets if this sign in attempt is from the mobile app. */
    isMobileAppLogin?: boolean;

    constructor(data?: ISignInData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
            this.captchaToken = _data["captchaToken"];
            this.termsOfServiceAccepted = _data["termsOfServiceAccepted"];
            this.antiforgeryToken = _data["antiforgeryToken"];
            this.validation = _data["validation"];
            this.key = _data["key"];
            this.isRevalidation = _data["isRevalidation"];
            this.isLongTermRevalidation = _data["isLongTermRevalidation"];
            this.isMobileAppLogin = _data["isMobileAppLogin"];
        }
    }

    static fromJS(data: any): SignInData {
        data = typeof data === 'object' ? data : {};
        let result = new SignInData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        data["captchaToken"] = this.captchaToken;
        data["termsOfServiceAccepted"] = this.termsOfServiceAccepted;
        data["antiforgeryToken"] = this.antiforgeryToken;
        data["validation"] = this.validation;
        data["key"] = this.key;
        data["isRevalidation"] = this.isRevalidation;
        data["isLongTermRevalidation"] = this.isLongTermRevalidation;
        data["isMobileAppLogin"] = this.isMobileAppLogin;
        return data;
    }
}

/** An object used for passing user credentials and recaptcha data */
export interface ISignInData {
    /** Gets or sets username */
    username?: string | undefined;
    /** Gets or sets password */
    password?: string | undefined;
    /** Gets or sets token to be used to validate the captcha */
    captchaToken?: string | undefined;
    /** Gets or sets token to be used when validating user has accepted the Terms of Service */
    termsOfServiceAccepted?: boolean;
    /** Gets or sets antiforgery token to be used when validating user */
    antiforgeryToken?: string | undefined;
    /** Gets or sets whether this call is coming from the email validation page or not */
    validation?: boolean;
    /** Gets or sets the email validation key */
    key?: string | undefined;
    /** Gets or sets if this sign-in request is for revalidation. */
    isRevalidation?: boolean;
    /** Gets or sets if the revalidation should be remembered for longer than normal. */
    isLongTermRevalidation?: boolean;
    /** Gets or sets if this sign in attempt is from the mobile app. */
    isMobileAppLogin?: boolean;
}

/** The results of an attempt to sign up. */
export class SignInResult implements ISignInResult {
    /** The result of the attempt.  Typically "Success", "Redirect", "AccountBlocked", "AccountLocked", or "InvalidEmailPassword". */
    loginResult?: string | undefined;
    /** The user's auth key if they are signing into the mobile app. */
    authKey?: string | undefined;

    constructor(data?: ISignInResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loginResult = _data["loginResult"];
            this.authKey = _data["authKey"];
        }
    }

    static fromJS(data: any): SignInResult {
        data = typeof data === 'object' ? data : {};
        let result = new SignInResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginResult"] = this.loginResult;
        data["authKey"] = this.authKey;
        return data;
    }
}

/** The results of an attempt to sign up. */
export interface ISignInResult {
    /** The result of the attempt.  Typically "Success", "Redirect", "AccountBlocked", "AccountLocked", or "InvalidEmailPassword". */
    loginResult?: string | undefined;
    /** The user's auth key if they are signing into the mobile app. */
    authKey?: string | undefined;
}

/** The results of an attempt to sign up. */
export class SignUpResult implements ISignUpResult {
    /** The result of the attempt.  Typically "Success", "Redirect", "AccountBlocked", "AccountLocked", or "InvalidEmailPassword". */
    loginResult?: string | undefined;
    /** The user's auth key if they are signing into the mobile app. */
    authKey?: string | undefined;

    constructor(data?: ISignUpResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.loginResult = _data["loginResult"];
            this.authKey = _data["authKey"];
        }
    }

    static fromJS(data: any): SignUpResult {
        data = typeof data === 'object' ? data : {};
        let result = new SignUpResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginResult"] = this.loginResult;
        data["authKey"] = this.authKey;
        return data;
    }
}

/** The results of an attempt to sign up. */
export interface ISignUpResult {
    /** The result of the attempt.  Typically "Success", "Redirect", "AccountBlocked", "AccountLocked", or "InvalidEmailPassword". */
    loginResult?: string | undefined;
    /** The user's auth key if they are signing into the mobile app. */
    authKey?: string | undefined;
}